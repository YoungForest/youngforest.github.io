{
    "version": "https://jsonfeed.org/version/1",
    "title": "YoungForest's blog • All posts by \"kickstart\" category",
    "description": "佛系更新；生活、学习",
    "home_page_url": "https://youngforest.github.io",
    "items": [
        {
            "id": "https://youngforest.github.io/2021/04/20/kick-start-2021-round-B/",
            "url": "https://youngforest.github.io/2021/04/20/kick-start-2021-round-B/",
            "title": "kick start 2021 round B",
            "date_published": "2021-04-20T11:31:25.000Z",
            "content_html": "<p>比赛时间是北京的19号上午7点到10点，因为恰好下午2点要交毕设初稿。最近忙着一直在写大论文。因此并未参加Round B. 现如今自己已经过了校招的年纪，打Kick Start纯粹是为了娱乐。<br />\n赛后补题。</p>\n<p><a href=\"https://codingcompetitions.withgoogle.com/kickstart/round/0000000000435a5b\">比赛题目链接</a></p>\n<h2 id=\"increasing-substring\"><a class=\"markdownIt-Anchor\" href=\"#increasing-substring\"></a> <a href=\"https://codingcompetitions.withgoogle.com/kickstart/round/0000000000435a5b/000000000077a882\">Increasing Substring</a></h2>\n<p>签到题。DP，只需要和前一个字符比大小。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> N ;</span><br><span class=\"line\">    cin &gt;&gt; N;</span><br><span class=\"line\">    string s;</span><br><span class=\"line\">    cin &gt;&gt; s;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">dp</span><span class=\"params\">(N)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; N; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span> &amp;&amp; s[i] &gt; s[i<span class=\"number\">-1</span>]) &#123;</span><br><span class=\"line\">            dp[i] = dp[i<span class=\"number\">-1</span>] + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            dp[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; dp[i] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> T;</span><br><span class=\"line\">    cin &gt;&gt; T;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; T; ++i) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Case #&quot;</span> &lt;&lt; i + <span class=\"number\">1</span> &lt;&lt; <span class=\"string\">&quot;: &quot;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">solve</span>();</span><br><span class=\"line\">        cout &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(N),<br />\n空间复杂度: O(N) -&gt; O(1). 虽然我的实现是O(N)的，但其实<code>dp</code>数组是没必要存的，只关心前一个的值。</p>\n<h2 id=\"longest-progression\"><a class=\"markdownIt-Anchor\" href=\"#longest-progression\"></a> <a href=\"https://codingcompetitions.withgoogle.com/kickstart/round/0000000000435a5b/000000000077a3a5\">Longest Progression</a></h2>\n<p>遇到WA，是因为C++类型的原因。列在这里引以为戒。<br />\n因为类型转换的原因，size() 和 -1比较时，-1永远大。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unordered_map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unordered_set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;functional&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">int</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T, <span class=\"keyword\">class</span> <span class=\"title class_\">Cmp</span>&gt;</span><br><span class=\"line\">ostream&amp; <span class=\"keyword\">operator</span> &lt;&lt;(ostream&amp; out, <span class=\"type\">const</span> unordered_set&lt;T, Cmp&gt;&amp; a) &#123;</span><br><span class=\"line\">  out &lt;&lt; <span class=\"string\">&quot;&#123;&quot;</span>; <span class=\"type\">bool</span> first = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span>&amp; v : a) &#123; out &lt;&lt; (first ? <span class=\"string\">&quot;&quot;</span> : <span class=\"string\">&quot;, &quot;</span>); out &lt;&lt; v; first = <span class=\"number\">0</span>;&#125; out &lt;&lt; <span class=\"string\">&quot;&#125;&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> out;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> U, <span class=\"keyword\">typename</span> T, <span class=\"keyword\">class</span> <span class=\"title class_\">Cmp</span>&gt;</span><br><span class=\"line\">ostream&amp; <span class=\"keyword\">operator</span> &lt;&lt;(ostream&amp; out, <span class=\"type\">const</span> unordered_map&lt;U, T, Cmp&gt;&amp; a) &#123;</span><br><span class=\"line\">  out &lt;&lt; <span class=\"string\">&quot;&#123;&quot;</span>; <span class=\"type\">bool</span> first = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span>&amp; p : a) &#123; out &lt;&lt; (first ? <span class=\"string\">&quot;&quot;</span> : <span class=\"string\">&quot;, &quot;</span>); out &lt;&lt; p.first &lt;&lt; <span class=\"string\">&quot;:&quot;</span> &lt;&lt; p.second; first = <span class=\"number\">0</span>;&#125; out &lt;&lt; <span class=\"string\">&quot;&#125;&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> out;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> N ;</span><br><span class=\"line\">    cin &gt;&gt; N;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">nums</span><span class=\"params\">(N)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; N; ++i) &#123;</span><br><span class=\"line\">        cin &gt;&gt; nums[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (N &lt;= <span class=\"number\">3</span>) <span class=\"keyword\">return</span> N;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">diff</span><span class=\"params\">(N)</span></span>;</span><br><span class=\"line\">    diff[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; N; ++i) &#123;</span><br><span class=\"line\">        diff[i] = nums[i] - nums[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> hi = N + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> lo = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> binary = [&amp;](ll lo, ll hi, function&lt;<span class=\"built_in\">bool</span>(<span class=\"type\">const</span> ll)&gt; predicate) -&gt; <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// return first true</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (lo &lt; hi) &#123;</span><br><span class=\"line\">            ll mid = lo + (hi - lo) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">predicate</span>(mid)) &#123;</span><br><span class=\"line\">                hi = mid;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                lo = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lo;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> pred = [&amp;](<span class=\"type\">const</span> ll x) -&gt; <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">        unordered_map&lt;<span class=\"type\">int</span>, unordered_set&lt;<span class=\"type\">int</span>&gt;&gt; cnt;</span><br><span class=\"line\">        map&lt;<span class=\"type\">int</span>, unordered_set&lt;<span class=\"type\">int</span>&gt;, greater&lt;<span class=\"type\">int</span>&gt;&gt; reverseCnt; <span class=\"comment\">// cnt-&gt;value, cnt-&gt;count</span></span><br><span class=\"line\">        <span class=\"keyword\">auto</span> addCnt = [&amp;](<span class=\"type\">const</span> <span class=\"type\">int</span> i) -&gt; <span class=\"type\">void</span> &#123;</span><br><span class=\"line\">            cnt[diff[i]].<span class=\"built_in\">insert</span>(i);</span><br><span class=\"line\">            reverseCnt[cnt[diff[i]].<span class=\"built_in\">size</span>()].<span class=\"built_in\">insert</span>(diff[i]);</span><br><span class=\"line\">            reverseCnt[cnt[diff[i]].<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>].<span class=\"built_in\">erase</span>(diff[i]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (reverseCnt[cnt[diff[i]].<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>].<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">                reverseCnt.<span class=\"built_in\">erase</span>(cnt[diff[i]].<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> eraseCnt = [&amp;](<span class=\"type\">const</span> <span class=\"type\">int</span> i) -&gt; <span class=\"type\">void</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span>&amp; first = cnt[diff[i]];</span><br><span class=\"line\">            first.<span class=\"built_in\">erase</span>(first.<span class=\"built_in\">find</span>(i));</span><br><span class=\"line\">            reverseCnt[cnt[diff[i]].<span class=\"built_in\">size</span>() + <span class=\"number\">1</span>].<span class=\"built_in\">erase</span>(diff[i]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (reverseCnt[cnt[diff[i]].<span class=\"built_in\">size</span>() + <span class=\"number\">1</span>].<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">                reverseCnt.<span class=\"built_in\">erase</span>(cnt[diff[i]].<span class=\"built_in\">size</span>() + <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (first.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">                cnt.<span class=\"built_in\">erase</span>(diff[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            reverseCnt[cnt[diff[i]].<span class=\"built_in\">size</span>()].<span class=\"built_in\">insert</span>(diff[i]);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; x; ++i) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">addCnt</span>(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> check = [&amp;](<span class=\"type\">const</span> <span class=\"type\">int</span> lastIdx) -&gt; <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// cout &lt;&lt; lastIdx &lt;&lt; &quot; ... &quot; &lt;&lt; cnt &lt;&lt; &quot; &quot; &lt;&lt; maxDiffIndex &lt;&lt; &quot; &quot; &lt;&lt; maxDiffValue &lt;&lt; endl;</span></span><br><span class=\"line\">            <span class=\"keyword\">auto</span> it = reverseCnt.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">            <span class=\"type\">const</span> <span class=\"type\">int</span> maxDiffValue = it-&gt;first;</span><br><span class=\"line\">            <span class=\"type\">const</span> <span class=\"type\">int</span> maxDiffIndex = *(it-&gt;second.<span class=\"built_in\">begin</span>());</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (maxDiffValue == x - <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (maxDiffValue == x - <span class=\"number\">2</span> || maxDiffValue == x - <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">                vector&lt;<span class=\"type\">int</span>&gt; index;</span><br><span class=\"line\">                index.<span class=\"built_in\">reserve</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">const</span> <span class=\"keyword\">auto</span>&amp; p : cnt) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (p.first != maxDiffIndex) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (<span class=\"type\">const</span> <span class=\"keyword\">auto</span>&amp; idx : p.second) &#123;</span><br><span class=\"line\">                            index.<span class=\"built_in\">push_back</span>(idx);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (maxDiffValue == x - <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (index[<span class=\"number\">0</span>] == lastIdx || index[<span class=\"number\">0</span>] == lastIdx - x + <span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (maxDiffValue == x - <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (index[<span class=\"number\">1</span>] &lt; index[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">swap</span>(index[<span class=\"number\">0</span>], index[<span class=\"number\">1</span>]);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (index[<span class=\"number\">0</span>] + <span class=\"number\">1</span> != index[<span class=\"number\">1</span>]) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (nums[index[<span class=\"number\">1</span>]] - nums[index[<span class=\"number\">0</span>] - <span class=\"number\">1</span>] == maxDiffIndex * <span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"comment\">// cout &lt;&lt; &quot;Debug: &quot; &lt;&lt; maxDiffValue &lt;&lt; endl;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">check</span>(x<span class=\"number\">-1</span>)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"comment\">// if check</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = x; i &lt; N; ++i) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// cout &lt;&lt; &quot;before: &quot; &lt;&lt; cnt ;</span></span><br><span class=\"line\">            <span class=\"built_in\">eraseCnt</span>(i - x + <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"built_in\">addCnt</span>(i);</span><br><span class=\"line\">            <span class=\"comment\">// cout &lt;&lt; &quot;after: &quot; &lt;&lt; cnt &lt;&lt; &quot; !!! &quot;;</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">check</span>(i)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// for (int i = 4; i &lt; hi; ++i) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     cout &lt;&lt; i &lt;&lt; &quot;:&quot; &lt;&lt; pred(i) &lt;&lt; &quot; &quot;;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">binary</span>(lo, hi, pred) - <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> T;</span><br><span class=\"line\">    cin &gt;&gt; T;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; T; ++i) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Case #&quot;</span> &lt;&lt; i + <span class=\"number\">1</span> &lt;&lt; <span class=\"string\">&quot;: &quot;</span>;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"built_in\">solve</span>();</span><br><span class=\"line\">        cout &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(N log N log N),<br />\n空间复杂度: O(N).</p>\n<p>按理说 <code>N = 10 ^ 5</code> 不会超时，然而大的case还是TLE了。可能是被卡常数了。<br />\n看了官方题解，时间复杂度是O(N)。多了两个log还是不行呀。</p>\n<h2 id=\"consecutive-primes\"><a class=\"markdownIt-Anchor\" href=\"#consecutive-primes\"></a> <a href=\"https://codingcompetitions.withgoogle.com/kickstart/round/0000000000435a5b/000000000077a8e6\">Consecutive Primes</a></h2>\n<h2 id=\"truck-delivery\"><a class=\"markdownIt-Anchor\" href=\"#truck-delivery\"></a> <a href=\"https://codingcompetitions.withgoogle.com/kickstart/round/0000000000435a5b/000000000077a885\">Truck Delivery</a></h2>\n",
            "tags": [
                "Competitive Programming"
            ]
        },
        {
            "id": "https://youngforest.github.io/2021/03/22/kick-start-2021-round-A/",
            "url": "https://youngforest.github.io/2021/03/22/kick-start-2021-round-A/",
            "title": "kick start 2021 round A",
            "date_published": "2021-03-22T11:19:06.000Z",
            "content_html": "<table>\n<thead>\n<tr>\n<th>ID</th>\n<th>score</th>\n<th>rank</th>\n<th>K-Goodness String</th>\n<th>L Shaped Plots</th>\n<th>Rabbit House</th>\n<th>Checksum</th>\n<th>Penalty Time</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>YoungForest</td>\n<td>56</td>\n<td>1295</td>\n<td>5 + 7</td>\n<td>8 + 12</td>\n<td>9 + 15</td>\n<td>0</td>\n<td>1:40:55</td>\n</tr>\n</tbody>\n</table>\n<p>久违的参加了KickStart比赛。之前2年还因为想去Google的原因一直坚持打，不过人算不如天算，因为疫情原因实习和秋招都直接凉了。2年多参加了10+场比赛也“白”打了。<br />\n今年参加真的是全凭兴趣。结果排名果然1000+。之前基本都是几百。<br />\n不得说，从去年开始，KickStart简单也友好了很多。之前经常只能做出来1道半题。后来为了增加参赛范围，3题变四题，整体难度也降下来了。</p>\n<span id=\"more\"></span>\n<h2 id=\"k-goodness-string\"><a class=\"markdownIt-Anchor\" href=\"#k-goodness-string\"></a> K-Goodness String</h2>\n<p>签到题。统计字符串的goodness score，可知无论是增一还是减一的最小操作都是1.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> N, K;</span><br><span class=\"line\">    cin &gt;&gt; N &gt;&gt; K;</span><br><span class=\"line\">    string s;</span><br><span class=\"line\">    cin &gt;&gt; s;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= N / <span class=\"number\">2</span>; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s[i - <span class=\"number\">1</span>] != s[N - i + <span class=\"number\">1</span> - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            ++k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">abs</span>(K - k);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> T;</span><br><span class=\"line\">    cin &gt;&gt; T;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; T; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> ans = <span class=\"built_in\">solve</span>();</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Case #&quot;</span> &lt;&lt; i + <span class=\"number\">1</span> &lt;&lt; <span class=\"string\">&quot;: &quot;</span> &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(N),<br />\n空间复杂度: O(N).</p>\n<h2 id=\"l-shaped-plots\"><a class=\"markdownIt-Anchor\" href=\"#l-shaped-plots\"></a> L Shaped Plots</h2>\n<p>统计一个方向的L，其他方向的L可以通过 上下/左右翻转 和 旋转 共8种情况得到。<br />\n用动态规划的思想更新当前位置左边的长度和上边的长度，求的以当前位置为拐点的L的数目。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> R, C;</span><br><span class=\"line\">    cin &gt;&gt; R &gt;&gt; C;</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">bool</span>&gt;&gt; <span class=\"built_in\">matrix</span>(R, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">bool</span>&gt; (C));</span><br><span class=\"line\">    <span class=\"type\">int</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; R; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; C; ++j) &#123;</span><br><span class=\"line\">            cin &gt;&gt; x;</span><br><span class=\"line\">            matrix[i][j] = (x == <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">auto</span> reverseLeftRight = [&amp;]() -&gt; <span class=\"type\">void</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span>&amp; m : matrix) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">reverse</span>(m.<span class=\"built_in\">begin</span>(), m.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> reverseUpDown = [&amp;]() -&gt; <span class=\"type\">void</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; C; ++j) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; R - <span class=\"number\">1</span> - i; ++i) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">swap</span>(matrix[i][j], matrix[R - <span class=\"number\">1</span> - i][j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> flip = [&amp;]() -&gt; <span class=\"type\">void</span> &#123;</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">bool</span>&gt;&gt; <span class=\"built_in\">newMatrix</span>(C, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">bool</span>&gt;(R));</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; R; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; C; ++j) &#123;</span><br><span class=\"line\">                newMatrix[j][i] = matrix[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        matrix = <span class=\"built_in\">move</span>(newMatrix);</span><br><span class=\"line\">        <span class=\"built_in\">swap</span>(R, C);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> one = [&amp;]() -&gt; <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">dp</span>(R, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; (C));</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; C; ++j) &#123;</span><br><span class=\"line\">            dp[<span class=\"number\">0</span>][j] = matrix[<span class=\"number\">0</span>][j] ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; R; ++i) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; C; ++j) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (matrix[i][j]) &#123;</span><br><span class=\"line\">                    ++left;</span><br><span class=\"line\">                    dp[i][j] = dp[i<span class=\"number\">-1</span>][j] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                    <span class=\"type\">const</span> <span class=\"type\">int</span> up = dp[i][j] / <span class=\"number\">2</span>;</span><br><span class=\"line\">                    <span class=\"type\">const</span> <span class=\"type\">int</span> could = <span class=\"built_in\">min</span>(up, left);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (could &gt; <span class=\"number\">1</span>) ans += could - <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    left = <span class=\"number\">0</span>;</span><br><span class=\"line\">                    dp[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> two = [&amp;]() -&gt; <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        ans += <span class=\"built_in\">one</span>();</span><br><span class=\"line\">        <span class=\"built_in\">reverseLeftRight</span>();</span><br><span class=\"line\">        ans += <span class=\"built_in\">one</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> four = [&amp;]() -&gt; <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        ans += <span class=\"built_in\">two</span>();</span><br><span class=\"line\">        <span class=\"built_in\">reverseUpDown</span>();</span><br><span class=\"line\">        ans += <span class=\"built_in\">two</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    ans += <span class=\"built_in\">four</span>();</span><br><span class=\"line\">    <span class=\"built_in\">flip</span>();</span><br><span class=\"line\">    ans += <span class=\"built_in\">four</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> T;</span><br><span class=\"line\">    cin &gt;&gt; T;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; T; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> ans = <span class=\"built_in\">solve</span>();</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Case #&quot;</span> &lt;&lt; i + <span class=\"number\">1</span> &lt;&lt; <span class=\"string\">&quot;: &quot;</span> &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(8 * R * C)<br />\n空间复杂度: O(R*C).</p>\n<h2 id=\"rabbit-house\"><a class=\"markdownIt-Anchor\" href=\"#rabbit-house\"></a> Rabbit House</h2>\n<p>BFS. 相邻位置差最多为1，从最高的cells开始搜索。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> pii = pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> vector&lt;pii&gt; directions = &#123;</span><br><span class=\"line\">    &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;, &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>&#125;, &#123;<span class=\"number\">-1</span>, <span class=\"number\">0</span>&#125;, &#123;<span class=\"number\">0</span>, <span class=\"number\">-1</span>&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> R, C;</span><br><span class=\"line\">    cin &gt;&gt; R &gt;&gt; C;</span><br><span class=\"line\">    vector&lt;vector&lt;ll&gt;&gt; <span class=\"built_in\">matrix</span>(R, <span class=\"built_in\">vector</span>&lt;ll&gt; (C));</span><br><span class=\"line\">    unordered_map&lt;<span class=\"type\">int</span>, vector&lt;pii&gt;&gt; cells;</span><br><span class=\"line\">    ll x;</span><br><span class=\"line\">    ll maxHeight = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; R; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; C; ++j) &#123;</span><br><span class=\"line\">            cin &gt;&gt; matrix[i][j];</span><br><span class=\"line\">            cells[matrix[i][j]].<span class=\"built_in\">emplace_back</span>(i, j);</span><br><span class=\"line\">            maxHeight = <span class=\"built_in\">max</span>(maxHeight, matrix[i][j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    queue&lt;pii&gt; q;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">const</span> <span class=\"keyword\">auto</span>&amp; p : cells[maxHeight]) &#123;</span><br><span class=\"line\">        q.<span class=\"built_in\">push</span>(p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ll ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    ll height = maxHeight;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.<span class=\"built_in\">empty</span>() &amp;&amp; height &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> s = q.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> x = <span class=\"number\">0</span>; x &lt; s; ++x) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> [i, j] = q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">            q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (pii d : directions) &#123;</span><br><span class=\"line\">                <span class=\"type\">const</span> <span class=\"type\">int</span> ni = i + d.first;</span><br><span class=\"line\">                <span class=\"type\">const</span> <span class=\"type\">int</span> nj = j + d.second;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ni &gt;= <span class=\"number\">0</span> &amp;&amp; ni &lt; R &amp;&amp; nj &gt;= <span class=\"number\">0</span> &amp;&amp; nj &lt; C) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (matrix[ni][nj] &gt;= height) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    q.<span class=\"built_in\">emplace</span>(ni, nj);</span><br><span class=\"line\">                    ans += height - <span class=\"number\">1</span> - matrix[ni][nj];</span><br><span class=\"line\">                    matrix[ni][nj] = height;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">const</span> <span class=\"keyword\">auto</span>&amp; p : cells[height<span class=\"number\">-1</span>]) &#123;</span><br><span class=\"line\">            q.<span class=\"built_in\">push</span>(p);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        --height;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> T;</span><br><span class=\"line\">    cin &gt;&gt; T;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; T; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> ans = <span class=\"built_in\">solve</span>();</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Case #&quot;</span> &lt;&lt; i + <span class=\"number\">1</span> &lt;&lt; <span class=\"string\">&quot;: &quot;</span> &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(R * C),<br />\n空间复杂度: O(R * C).</p>\n<p>需要注意的2点是：</p>\n<ul>\n<li>BFS时，需要每次把高度相同的cells也加入队中。这些也是下次遍历的起点之一。</li>\n<li>另外最后的结果大于32位数，需要<code>long long</code>避免overflow的WA。<br />\n我也因此多了3次WA罚时。</li>\n</ul>\n<h2 id=\"checksum\"><a class=\"markdownIt-Anchor\" href=\"#checksum\"></a> Checksum</h2>\n<p>比赛到最后一题已经非常累了。LeetCode周赛1小时+KickStart3小时，如此高强度的脑力活动，对人的精力已经是十分大的消耗了。因此，最后一题时我脑子已经不如一开始的清醒了。思考了一段时间后就放弃了。事实上，暴力法拿个小数据的分数对我平时的水平来说还是做的到的。</p>\n<p>赛后补题, 解法参考官方的Analysis。</p>\n<h3 id=\"暴力法-test-set-1\"><a class=\"markdownIt-Anchor\" href=\"#暴力法-test-set-1\"></a> 暴力法 Test Set 1</h3>\n<p>枚举所有的花费集合，判断是否可以推断出全部的棋盘。<br />\n判断是否可以推断出全部元素可以使用BFS来进行，从行列唯一元素开始遍历，依次增加元素。其实DFS也行。</p>\n<p>时间复杂度: O(2<sup>(N</sup>2) * N ^ 2).</p>\n<h3 id=\"破环法-test-set-2\"><a class=\"markdownIt-Anchor\" href=\"#破环法-test-set-2\"></a> 破环法 Test Set 2</h3>\n<p>以行列号为节点，空缺元素为边，可以将原矩阵转换成一个二分图。行在一边，列在一边。<br />\n单独的节点表示 该行/列的所有元素已知，可以直接忽略。<br />\n节点度为1表示 该行/列只有一个未知元素，可以通过checksum推断，因此可以直接删掉。<br />\n剩下的图组成一个无向有环权重图。</p>\n<p>原问题转换成 以最小代价删去一定的边，使得原图无环。<br />\n可以采用贪心算法。从小到大遍历边，如果在环内，就删掉。判断是否在环内可以用暴力DFS解决。不通过这个边，看是否有另外一条路径从该边的一个节点到另一个节点。</p>\n<p>时间复杂度: 遍历所有剩下的边 * 判断环 = O(N ^ 2 * N ^ 2) = O(N^4).</p>\n<p>贪心算法的正确性证明参考 <a href=\"https://en.wikipedia.org/wiki/Kruskal%27s_algorithm\">最小生成树 Kruskal 算法</a>.</p>\n<h3 id=\"最大生成树-test-set-3\"><a class=\"markdownIt-Anchor\" href=\"#最大生成树-test-set-3\"></a> 最大生成树 Test Set 3</h3>\n<p>在解法2的基础上，事实上，我们可以通过最大生成树算法快速得到最后的状态。</p>\n<p>时间复杂度: Prim O(N^2), Kruskal O(N^2 * log N).</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">int</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> pii = pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;;</span><br><span class=\"line\"><span class=\"keyword\">using</span> tii = tuple&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UF</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; fa;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; sz;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    <span class=\"type\">int</span> comp_cnt;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">UF</span>(<span class=\"type\">int</span> _n): <span class=\"built_in\">n</span>(_n), <span class=\"built_in\">comp_cnt</span>(_n), <span class=\"built_in\">fa</span>(_n), <span class=\"built_in\">sz</span>(_n, <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">iota</span>(fa.<span class=\"built_in\">begin</span>(), fa.<span class=\"built_in\">end</span>(), <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">findset</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fa[x] == x ? x : fa[x] = <span class=\"built_in\">findset</span>(fa[x]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">unite</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">        x = <span class=\"built_in\">findset</span>(x);</span><br><span class=\"line\">        y = <span class=\"built_in\">findset</span>(y);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x != y) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sz[x] &lt; sz[y]) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">swap</span>(x, y);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            fa[y] = x;</span><br><span class=\"line\">            sz[x] += sz[y];</span><br><span class=\"line\">            --comp_cnt;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">connected</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">        x = <span class=\"built_in\">findset</span>(x);</span><br><span class=\"line\">        y = <span class=\"built_in\">findset</span>(y);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x == y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">solve</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> N;</span><br><span class=\"line\">    cin &gt;&gt; N;</span><br><span class=\"line\">    <span class=\"comment\">// construct the 2-partical graph</span></span><br><span class=\"line\">    vector&lt;vector&lt;pii&gt;&gt; <span class=\"built_in\">graph</span>(<span class=\"number\">2</span> * N);</span><br><span class=\"line\">    vector&lt;tii&gt; edges;</span><br><span class=\"line\">    ll x;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; N; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; N; ++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cin &gt;&gt; x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; N; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; N; ++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cin &gt;&gt; x;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                graph[i].<span class=\"built_in\">push_back</span>(&#123;j + N, x&#125;);</span><br><span class=\"line\">                graph[j + N].<span class=\"built_in\">push_back</span>(&#123;i, x&#125;);</span><br><span class=\"line\">                edges.<span class=\"built_in\">emplace_back</span>(x, i, j + N);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; N; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; N; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(edges.<span class=\"built_in\">begin</span>(), edges.<span class=\"built_in\">end</span>(), greater&lt;&gt;());</span><br><span class=\"line\">    <span class=\"function\">UF <span class=\"title\">uf</span><span class=\"params\">(<span class=\"number\">2</span>*N)</span></span>;</span><br><span class=\"line\">    ll cost = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">const</span> <span class=\"keyword\">auto</span>&amp; e : edges) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (uf.<span class=\"built_in\">connected</span>(<span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(e), <span class=\"built_in\">get</span>&lt;<span class=\"number\">2</span>&gt;(e))) &#123;</span><br><span class=\"line\">            cost += <span class=\"built_in\">get</span>&lt;<span class=\"number\">0</span>&gt;(e);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            uf.<span class=\"built_in\">unite</span>(<span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(e), <span class=\"built_in\">get</span>&lt;<span class=\"number\">2</span>&gt;(e));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> cost;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> T;</span><br><span class=\"line\">    cin &gt;&gt; T;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; T; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> ans = <span class=\"built_in\">solve</span>();</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Case #&quot;</span> &lt;&lt; i + <span class=\"number\">1</span> &lt;&lt; <span class=\"string\">&quot;: &quot;</span> &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我采用了Krusal, 因为写起来更好实现些。</p>\n<p>时间复杂度: O(N^2 * log N^2),<br />\n空间复杂度: O(N^2).</p>\n",
            "tags": [
                "Competitive Programming"
            ]
        },
        {
            "id": "https://youngforest.github.io/2020/05/18/kick-start-2020-round-C/",
            "url": "https://youngforest.github.io/2020/05/18/kick-start-2020-round-C/",
            "title": "kick start 2020 round C",
            "date_published": "2020-05-18T02:55:44.000Z",
            "content_html": "<table>\n<thead>\n<tr>\n<th>ID</th>\n<th>score</th>\n<th>rank</th>\n<th>Bike Tour</th>\n<th>Bus Routes</th>\n<th>Robot Path Coding</th>\n<th>Wandering Robot</th>\n<th>Time</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>YoungForest</td>\n<td>74</td>\n<td>524</td>\n<td>5 + 7</td>\n<td>10 + 13</td>\n<td>11 + 16</td>\n<td>14 + 0</td>\n<td>1:35:18</td>\n</tr>\n</tbody>\n</table>\n<p>上个月因为Round B结果还不错，收到了Google CN HR的Congraduation邮件。本月再接再厉，为了进入Google的梦想而努力。</p>\n<h2 id=\"a-countdown\"><a class=\"markdownIt-Anchor\" href=\"#a-countdown\"></a> A. Countdown</h2>\n<p>One pass. 寻找countdown的模式。由于开始数字一定为K，所以countdown的过程中如果失败了的话，可以直接从失败的位置继续寻找。</p>\n<p>时间复杂度: O(N),<br />\n空间复杂度: O(N).</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> T;</span><br><span class=\"line\">    cin &gt;&gt; T;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> iCase = <span class=\"number\">1</span>; iCase &lt;= T; ++iCase) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> N, K;</span><br><span class=\"line\">        cin &gt;&gt; N &gt;&gt; K;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">mountains</span><span class=\"params\">(N)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; N; ++i) &#123;</span><br><span class=\"line\">            cin &gt;&gt; mountains[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; N; ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mountains[i] == K) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> need = K - <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"type\">int</span> j = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (i + j &lt; N &amp;&amp; need &gt;= <span class=\"number\">1</span> &amp;&amp; mountains[i+j] == need) &#123;</span><br><span class=\"line\">                    ++j;</span><br><span class=\"line\">                    --need;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (need == <span class=\"number\">0</span>) ++ans;</span><br><span class=\"line\">                i = i + j;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                ++i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Case #&quot;</span> &lt;&lt; iCase &lt;&lt; <span class=\"string\">&quot;: &quot;</span> &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"b-stable-wall\"><a class=\"markdownIt-Anchor\" href=\"#b-stable-wall\"></a> B. Stable Wall</h2>\n<p>题目本身比较难懂。但实质就是一个拓扑排序的问题，下面的必须先放。<br />\n这里需要注意一个corner case：只有一行的情况。<br />\n因为我第一版的代码，更新<code>seen</code>是在判断上下层关系时更新的。如果只有一行的话，就会忽略第一行的字母。<br />\n把<code>seen</code>单独拿出来更新就可以了。</p>\n<p>时间复杂度: O(R * C * 26),<br />\n空间复杂度: O(R * C + 26).</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> T;</span><br><span class=\"line\">    cin &gt;&gt; T;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> iCase = <span class=\"number\">1</span>; iCase &lt;= T; ++iCase) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> R, C;</span><br><span class=\"line\">        cin &gt;&gt; R &gt;&gt; C;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;string&gt; <span class=\"title\">rows</span><span class=\"params\">(R)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; R; ++i) &#123;</span><br><span class=\"line\">            cin &gt;&gt; rows[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        string ans;</span><br><span class=\"line\">        <span class=\"comment\">// 拓扑排序</span></span><br><span class=\"line\">        unordered_map&lt;<span class=\"type\">char</span>, unordered_set&lt;<span class=\"type\">char</span>&gt;&gt; out;</span><br><span class=\"line\">        unordered_map&lt;<span class=\"type\">char</span>, unordered_set&lt;<span class=\"type\">char</span>&gt;&gt; in;</span><br><span class=\"line\">        unordered_set&lt;<span class=\"type\">char</span>&gt; seen;</span><br><span class=\"line\">        queue&lt;<span class=\"type\">char</span>&gt; zeroIn;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; R; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; C; ++j) &#123;</span><br><span class=\"line\">                seen.<span class=\"built_in\">insert</span>(rows[i][j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i + <span class=\"number\">1</span> &lt; R; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; C; ++j) &#123;</span><br><span class=\"line\">                <span class=\"type\">char</span> down = rows[i + <span class=\"number\">1</span>][j];</span><br><span class=\"line\">                <span class=\"type\">char</span> up = rows[i][j];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (down == up)</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                out[down].<span class=\"built_in\">insert</span>(up);</span><br><span class=\"line\">                in[up].<span class=\"built_in\">insert</span>(down);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">char</span> c : seen) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (in[c].<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">                zeroIn.<span class=\"built_in\">push</span>(c);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!zeroIn.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> base = zeroIn.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">            zeroIn.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            ans.<span class=\"built_in\">push_back</span>(base);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">char</span> up : out[base]) &#123;</span><br><span class=\"line\">                in[up].<span class=\"built_in\">erase</span>(base);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (in[up].<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">                    zeroIn.<span class=\"built_in\">push</span>(up);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Case #&quot;</span> &lt;&lt; iCase &lt;&lt; <span class=\"string\">&quot;: &quot;</span></span><br><span class=\"line\">             &lt;&lt; (ans.<span class=\"built_in\">size</span>() == seen.<span class=\"built_in\">size</span>() ? ans : <span class=\"string\">&quot;-1&quot;</span>) &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"c-perfect-subarray\"><a class=\"markdownIt-Anchor\" href=\"#c-perfect-subarray\"></a> C. Perfect Subarray</h2>\n<p>使用前缀和来快速求子数组和。然后用hashmap存储之前的前缀和。对于当前的前缀和遍历所有的平方数，寻找之前的前缀和。由于该题目会卡常数，所以需要用到一些竞赛用的技巧。<br />\n如：</p>\n<ul>\n<li>unordered_map可以用reserve直接扩充为最大可能的大小；</li>\n<li>用数组代替hashmap, 下标有负数时，整体偏移一个常数.</li>\n</ul>\n<p>时间复杂度: O(N * sqrt(MAXSUM)) = O(N * 3000),<br />\n空间复杂度: O(N + MAXSUM).</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> ll MAXSQRT = <span class=\"number\">3163</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> mxN = <span class=\"number\">1e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> seen[<span class=\"number\">2</span>*<span class=\"number\">110</span>*mxN];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> T;</span><br><span class=\"line\">    cin &gt;&gt; T;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> mid = <span class=\"number\">105</span> * mxN + <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> iCase = <span class=\"number\">1</span>; iCase &lt;= T; ++iCase) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> N;</span><br><span class=\"line\">        cin &gt;&gt; N;</span><br><span class=\"line\">        ll ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> presum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t    <span class=\"built_in\">memset</span>(seen, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> seen);</span><br><span class=\"line\">        seen[presum + mid] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; N; ++i) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> A;</span><br><span class=\"line\">            cin &gt;&gt; A;</span><br><span class=\"line\">            presum += A;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> squareI = <span class=\"number\">0</span>; squareI &lt;= MAXSQRT; ++squareI) &#123;</span><br><span class=\"line\">                ans += seen[mid + presum - squareI*squareI];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ++seen[mid + presum];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Case #&quot;</span> &lt;&lt; iCase &lt;&lt; <span class=\"string\">&quot;: &quot;</span> &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"d-candies\"><a class=\"markdownIt-Anchor\" href=\"#d-candies\"></a> D. Candies</h2>\n<p>题目operation有2种，分别为求区间和和更新某个值。十分适合用线段树解决。因为sweet score的定义不同于普通的求和，所以我们可以通过2个线段树的到sweet score. 分别维护 +1, -1, +1, … 和 +1, -2, +3, …。然后queryRange时，后者减去前者的某个倍数，再乘以+1/-1即可。</p>\n<p>在此，感谢<a href=\"https://www.youtube.com/watch?v=rYBtViWXYeI\">花花的线段树模版</a>，让我可以快速A掉此题。</p>\n<p>时间复杂度: O(N log N),<br />\n空间复杂度: O(N).</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SegmentTreeNode</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    unique_ptr&lt;SegmentTreeNode&gt; left = <span class=\"literal\">nullptr</span>, right = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    ll start = <span class=\"number\">0</span>, end = <span class=\"number\">0</span>;</span><br><span class=\"line\">    ll val = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">SegmentTreeNode</span>(ll value, ll start_, ll end_): <span class=\"built_in\">val</span>(value), <span class=\"built_in\">start</span>(start_), <span class=\"built_in\">end</span>(end_) &#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">SegmentTreeNode</span>(ll start_, ll end_): <span class=\"built_in\">start</span>(start_), <span class=\"built_in\">end</span>(end_) &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">static</span> unique_ptr&lt;SegmentTreeNode&gt; <span class=\"title\">buildTree</span><span class=\"params\">(<span class=\"type\">const</span> vector&lt;ll&gt;&amp; nums, ll i, ll j)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == j) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">make_unique</span>&lt;SegmentTreeNode&gt;(nums[i], i, j);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            ll mid = i + (j - i) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> ret = <span class=\"built_in\">make_unique</span>&lt;SegmentTreeNode&gt;(i, j);</span><br><span class=\"line\">            ret-&gt;left = <span class=\"built_in\">buildTree</span>(nums, i, mid);</span><br><span class=\"line\">            ret-&gt;right = <span class=\"built_in\">buildTree</span>(nums, mid + <span class=\"number\">1</span>, j);</span><br><span class=\"line\">            ret-&gt;val = ret-&gt;left-&gt;val + ret-&gt;right-&gt;val;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">ll <span class=\"title\">queryRange</span><span class=\"params\">(ll i, ll j)</span> <span class=\"type\">const</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == start &amp;&amp; j == end) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> val;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            ll mid = start + (end - start) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j &lt;= mid) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> left-&gt;<span class=\"built_in\">queryRange</span>(i, j);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i &gt; mid) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> right-&gt;<span class=\"built_in\">queryRange</span>(i, j);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> left-&gt;<span class=\"built_in\">queryRange</span>(i, mid) + right-&gt;<span class=\"built_in\">queryRange</span>(mid + <span class=\"number\">1</span>, j);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">update</span><span class=\"params\">(ll index, ll value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (start == index &amp;&amp; index == end) &#123;</span><br><span class=\"line\">            val = value;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            ll mid = start + (end - start) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mid &gt;= index) &#123;</span><br><span class=\"line\">                left-&gt;<span class=\"built_in\">update</span>(index, value);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                right-&gt;<span class=\"built_in\">update</span>(index, value);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            val = left-&gt;val + right-&gt;val;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ll T;</span><br><span class=\"line\">    cin &gt;&gt; T;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (ll iCase = <span class=\"number\">1</span>; iCase &lt;= T; ++iCase) &#123;</span><br><span class=\"line\">        ll N, Q;</span><br><span class=\"line\">        cin &gt;&gt; N &gt;&gt; Q;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;ll&gt; <span class=\"title\">nums</span><span class=\"params\">(N)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ll i = <span class=\"number\">0</span>; i &lt; N; ++i) &#123;</span><br><span class=\"line\">            cin &gt;&gt; nums[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ll i = <span class=\"number\">0</span>; i &lt; N; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i % <span class=\"number\">2</span> == <span class=\"number\">1</span>)</span><br><span class=\"line\">                nums[i] *= <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> positiveNegtive = SegmentTreeNode::<span class=\"built_in\">buildTree</span>(nums, <span class=\"number\">0</span>, nums.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ll i = <span class=\"number\">0</span>; i &lt; N; ++i) &#123;</span><br><span class=\"line\">            nums[i] *= (i<span class=\"number\">+1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> multiTree = SegmentTreeNode::<span class=\"built_in\">buildTree</span>(nums, <span class=\"number\">0</span>, nums.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>);</span><br><span class=\"line\">        ll ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ll q = <span class=\"number\">0</span>; q &lt; Q; ++q) &#123;</span><br><span class=\"line\">            string op;</span><br><span class=\"line\">            cin &gt;&gt; op;</span><br><span class=\"line\">            ll start, end;</span><br><span class=\"line\">            cin &gt;&gt; start &gt;&gt; end;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (op == <span class=\"string\">&quot;Q&quot;</span>) &#123;</span><br><span class=\"line\">                ans += ((start % <span class=\"number\">2</span> == <span class=\"number\">0</span>) ? <span class=\"number\">-1</span> : <span class=\"number\">1</span> ) * (multiTree-&gt;<span class=\"built_in\">queryRange</span>(start<span class=\"number\">-1</span>,end <span class=\"number\">-1</span>) - (start - <span class=\"number\">1</span>) * positiveNegtive-&gt;<span class=\"built_in\">queryRange</span>(start<span class=\"number\">-1</span>, end<span class=\"number\">-1</span>));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                ans += <span class=\"number\">0</span>;</span><br><span class=\"line\">                positiveNegtive-&gt;<span class=\"built_in\">update</span>(start<span class=\"number\">-1</span>, ((start % <span class=\"number\">2</span> == <span class=\"number\">0</span>) ? <span class=\"number\">-1</span> : <span class=\"number\">1</span>) * end);</span><br><span class=\"line\">                multiTree-&gt;<span class=\"built_in\">update</span>(start<span class=\"number\">-1</span>, ((start % <span class=\"number\">2</span> == <span class=\"number\">0</span>) ? <span class=\"number\">-1</span> : <span class=\"number\">1</span>) * start * end);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Case #&quot;</span> &lt;&lt; iCase &lt;&lt; <span class=\"string\">&quot;: &quot;</span> &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "Competitive Programming"
            ]
        },
        {
            "id": "https://youngforest.github.io/2020/04/19/kick-start-2020-round-B/",
            "url": "https://youngforest.github.io/2020/04/19/kick-start-2020-round-B/",
            "title": "kick start 2020 round B",
            "date_published": "2020-04-19T12:39:28.000Z",
            "content_html": "<table>\n<thead>\n<tr>\n<th>ID</th>\n<th>score</th>\n<th>rank</th>\n<th>Bike Tour</th>\n<th>Bus Routes</th>\n<th>Robot Path Coding</th>\n<th>Wandering Robot</th>\n<th>Time</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>YoungForest</td>\n<td>74</td>\n<td>524</td>\n<td>5 + 7</td>\n<td>10 + 13</td>\n<td>11 + 16</td>\n<td>14 + 0</td>\n<td>1:35:18</td>\n</tr>\n</tbody>\n</table>\n<p>去年一共参加了6轮kickstart，成功拿到Google今年的实习邀请。可惜的是，由于疫情的原因，谷歌中国的暑期实习项目全部取消了。今年为了秋招名额，仍需继续参加kickstart。今天的round B轮次虽然在早上7点，但仍然有很多同学参加。遗憾的是，最后一题的时间复杂度过高，大的Test set TLE了。</p>\n<h2 id=\"bike-tour\"><a class=\"markdownIt-Anchor\" href=\"#bike-tour\"></a> Bike Tour</h2>\n<p>签到题。遍历一遍mountains, 寻找比前后都高的位置即可。</p>\n<p>时间复杂度: O(N),<br />\n空间复杂度: O(N).</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> T;</span><br><span class=\"line\">    cin &gt;&gt; T;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> iCase = <span class=\"number\">1</span>; iCase &lt;= T; ++iCase) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> N;</span><br><span class=\"line\">        cin &gt;&gt; N;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">mountains</span><span class=\"params\">(N)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; N; ++i) &#123;</span><br><span class=\"line\">            cin &gt;&gt; mountains[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; N - <span class=\"number\">1</span>; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mountains[i] &gt; mountains[i - <span class=\"number\">1</span>] &amp;&amp;</span><br><span class=\"line\">                mountains[i] &gt; mountains[i + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                ++ans;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Case #&quot;</span> &lt;&lt; iCase &lt;&lt; <span class=\"string\">&quot;: &quot;</span> &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"bus-routes\"><a class=\"markdownIt-Anchor\" href=\"#bus-routes\"></a> Bus Routes</h2>\n<p>贪心。从后向前，选择每趟公交最晚的那班。</p>\n<p>时间复杂度：O(N), 我这里使用了尾递归的写法，和迭代一样，不需要额外的空间。<br />\n空间复杂度：O(N).</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;functional&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">vector&lt;ll&gt; <span class=\"title\">schedule</span><span class=\"params\">(<span class=\"number\">1005</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> T;</span><br><span class=\"line\">    cin &gt;&gt; T;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> iCase = <span class=\"number\">1</span>; iCase &lt;= T; ++iCase) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> N;</span><br><span class=\"line\">        ll D;</span><br><span class=\"line\">        cin &gt;&gt; N &gt;&gt; D;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; N; ++i) &#123;</span><br><span class=\"line\">            cin &gt;&gt; schedule[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        function&lt;ll(<span class=\"type\">int</span>, ll)&gt; f = [&amp;](<span class=\"type\">int</span> index, ll d) -&gt; ll &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (index == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">return</span> (d / schedule[index]) * schedule[index];</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"built_in\">f</span>(index - <span class=\"number\">1</span>, (d / schedule[index]) * schedule[index]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        </span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Case #&quot;</span> &lt;&lt; iCase &lt;&lt; <span class=\"string\">&quot;: &quot;</span> &lt;&lt; <span class=\"built_in\">f</span>(N<span class=\"number\">-1</span>, D) &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"robot-path-decoding\"><a class=\"markdownIt-Anchor\" href=\"#robot-path-decoding\"></a> Robot Path Decoding</h2>\n<p>类似编译器支持函数调用，我们可以用一个栈存储父程序的状态。</p>\n<p>时间复杂度：O(N),<br />\n空间复杂度: O(N).</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;functional&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> ll mod = <span class=\"number\">1e9</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> T;</span><br><span class=\"line\">    cin &gt;&gt; T;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> iCase = <span class=\"number\">1</span>; iCase &lt;= T; ++iCase) &#123;</span><br><span class=\"line\">        string instructions;</span><br><span class=\"line\">        cin &gt;&gt; instructions;</span><br><span class=\"line\">        pair&lt;ll, ll&gt; shift = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        stack&lt;ll&gt; st;</span><br><span class=\"line\">        stack&lt;pair&lt;ll, ll&gt;&gt; st_shift;</span><br><span class=\"line\">        <span class=\"type\">char</span> digit = <span class=\"string\">&#x27;1&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">char</span> c : instructions) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (c) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;(&#x27;</span>:</span><br><span class=\"line\">                st.<span class=\"built_in\">push</span>(digit - <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">                st_shift.<span class=\"built_in\">push</span>(shift);</span><br><span class=\"line\">                shift = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;)&#x27;</span>: &#123;</span><br><span class=\"line\">                ll X = st.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                <span class=\"keyword\">auto</span> before_shift = st_shift.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                st.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                st_shift.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                before_shift.first =</span><br><span class=\"line\">                    (before_shift.first + X * shift.first + <span class=\"number\">12</span> * mod) % mod;</span><br><span class=\"line\">                before_shift.second =</span><br><span class=\"line\">                    (before_shift.second + X * shift.second + <span class=\"number\">12</span> * mod) % mod;</span><br><span class=\"line\">                shift = before_shift;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;N&#x27;</span>:</span><br><span class=\"line\">                shift.second = (shift.second - <span class=\"number\">1</span> + mod) % mod;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;S&#x27;</span>:</span><br><span class=\"line\">                shift.second = (shift.second + <span class=\"number\">1</span>) % mod;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;E&#x27;</span>:</span><br><span class=\"line\">                shift.first = (shift.first + <span class=\"number\">1</span>) % mod;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;W&#x27;</span>:</span><br><span class=\"line\">                shift.first = (shift.first - <span class=\"number\">1</span> + mod) % mod;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            digit = c;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Case #&quot;</span> &lt;&lt; iCase &lt;&lt; <span class=\"string\">&quot;: &quot;</span> &lt;&lt; shift.first + <span class=\"number\">1</span> &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; shift.second + <span class=\"number\">1</span></span><br><span class=\"line\">             &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"wandering-robot\"><a class=\"markdownIt-Anchor\" href=\"#wandering-robot\"></a> Wandering Robot</h2>\n<p>本题比赛时我只做出了小的case，大的数据会TLE。<br />\n思路比较简单，用DP计算走到每个格子的概率。<br />\n<code>dp[i][j] = 0.5 * dp[i-1][j] + 0.5 * dp[i][j-1]</code>.<br />\n然后算走到hole上边和左边的概率和，*0.5就是掉到洞里的概率。为了避免处理下边界和右边界的特殊情况，当hole触底时，我们可以通过向左扩展hole，把一定落在hole中的概率提前拦截。当hole触右时，也是类似的处理。</p>\n<p>时间复杂度：(W * T),<br />\n空间复杂度：O(W).</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;functional&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> ll mod = <span class=\"number\">1e9</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> MAX_WIDTH = <span class=\"number\">1e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> T;</span><br><span class=\"line\">    cin &gt;&gt; T;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">double</span>&gt; <span class=\"title\">dp</span><span class=\"params\">(MAX_WIDTH)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> iCase = <span class=\"number\">1</span>; iCase &lt;= T; ++iCase) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> W, H, L, U, R, D;</span><br><span class=\"line\">        cin &gt;&gt; W &gt;&gt; H &gt;&gt; L &gt;&gt; U &gt;&gt; R &gt;&gt; D;</span><br><span class=\"line\">        --L;</span><br><span class=\"line\">        --U;</span><br><span class=\"line\">        <span class=\"type\">double</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (D == H &amp;&amp; R == W) &#123;</span><br><span class=\"line\">            ans = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (D == H) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 触底</span></span><br><span class=\"line\">                L = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (R == W) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 触右</span></span><br><span class=\"line\">                U = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (U == <span class=\"number\">0</span> &amp;&amp; L == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                ans = <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; D; ++i) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; MAX_WIDTH; ++j) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span> &amp;&amp; j &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                            dp[j] = <span class=\"number\">0.5</span> * dp[j] + <span class=\"number\">0.5</span> * dp[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (j &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                            dp[j] = <span class=\"number\">0.5</span> * dp[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                            dp[j] = <span class=\"number\">0.5</span> * dp[j];</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            dp[j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (L &gt; <span class=\"number\">0</span> &amp;&amp; i &gt;= U &amp;&amp; i &lt; D) &#123;</span><br><span class=\"line\">                        ans += <span class=\"number\">0.5</span> * dp[L - <span class=\"number\">1</span>];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (U &gt; <span class=\"number\">0</span> &amp;&amp; i == U - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = L; j &lt; R; ++j) &#123;</span><br><span class=\"line\">                            ans += <span class=\"number\">0.5</span> * dp[j];</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Case #&quot;</span> &lt;&lt; iCase &lt;&lt; <span class=\"string\">&quot;: &quot;</span> &lt;&lt; (<span class=\"number\">1</span> - ans) &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一个重要的观察是，可以通过组合数的方式求解prop(i, j): 从零点走到(i, j)的概率，0-index.<br />\nprop(i, j) = 0.5 ^ (the length path to (i, j)) * 可能路径的数量<br />\n= 0.5 ^ (i + j) * Combination(i + j, j)</p>\n<p>为了快速计算组合数，我们可以预计算log(x!), 然后利用公式:</p>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msup><mn>2</mn><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">!</mo><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">!</mo><mo>×</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mi>k</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">!</mo><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><msup><mn>2</mn><mi>n</mi></msup><mo stretchy=\"false\">)</mo></mrow></msup><mo>=</mo><msup><mn>2</mn><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo stretchy=\"false\">!</mo><mo>−</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>k</mi><mo stretchy=\"false\">!</mo><mo>−</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mi>k</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">!</mo><mo>−</mo><mi>n</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">2^{log_2(n! / (k! \\times (n-k)!) / 2^n)} = 2^{log_2 n! - log_2 k! - log_2 (n-k)! - n} \n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.938em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal mtight\">o</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mclose mtight\">!</span><span class=\"mord mtight\">/</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose mtight\">!</span><span class=\"mbin mtight\">×</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose mtight\">)</span><span class=\"mclose mtight\">!</span><span class=\"mclose mtight\">)</span><span class=\"mord mtight\">/</span><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7385428571428572em;\"><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.938em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal mtight\">o</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal mtight\">n</span><span class=\"mclose mtight\">!</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal mtight\">o</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose mtight\">!</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal mtight\">o</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose mtight\">)</span><span class=\"mclose mtight\">!</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>时间复杂度: O(W + H),<br />\n空间复杂度: O(W).</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;functional&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> ll mod = <span class=\"number\">1e9</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> MAX_WIDTH = <span class=\"number\">1e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">double</span> logfactor[<span class=\"number\">2</span> * MAX_WIDTH];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">CombinationDivide2N</span><span class=\"params\">(ll n, ll m)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">powl</span>(<span class=\"number\">2</span>, logfactor[n] - logfactor[m] - logfactor[n-m] - n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> T;</span><br><span class=\"line\">    cin &gt;&gt; T;</span><br><span class=\"line\">    <span class=\"comment\">// preprocess log(x!)</span></span><br><span class=\"line\">    logfactor[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">2</span> * MAX_WIDTH; ++i) &#123;</span><br><span class=\"line\">        logfactor[i] = logfactor[i<span class=\"number\">-1</span>] + <span class=\"built_in\">log2l</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> dp = [&amp;](<span class=\"type\">int</span> i, <span class=\"type\">int</span> j) -&gt; <span class=\"type\">double</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">CombinationDivide2N</span>(i + j, j);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> iCase = <span class=\"number\">1</span>; iCase &lt;= T; ++iCase) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> W, H, L, U, R, D;</span><br><span class=\"line\">        cin &gt;&gt; W &gt;&gt; H &gt;&gt; L &gt;&gt; U &gt;&gt; R &gt;&gt; D;</span><br><span class=\"line\">        --L;</span><br><span class=\"line\">        --U;</span><br><span class=\"line\">        <span class=\"type\">double</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (W &gt; MAX_WIDTH || H &gt; MAX_WIDTH) &#123;</span><br><span class=\"line\">            ans = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (D == H &amp;&amp; R == W) &#123;</span><br><span class=\"line\">            ans = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (D == H) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 触底</span></span><br><span class=\"line\">                L = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (R == W) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 触右</span></span><br><span class=\"line\">                U = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (U == <span class=\"number\">0</span> &amp;&amp; L == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                ans = <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (U &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = L; i &lt; R; ++i) &#123;</span><br><span class=\"line\">                        ans += <span class=\"number\">0.5</span> * <span class=\"built_in\">dp</span>(i, U - <span class=\"number\">1</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (L &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = U; i &lt; D; ++i) &#123;</span><br><span class=\"line\">                        ans += <span class=\"number\">0.5</span> * <span class=\"built_in\">dp</span>(L - <span class=\"number\">1</span>, i);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Case #&quot;</span> &lt;&lt; iCase &lt;&lt; <span class=\"string\">&quot;: &quot;</span> &lt;&lt; (<span class=\"number\">1</span> - ans) &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "Competitive Programming"
            ]
        },
        {
            "id": "https://youngforest.github.io/2020/03/22/kick-start-2020-round-A/",
            "url": "https://youngforest.github.io/2020/03/22/kick-start-2020-round-A/",
            "title": "kick start 2020 round A",
            "date_published": "2020-03-22T06:43:50.000Z",
            "content_html": "<p>新一年的kick start有了些许变化：</p>\n<ol>\n<li>所有测试结果正确与否立即返回。之前是大的数据集的测试结果赛后才能看到。相当于是降低了难度，减少了参赛者失误的代价。之前发生一点失误的话，大数据集的分数就没了。现在相当于是增加了一次罚时。</li>\n<li>题目从3到变成了4道，时间不变，增加了一道送分题。</li>\n</ol>\n<p>Rank 570. 因为大家都是100分，所以最后比拼的都是时间。因为比赛是12:00~15:00, 所以我中间花了半个小时去吃饭。另外每个题目都不是一遍做对，都通过<code>printf</code>进行调试，花了不少时间。最快的大佬们都是20min就做完了。</p>\n<p>下个月约起来round B呀！4月19号早上7点。</p>\n<p><a href=\"https://codingcompetitions.withgoogle.com/kickstart/round/000000000019ffc7\">round A 题目地址</a></p>\n<h2 id=\"allocation\"><a class=\"markdownIt-Anchor\" href=\"#allocation\"></a> Allocation</h2>\n<p>刚开始以为是一道简单的背包问题，后来发现是更简单的贪心问题。因为是要求购买房子数目的最大值，而不是价值的最大值，或者说 房子的价值都为1. 所以贪心即可。简而言之，送分的签到题。<br />\n把房子按照售价从小到大排序，先买便宜的房子。</p>\n<p>时间复杂度: O(N log N),<br />\n空间复杂度: O(N).</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">A</span><span class=\"params\">(<span class=\"number\">100005</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> T;</span><br><span class=\"line\">    cin &gt;&gt; T;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> iCase = <span class=\"number\">1</span>; iCase &lt;= T; ++iCase) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> N, B;</span><br><span class=\"line\">        cin &gt;&gt; N &gt;&gt; B;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; N; ++i) &#123;</span><br><span class=\"line\">            cin &gt;&gt; A[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(A.<span class=\"built_in\">begin</span>(), A.<span class=\"built_in\">begin</span>() + N);</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (index &lt; N &amp;&amp; B &gt;= A[index]) &#123;</span><br><span class=\"line\">            B -= A[index];</span><br><span class=\"line\">            ++ans;</span><br><span class=\"line\">            ++index;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Case #&quot;</span> &lt;&lt; iCase &lt;&lt; <span class=\"string\">&quot;: &quot;</span> &lt;&lt; ans &lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为贪心的时候忘记检查<code>index &lt; n</code>了，导致一次WA罚时。</p>\n<h2 id=\"plates\"><a class=\"markdownIt-Anchor\" href=\"#plates\"></a> Plates</h2>\n<p>动态规划。<br />\n状态转移方程：<br />\n第i个stack，取走j个盘子，得到的最大Beaty value和。<br />\n<code>dp[i][j] = max&#123;dp[i-1][x] + top_sum[j - x] for x in [0, j]&#125;</code>。</p>\n<p>时间复杂度: O(N * P * P) 50 * 1500 * 1500,<br />\n空间复杂度: O(N * P) 50 * 1500 -&gt; O(P) 1500.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">dp</span><span class=\"params\">(<span class=\"number\">1505</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">line</span><span class=\"params\">(<span class=\"number\">35</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> T;</span><br><span class=\"line\">    cin &gt;&gt; T;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> iCase = <span class=\"number\">1</span>; iCase &lt;= T; ++iCase) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> N, K, P;</span><br><span class=\"line\">        cin &gt;&gt; N &gt;&gt; K &gt;&gt; P;</span><br><span class=\"line\">        <span class=\"built_in\">fill</span>(dp.<span class=\"built_in\">begin</span>(), dp.<span class=\"built_in\">end</span>(), <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; N; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; K; ++j) &#123;</span><br><span class=\"line\">                cin &gt;&gt; line[j];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (j &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                    line[j] += line[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = P; j &gt; <span class=\"number\">0</span>; --j) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> max_dp = dp[j];</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> x = j - <span class=\"number\">1</span>; x &gt;= <span class=\"number\">0</span> &amp;&amp; j - x - <span class=\"number\">1</span> &lt; K; --x) &#123;</span><br><span class=\"line\">                    max_dp = <span class=\"built_in\">max</span>(max_dp, dp[x] + line[j - x - <span class=\"number\">1</span>]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                dp[j] = max_dp;</span><br><span class=\"line\">                <span class=\"comment\">// cout &lt;&lt; dp[j] &lt;&lt; &quot;, &quot;;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// cout &lt;&lt; endl;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Case #&quot;</span> &lt;&lt; iCase &lt;&lt; <span class=\"string\">&quot;: &quot;</span> &lt;&lt; dp[P] &lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"workout\"><a class=\"markdownIt-Anchor\" href=\"#workout\"></a> Workout</h2>\n<p>对于<code>K == 1</code>的情况，可以直接采用贪心的策略，将最大的间隔等分。</p>\n<p>对于<code>K &gt; 1</code>的情况，可以采取将<code>最优化问题转成判定问题</code>的思路解决。<br />\n最优化问题为：求最小的difficulty。<br />\n判定问题为：<code>difficulty == x</code>可否实现, 时间复杂度为<code>O(N * K)</code>。<br />\n然后判定问题的解的分布为: <code>... F F F T T T ...</code>，我们要找到第一个<code>T</code>。<br />\n采用二分法，搜索区间为<code>[1, max(M_i) = 1^9]</code>, 时间复杂度为<code>O(log 1e9)</code>。<br />\n故，总的有：<br />\n时间复杂度: O(N * K * log 1e9),<br />\n空间复杂度: O(N).</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">M</span><span class=\"params\">(<span class=\"number\">1e5</span> + <span class=\"number\">5</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> T;</span><br><span class=\"line\">    cin &gt;&gt; T;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> iCase = <span class=\"number\">1</span>; iCase &lt;= T; ++iCase) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> N, K;</span><br><span class=\"line\">        cin &gt;&gt; N &gt;&gt; K;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; N; ++i) &#123;</span><br><span class=\"line\">            cin &gt;&gt; M[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> determine = [&amp;](<span class=\"type\">int</span> x) -&gt; <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> used = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; N - <span class=\"number\">1</span>; ++i) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> difference = M[i + <span class=\"number\">1</span>] - M[i];</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (difference &gt; x) &#123;</span><br><span class=\"line\">                    ++used;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (used &gt; K)</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                    difference -= x;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"type\">int</span> lo = <span class=\"number\">1</span>, hi = <span class=\"number\">1e9</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (lo &lt; hi) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> mid = lo + (hi - lo) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> deter = <span class=\"built_in\">determine</span>(mid);</span><br><span class=\"line\">            <span class=\"comment\">// cout &lt;&lt; mid &lt;&lt; &quot;: &quot; &lt;&lt; deter &lt;&lt; endl;</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (deter) &#123;</span><br><span class=\"line\">                hi = mid;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                lo = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Case #&quot;</span> &lt;&lt; iCase &lt;&lt; <span class=\"string\">&quot;: &quot;</span> &lt;&lt; lo &lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"bundling\"><a class=\"markdownIt-Anchor\" href=\"#bundling\"></a> Bundling</h2>\n<p>Tire + DFS + Greedy的思路。</p>\n<p>因为需要用到共同前缀，所以我们可以用Tire预处理字符串。<br />\n用DFS搜索Trie，尝试尽量深地凑成一个group，这样得到的score更大。</p>\n<p>时间复杂度: O(characters.size()), 2 * 10 ^ 6.<br />\n空间复杂度: O(characters.size()).</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;functional&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cassert&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Trie</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> passby = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> destination = <span class=\"number\">0</span>;</span><br><span class=\"line\">    array&lt;shared_ptr&lt;Trie&gt;, <span class=\"number\">26</span>&gt; data;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build_tire</span><span class=\"params\">(shared_ptr&lt;Trie&gt; root, <span class=\"type\">const</span> string &amp;s, <span class=\"type\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    ++root-&gt;passby;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index == s.<span class=\"built_in\">size</span>()) &#123;</span><br><span class=\"line\">        ++root-&gt;destination;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root-&gt;data[s[index] - <span class=\"string\">&#x27;A&#x27;</span>] == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">        root-&gt;data[s[index] - <span class=\"string\">&#x27;A&#x27;</span>] = <span class=\"built_in\">make_shared</span>&lt;Trie&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">build_tire</span>(root-&gt;data[s[index] - <span class=\"string\">&#x27;A&#x27;</span>], s, index + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> T;</span><br><span class=\"line\">    cin &gt;&gt; T;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> iCase = <span class=\"number\">1</span>; iCase &lt;= T; ++iCase) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> N, K;</span><br><span class=\"line\">        cin &gt;&gt; N &gt;&gt; K;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> root = <span class=\"built_in\">make_shared</span>&lt;Trie&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; N; ++i) &#123;</span><br><span class=\"line\">            string s;</span><br><span class=\"line\">            cin &gt;&gt; s;</span><br><span class=\"line\">            <span class=\"built_in\">build_tire</span>(root, s, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">// return left number</span></span><br><span class=\"line\">        function&lt;<span class=\"type\">int</span>(shared_ptr&lt;Trie&gt;, <span class=\"type\">int</span>)&gt; dfs = [&amp;](shared_ptr&lt;Trie&gt; r,</span><br><span class=\"line\">                                                       <span class=\"type\">int</span> depth) -&gt; <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (r == <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> now = r-&gt;destination;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">26</span>; ++i) &#123;</span><br><span class=\"line\">                now += <span class=\"built_in\">dfs</span>(r-&gt;data[i], depth + <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"comment\">// cout &lt;&lt;  depth &lt;&lt; &quot;: &quot; &lt;&lt; char(&#x27;A&#x27; + i) &lt;&lt; &quot;: &quot; &lt;&lt; now &lt;&lt; endl;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ans += depth * (now / K);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> now % K;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"type\">int</span> r = <span class=\"built_in\">dfs</span>(root, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"comment\">// cout &lt;&lt; &quot;r: &quot; &lt;&lt; r &lt;&lt; endl;</span></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Case #&quot;</span> &lt;&lt; iCase &lt;&lt; <span class=\"string\">&quot;: &quot;</span> &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "Competitive Programming"
            ]
        },
        {
            "id": "https://youngforest.github.io/2019/11/25/kick-start-2019-round-H/",
            "url": "https://youngforest.github.io/2019/11/25/kick-start-2019-round-H/",
            "title": "kick start 2019 round H",
            "date_published": "2019-11-25T14:11:22.000Z",
            "content_html": "<p>由于欧洲这边夏令时的原因，处于UTC +1.00，所以本次比赛我是特意早上6点起来打的。打完后休息了一个小时，又和小伙伴去根特玩了一天。晚上回来的时候，才想起来Machine Learning的assignment 2当天截止，又疯狂地赶起了Deadline。事实证明，没有认真学习还是搞不定作业的。马马虎虎交上去了，总比不交好些。空白的题目，大方地告诉助教我就是不会。</p>\n<p>本次比赛是Kick start 2019的最后一个轮次，我还是很想参加的。今年我共参加了6轮kick start。虽然A轮就拿到了面试的邀请，但仍然不可马虎。各次的排名如下所示:</p>\n<table>\n<thead>\n<tr>\n<th>轮次</th>\n<th>A</th>\n<th>D</th>\n<th>E</th>\n<th>F</th>\n<th>G</th>\n<th>H</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Rank</td>\n<td>600</td>\n<td>765</td>\n<td>1566</td>\n<td>1341</td>\n<td>462</td>\n<td>330</td>\n</tr>\n<tr>\n<td>Score</td>\n<td>35</td>\n<td>27</td>\n<td>22</td>\n<td>11</td>\n<td>42</td>\n<td>41</td>\n</tr>\n</tbody>\n</table>\n<p>除了F轮，我当时在巴黎玩，趁晚上在青旅的功夫瞎做的外。其他轮次还是可以说是全力以赴的。<br />\n总的名次是先下降后上升，并不能体现实力的变化，更多的是心态的改变。因为D轮次比较重要，当时也有同学一起竞争，不忍心与他比赛时交流。E轮次时，当时是在字节跳动的夏令营，和一个妹子一起做的。本身还是很想打好的，但由于并查集没有实现find的折叠，导致 超时。这也是之前没有注意到的盲点。其他3次结果相对好的轮次反而是没有包袱，更放松的时候。</p>\n<p>最近还意外地收获了Google北京 A day with Google的邀请。无奈我不再北京，只能拒绝了。另外，我还通过邮件向Google反映了Google所有招聘相关的Form中My University中都没有 Beihang University的选项（我猜测这可能是因为北航在美国商务部的黑名单上的原因）。Google很快解决了，我航以后再也不是野鸡大学了。</p>\n<p>本次做出签到题和第3题的小测试集1，算是正常发挥吧。</p>\n<h2 id=\"a-h-index\"><a class=\"markdownIt-Anchor\" href=\"#a-h-index\"></a> A. H-index</h2>\n<p>第一次做误解了题意，以为是求最后的H-index就可以了。简单地写了个二分查找用判定问题求最大值的解法。<br />\n后来才发现是需要求每次论文的结果，之后又因编写了几个bug的问题影响了耗时。</p>\n<p>Intuition：<br />\n随着论文的发表，H-index是单调递增的。利用这一特性，每次发表论文后，尝试去增加H-index.<br />\n这里我利用里C++ STL set中有序的特点和基于节点的container再插入新节点后iterator的不变性，高效地实现了尝试增加H-index的操作。</p>\n<p>时间复杂度: O(N log N),<br />\n空间复杂度: O(N).</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> MAX_N = <span class=\"number\">1e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"type\">const</span> vector&lt;<span class=\"type\">int</span>&gt; &amp;A, <span class=\"type\">int</span> N)</span> </span>&#123;</span><br><span class=\"line\">    multiset&lt;<span class=\"type\">int</span>, std::greater&lt;<span class=\"type\">int</span>&gt;&gt; s;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> it = s.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; N; ++i) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> come = A[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (come &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            s.<span class=\"built_in\">insert</span>(come);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s.<span class=\"built_in\">size</span>() == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                it = s.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (come &gt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    ans = <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (come &gt; *it) &#123;</span><br><span class=\"line\">                --it;</span><br><span class=\"line\">                <span class=\"comment\">// cout &lt;&lt; &quot; --it &quot; &lt;&lt; *it &lt;&lt; &quot; &quot;;</span></span><br><span class=\"line\">                <span class=\"comment\">// if (next(it) != s.end()) &#123;</span></span><br><span class=\"line\">                <span class=\"comment\">//     cout &lt;&lt; &quot; next(it): &quot; &lt;&lt; *(next(it)) &lt;&lt; &quot; &quot;;</span></span><br><span class=\"line\">                <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (it != s.<span class=\"built_in\">end</span>() &amp;&amp; <span class=\"built_in\">next</span>(it) != s.<span class=\"built_in\">end</span>() &amp;&amp; *<span class=\"built_in\">next</span>(it) &gt;= ans + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                ++ans;</span><br><span class=\"line\">                ++it;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; ans &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> T;</span><br><span class=\"line\">    cin &gt;&gt; T;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">A</span><span class=\"params\">(MAX_N)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> iCase = <span class=\"number\">0</span>; iCase &lt; T; ++iCase) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> N;</span><br><span class=\"line\">        cin &gt;&gt; N;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; N; ++i) &#123;</span><br><span class=\"line\">            cin &gt;&gt; A[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Case #&quot;</span> &lt;&lt; iCase + <span class=\"number\">1</span> &lt;&lt; <span class=\"string\">&quot;: &quot;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">solve</span>(A, N);</span><br><span class=\"line\">        cout &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"b-diagonal-puzzle\"><a class=\"markdownIt-Anchor\" href=\"#b-diagonal-puzzle\"></a> B. Diagonal Puzzle</h2>\n<p>比赛时试图通过回溯枚举所有的翻转找到最小解，时间复杂度O(2 ^ (4 * N))。没想到连最小的数据集都超时了。所以，题解都是通过赛后从官方的Analysis中看来得。</p>\n<h3 id=\"小测试集\"><a class=\"markdownIt-Anchor\" href=\"#小测试集\"></a> 小测试集</h3>\n<p>没必要枚举所有的翻转。我们可以只枚举同一个方向的翻转，然后检查是否另一个方向每条线上都同色。<br />\n与主对角线平行的翻转有<code>2 * N - 1</code>个，与主对角线垂直的也有<code>2 * N - 1</code>个。<br />\n检查同色的复杂度为<code>O(N ^ 2)</code>.<br />\n所以总的时间复杂度为<code>O(2 ^ (2 * N - 1) * N ^ 2)</code>.</p>\n<h3 id=\"大测试集\"><a class=\"markdownIt-Anchor\" href=\"#大测试集\"></a> 大测试集</h3>\n<p>本解法基于一个有趣的观察，如果我们确定主对角线和反主对角线的翻转，为了确定最后全为白色，其余翻转可以因此确定。当N为奇数时，是主对角线和次反主对角线。<code>N == 6， 7</code>时的情况如下所示。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\..../ \\......</span><br><span class=\"line\">.\\../. .\\..../</span><br><span class=\"line\">..\\/.. ..\\../.</span><br><span class=\"line\">../\\.. ...\\/..</span><br><span class=\"line\">./..\\. .../\\..</span><br><span class=\"line\">/....\\ ../..\\.</span><br><span class=\"line\">       ./....\\</span><br></pre></td></tr></table></figure>\n<p>所以，我们可以枚举主对角线的翻转 情况 ，共4种，然后根据对角线上 的 其他元素的颜色，确定其他翻转 。最后检查是否符合全是白的要求。<br />\n时间复杂度: <code>O(4 * N ^ 2)</code>.</p>\n<p>此解法其实和我之前经常做的翻灯的题目很像，翻转一个灯，同时会翻转其周围的4个灯。最后求全部灭掉灯的步数。<br />\n只需要枚举第一行的翻转，为了改变当前行的灯的状态，我们只能翻转下一行的灯，其余行会因此确定。<br />\n题目在LeetCode上可以找到：<a href=\"https://leetcode.com/problems/minimum-number-of-flips-to-convert-binary-matrix-to-zero-matrix/description/\">LeetCode 1284. Minimum Number of Flips to Convert Binary Matrix to Zero Matrix</a>.<br />\n我的解法是从<a href=\"https://www.acwing.com/problem/content/97/\">acwing</a>获得的，还可以 看大雪菜的视频学习。</p>\n<h4 id=\"另一种解法\"><a class=\"markdownIt-Anchor\" href=\"#另一种解法\"></a> 另一种解法</h4>\n<p>将此问题转换成<a href=\"https://en.wikipedia.org/wiki/Graph_coloring#Vertex_coloring\">2-coloring</a>的一种变形。每个格子都由2条线共享。如果格子是白的，2条线之一需要被翻转。如果格子是黑的，不需要翻转，或 都翻转。<br />\n我们考虑每条对角线是图中的节点，格子是边。<br />\n如果格子是黑的，对应的边连接的2个节点必须是相同颜色的。反之，必须是不同颜色的。<br />\n可以通过DFS解决2-coloring的图问题。<br />\n枚举root的颜色，DFS确定邻居的颜色，如果邻居的颜色已确定，则检查即可。更少的颜色就代表着翻的个数。</p>\n<p>边数 为 <code>O(N^2)</code>, DFS的解法复杂度为<code>O(|Edges|)</code>。<br />\n总的时间复杂度为<code>O(N ^ 2)</code>.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unordered_map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unordered_set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Line</span> &#123;</span><br><span class=\"line\">    ll difference;</span><br><span class=\"line\">    <span class=\"type\">bool</span> positive;</span><br><span class=\"line\">    vector&lt;weak_ptr&lt;Line&gt;&gt; same_color_neighbors, different_color_neighbors;</span><br><span class=\"line\">    <span class=\"built_in\">Line</span>(ll d, <span class=\"type\">bool</span> p) : <span class=\"built_in\">difference</span>(d), <span class=\"built_in\">positive</span>(p) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">dfs</span><span class=\"params\">(shared_ptr&lt;Line&gt; root, set&lt;shared_ptr&lt;Line&gt;&gt; &amp;white,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">         set&lt;shared_ptr&lt;Line&gt;&gt; &amp;black)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    ;</span><br><span class=\"line\">    <span class=\"type\">bool</span> w = white.<span class=\"built_in\">find</span>(root) != white.<span class=\"built_in\">end</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> node : root-&gt;different_color_neighbors) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">auto</span> node_shared_ptr = node.<span class=\"built_in\">lock</span>()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (white.<span class=\"built_in\">find</span>(node_shared_ptr) == white.<span class=\"built_in\">end</span>() &amp;&amp;</span><br><span class=\"line\">                black.<span class=\"built_in\">find</span>(node_shared_ptr) == black.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">auto</span> &amp;color = w ? black : white;</span><br><span class=\"line\">                color.<span class=\"built_in\">insert</span>(node_shared_ptr);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!<span class=\"built_in\">dfs</span>(node_shared_ptr, white, black))</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (white.<span class=\"built_in\">find</span>(node_shared_ptr) != white.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (w) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!w) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> node : root-&gt;same_color_neighbors) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">auto</span> node_shared_ptr = node.<span class=\"built_in\">lock</span>()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (white.<span class=\"built_in\">find</span>(node_shared_ptr) == white.<span class=\"built_in\">end</span>() &amp;&amp;</span><br><span class=\"line\">                black.<span class=\"built_in\">find</span>(node_shared_ptr) == black.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">auto</span> &amp;color = w ? white : black;</span><br><span class=\"line\">                color.<span class=\"built_in\">insert</span>(node_shared_ptr);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!<span class=\"built_in\">dfs</span>(node_shared_ptr, white, black))</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (white.<span class=\"built_in\">find</span>(node_shared_ptr) != white.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!w)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (w)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">solve</span><span class=\"params\">(vector&lt;vector&lt;<span class=\"type\">bool</span>&gt;&gt; &amp;puzzle)</span> </span>&#123;</span><br><span class=\"line\">    unordered_map&lt;<span class=\"type\">int</span>, shared_ptr&lt;Line&gt;&gt; positive, negative;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> n = puzzle.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> j_sub_i = j - i;</span><br><span class=\"line\">            <span class=\"type\">int</span> j_add_i = j + i;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (positive[j_sub_i] == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">                positive[j_sub_i] = <span class=\"built_in\">make_shared</span>&lt;Line&gt;(j_sub_i, <span class=\"literal\">true</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (negative[j_add_i] == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">                negative[j_add_i] = <span class=\"built_in\">make_shared</span>&lt;Line&gt;(j_add_i, <span class=\"literal\">false</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (puzzle[i][j]) &#123; <span class=\"comment\">// black</span></span><br><span class=\"line\">                positive[j_sub_i]-&gt;same_color_neighbors.<span class=\"built_in\">push_back</span>(</span><br><span class=\"line\">                    negative[j_add_i]);</span><br><span class=\"line\">                negative[j_add_i]-&gt;same_color_neighbors.<span class=\"built_in\">push_back</span>(</span><br><span class=\"line\">                    positive[j_sub_i]);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                positive[j_sub_i]-&gt;different_color_neighbors.<span class=\"built_in\">push_back</span>(</span><br><span class=\"line\">                    negative[j_add_i]);</span><br><span class=\"line\">                negative[j_add_i]-&gt;different_color_neighbors.<span class=\"built_in\">push_back</span>(</span><br><span class=\"line\">                    positive[j_sub_i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    set&lt;shared_ptr&lt;Line&gt;&gt; seen;</span><br><span class=\"line\">    ll ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;direction : &#123;positive, negative&#125;) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> p : direction) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> node = p.second;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (seen.<span class=\"built_in\">find</span>(node) == seen.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">                set&lt;shared_ptr&lt;Line&gt;&gt; white, black;</span><br><span class=\"line\">                white.<span class=\"built_in\">insert</span>(node);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!<span class=\"built_in\">dfs</span>(node, white, black)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                ans += <span class=\"built_in\">min</span>(white.<span class=\"built_in\">size</span>(), black.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">                seen.<span class=\"built_in\">insert</span>(white.<span class=\"built_in\">begin</span>(), white.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">                seen.<span class=\"built_in\">insert</span>(black.<span class=\"built_in\">begin</span>(), black.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> <span class=\"type\">const</span> *argv[])</span> </span>&#123;</span><br><span class=\"line\">    ll T;</span><br><span class=\"line\">    cin &gt;&gt; T;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> iCase = <span class=\"number\">1</span>; iCase &lt;= T; ++iCase) &#123;</span><br><span class=\"line\">        ll n;</span><br><span class=\"line\">        cin &gt;&gt; n;</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">bool</span>&gt;&gt; <span class=\"built_in\">pullze</span>(n, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">bool</span>&gt;(n));</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            string row;</span><br><span class=\"line\">            cin &gt;&gt; row;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (row[j] == <span class=\"string\">&#x27;#&#x27;</span>)</span><br><span class=\"line\">                    pullze[i][j] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    pullze[i][j] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ll ans = <span class=\"built_in\">solve</span>(pullze);</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Case #&quot;</span> &lt;&lt; iCase &lt;&lt; <span class=\"string\">&quot;: &quot;</span> &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实现过程中，需要注意的点有：</p>\n<ul>\n<li>如何存储和构造Graph。</li>\n<li>DFS解法时，需要遍历所有的节点。因为整个图是可以分为多个联通子图的。只从一个root开始dfs得到的染色不完整。</li>\n</ul>\n<h2 id=\"c-elevanagram\"><a class=\"markdownIt-Anchor\" href=\"#c-elevanagram\"></a> C. Elevanagram</h2>\n<p>小测试集时，<code>0 &lt;= A_i &lt;= 20</code>，可以使用回溯法，尝试所有的正负号分配方式。</p>\n<p>时间复杂度：O(A_i ^ 9), 算上剪枝，复杂度会更低些。<br />\n空间复杂度：O(9).</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;numeric&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\">ll plus_max;</span><br><span class=\"line\">ll s;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">backtracking</span><span class=\"params\">(<span class=\"type\">const</span> vector&lt;ll&gt; &amp;A, ll index, ll plus, ll accu)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (plus &gt; plus_max) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (plus == plus_max) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> ((accu - (s - accu)) % <span class=\"number\">11</span>) == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (index == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        ll need_plus = plus_max - plus;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (need_plus &gt; A[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            accu += need_plus;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ((accu - (s - accu)) % <span class=\"number\">11</span>) == <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        ll num = index + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ll i = <span class=\"built_in\">min</span>(A[index], plus_max - plus); i &gt;= <span class=\"number\">0</span>; --i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">backtracking</span>(A, index - <span class=\"number\">1</span>, plus + i, accu + num * i)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"type\">const</span> vector&lt;ll&gt; &amp;A)</span> </span>&#123;</span><br><span class=\"line\">    s = std::<span class=\"built_in\">accumulate</span>(A.<span class=\"built_in\">begin</span>(), A.<span class=\"built_in\">end</span>(), <span class=\"number\">0</span>);</span><br><span class=\"line\">    plus_max = s / <span class=\"number\">2</span> + s % <span class=\"number\">2</span>;</span><br><span class=\"line\">    s = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; ++i) &#123;</span><br><span class=\"line\">        s += A[i] * (i + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">backtracking</span>(A, <span class=\"number\">8</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;YES&quot;</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;NO&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> T;</span><br><span class=\"line\">    cin &gt;&gt; T;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;ll&gt; <span class=\"title\">A</span><span class=\"params\">(<span class=\"number\">9</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> iCase = <span class=\"number\">0</span>; iCase &lt; T; ++iCase) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; ++i) &#123;</span><br><span class=\"line\">            cin &gt;&gt; A[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Case #&quot;</span> &lt;&lt; iCase + <span class=\"number\">1</span> &lt;&lt; <span class=\"string\">&quot;: &quot;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">solve</span>(A);</span><br><span class=\"line\">        cout &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Competitive Programming"
            ]
        },
        {
            "id": "https://youngforest.github.io/2019/10/20/kick-start-2019-round-G/",
            "url": "https://youngforest.github.io/2019/10/20/kick-start-2019-round-G/",
            "title": "kick start 2019 round G",
            "date_published": "2019-10-20T10:53:36.000Z",
            "content_html": "<p>本轮是今年的倒数第二轮，也是相对比较简单的一个轮次。<br />\n我做出了第3题和1 2题的小数据集。第二题我本身的算法是对的，但是没有正确的评估最大的k的位数，并防止溢出操作，所以字大数据集上WA。第一题其实本身不难，只是我对约数不很敏感，导致错失没有想出更好的解法。总的来说，本轮是我最接近AC的轮次，运气相对不错，也提前1个小时完成了比赛。因为后来实在想不出解法 和 要注意的点了，就放弃了。</p>\n<h2 id=\"book-reading\"><a class=\"markdownIt-Anchor\" href=\"#book-reading\"></a> Book Reading</h2>\n<p>暴力法加memo可以直接过。可以我的记忆化写错了，忘记记忆了。导致TLE，损失了不少分数，太可惜 了。<br />\n另外，能用<code>long long</code>就不要用<code>int</code>。否则最后的<code>ans</code>会溢出。</p>\n<p>时间复杂度: O(N log (N)).</p>\n<p>因为记忆化 的存在，计算的页数最多是<code>1 + 1 / 2 + 1 / 3 + ... + 1 / N = log N</code>, 即调和级数。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unordered_map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ll T;</span><br><span class=\"line\">    cin &gt;&gt; T;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (ll iCase = <span class=\"number\">1</span>; iCase &lt;= T; ++iCase) &#123;</span><br><span class=\"line\">        ll ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        ll N, M, Q;</span><br><span class=\"line\">        cin &gt;&gt; N &gt;&gt; M &gt;&gt; Q;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">bool</span>&gt; <span class=\"title\">pages</span><span class=\"params\">(N + <span class=\"number\">1</span>, <span class=\"literal\">true</span>)</span></span>;</span><br><span class=\"line\">        pages[<span class=\"number\">0</span>] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ll i = <span class=\"number\">0</span>; i &lt; M; ++i) &#123;</span><br><span class=\"line\">            ll P;</span><br><span class=\"line\">            cin &gt;&gt; P;</span><br><span class=\"line\">            pages[P] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        unordered_map&lt;ll, ll&gt; memo;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ll i = <span class=\"number\">0</span>; i &lt; Q; ++i) &#123;</span><br><span class=\"line\">            ll R;</span><br><span class=\"line\">            cin &gt;&gt; R;</span><br><span class=\"line\">            ll count = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (memo.<span class=\"built_in\">find</span>(R) != memo.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">                count = memo[R];</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (ll j = <span class=\"number\">1</span>; j * R &lt;= N; ++j) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (pages[j * R]) &#123;</span><br><span class=\"line\">                        ++count;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                memo[R] = count;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ans += count;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Case #&quot;</span> &lt;&lt; iCase &lt;&lt; <span class=\"string\">&quot;: &quot;</span> &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"the-equation\"><a class=\"markdownIt-Anchor\" href=\"#the-equation\"></a> The Equation</h2>\n<p>本题要注意的点相对比较多，本身算法并不难。</p>\n<ol>\n<li>long long  常数是<code>1L</code>。否则<code>1</code>默认 是<code>int</code>，会有溢出风险。</li>\n<li>我们不能从A中的最高位开始找，因为可能k会是更大的数。而应该从 M的角度考虑k的最大值，这里M是15位的，对应二进制50位。然而，我们同样不能从太高的位开始找，否则 <code>N*( 1&lt;&lt;i )</code>会溢出64位。鉴于N最大是1000，二进制10位。我们可以从50~53位开始找。</li>\n</ol>\n<p>因为要最大化k，所以我们可以使用贪心的思路，从高位向低位数，尽量放置1，否则放置0，超过要求回溯。</p>\n<p>因为有大量的回溯剪枝的存在，时间复杂度不是很好分析。但可以过大的数据集。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">backtracking</span><span class=\"params\">(<span class=\"type\">const</span> vector&lt;ll&gt; &amp;bits, <span class=\"type\">const</span> ll N, <span class=\"type\">const</span> ll M, ll position,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                ll accu, ll k)</span> </span>&#123;</span><br><span class=\"line\">    ll one = bits[position];</span><br><span class=\"line\">    ll zero = N - one;</span><br><span class=\"line\">    <span class=\"comment\">// k always wants to be 1 in position i</span></span><br><span class=\"line\">    ll i = position;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (position &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> k;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ll ret = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (accu + zero * (<span class=\"number\">1L</span> &lt;&lt; i) &lt;= M) &#123; <span class=\"comment\">// if one</span></span><br><span class=\"line\">        ret = <span class=\"built_in\">backtracking</span>(bits, N, M, position - <span class=\"number\">1</span>,</span><br><span class=\"line\">                           accu + zero * (<span class=\"number\">1L</span> &lt;&lt; i),</span><br><span class=\"line\">                           k + (<span class=\"number\">1L</span> &lt;&lt; i));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret == <span class=\"number\">-1</span>) &#123; <span class=\"comment\">// zero</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (accu + one * (<span class=\"number\">1L</span> &lt;&lt; i) &lt;= M) &#123;</span><br><span class=\"line\">            ret = <span class=\"built_in\">backtracking</span>(bits, N, M, position - <span class=\"number\">1</span>,</span><br><span class=\"line\">                               accu + one * (<span class=\"number\">1L</span> &lt;&lt; i), k);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ll T;</span><br><span class=\"line\">    cin &gt;&gt; T;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (ll iCase = <span class=\"number\">1</span>; iCase &lt;= T; ++iCase) &#123;</span><br><span class=\"line\">        ll ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        ll N, M;</span><br><span class=\"line\">        cin &gt;&gt; N &gt;&gt; M;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;ll&gt; <span class=\"title\">bits</span><span class=\"params\">(<span class=\"number\">64</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">        ll max_position = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ll i = <span class=\"number\">0</span>; i &lt; N; ++i) &#123;</span><br><span class=\"line\">            ll A;</span><br><span class=\"line\">            cin &gt;&gt; A;</span><br><span class=\"line\">            ll position = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (A &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                ll last_bit = A % <span class=\"number\">2</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (last_bit &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    ++bits[position];</span><br><span class=\"line\">                    max_position = <span class=\"built_in\">max</span>(max_position, position);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                A = A / <span class=\"number\">2</span>;</span><br><span class=\"line\">                ++position;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ans = <span class=\"built_in\">backtracking</span>(bits, N, M, <span class=\"number\">53</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Case #&quot;</span> &lt;&lt; iCase &lt;&lt; <span class=\"string\">&quot;: &quot;</span> &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"shifts\"><a class=\"markdownIt-Anchor\" href=\"#shifts\"></a> Shifts</h2>\n<p>同第二题，我采用了回溯法加大量剪枝和记忆化，以枚举所有的组合。没想到竟然过了。</p>\n<p>题解给出的方法是采用 分治法，分别枚举2个小的集合的组合。然后再遍历所有组合，寻找合并后符合要求的组合数。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">backtracking</span><span class=\"params\">(<span class=\"type\">const</span> vector&lt;ll&gt; &amp;A, <span class=\"type\">const</span> vector&lt;ll&gt; &amp;B,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                <span class=\"type\">const</span> vector&lt;ll&gt; &amp;suffixA, <span class=\"type\">const</span> vector&lt;ll&gt; &amp;suffixB, ll needA,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                ll needB, ll position, map&lt;tuple&lt;ll, ll, ll&gt;, ll&gt; &amp;memo,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                map&lt;tuple&lt;ll, ll&gt;, ll&gt; &amp;memoA, map&lt;tuple&lt;ll, ll&gt;, ll&gt; &amp;memoB)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> ll n = A.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (position &gt;= n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> needA &lt;= <span class=\"number\">0</span> &amp;&amp; needB &lt;= <span class=\"number\">0</span> ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> it = memo.<span class=\"built_in\">find</span>(&#123;needA, needB, position&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (it != memo.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> it-&gt;second;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (needA &lt;= <span class=\"number\">0</span> &amp;&amp; needB &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> memo[&#123;needA, needB, position&#125;] = <span class=\"built_in\">pow</span>(<span class=\"number\">3</span>, n - position);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (needA &gt; suffixA[position] || needB &gt; suffixB[position]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> memo[&#123;needA, needB, position&#125;] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (needA &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> it = memoA.<span class=\"built_in\">find</span>(&#123;needB, position&#125;);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (it != memoA.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> it-&gt;second;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (needA &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> it = memoA.<span class=\"built_in\">find</span>(&#123;needB, position&#125;);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (it != memoA.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> it-&gt;second;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (needB &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> it = memoB.<span class=\"built_in\">find</span>(&#123;needA, position&#125;);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (it != memoB.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> it-&gt;second;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ll ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">    ret += <span class=\"built_in\">backtracking</span>(A, B, suffixA, suffixB, needA - A[position],</span><br><span class=\"line\">                        needB - B[position], position + <span class=\"number\">1</span>, memo, memoA, memoB);</span><br><span class=\"line\">    ret += <span class=\"built_in\">backtracking</span>(A, B, suffixA, suffixB, needA, needB - B[position],</span><br><span class=\"line\">                        position + <span class=\"number\">1</span>, memo, memoA, memoB);</span><br><span class=\"line\">    ret += <span class=\"built_in\">backtracking</span>(A, B, suffixA, suffixB, needA - A[position], needB,</span><br><span class=\"line\">                        position + <span class=\"number\">1</span>, memo, memoA, memoB);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (needA &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        memoA[&#123;needB, position&#125;] = ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (needB &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        memoB[&#123;needA, position&#125;] = ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> memo[&#123;needA, needB, position&#125;] = ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ll T;</span><br><span class=\"line\">    cin &gt;&gt; T;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (ll iCase = <span class=\"number\">1</span>; iCase &lt;= T; ++iCase) &#123;</span><br><span class=\"line\">        ll N, H;</span><br><span class=\"line\">        cin &gt;&gt; N &gt;&gt; H;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;ll&gt; <span class=\"title\">A</span><span class=\"params\">(N)</span>, <span class=\"title\">B</span><span class=\"params\">(N)</span>, <span class=\"title\">suffixA</span><span class=\"params\">(N)</span>, <span class=\"title\">suffixB</span><span class=\"params\">(N)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; N; ++i) &#123;</span><br><span class=\"line\">            cin &gt;&gt; A[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; N; ++i) &#123;</span><br><span class=\"line\">            cin &gt;&gt; B[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (N &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            suffixA[N - <span class=\"number\">1</span>] = A[N - <span class=\"number\">1</span>];</span><br><span class=\"line\">            suffixB[N - <span class=\"number\">1</span>] = B[N - <span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = N - <span class=\"number\">2</span>; i &gt;= <span class=\"number\">0</span>; --i) &#123;</span><br><span class=\"line\">            suffixA[i] = A[i] + suffixA[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">            suffixB[i] = B[i] + suffixB[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        map&lt;tuple&lt;ll, ll, ll&gt;, ll&gt; memo;</span><br><span class=\"line\">        map&lt;tuple&lt;ll, ll&gt;, ll&gt; memoA;</span><br><span class=\"line\">        map&lt;tuple&lt;ll, ll&gt;, ll&gt; memoB;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> ans =</span><br><span class=\"line\">            <span class=\"built_in\">backtracking</span>(A, B, suffixA, suffixB, H, H, <span class=\"number\">0</span>, memo, memoA, memoB);</span><br><span class=\"line\"></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Case #&quot;</span> &lt;&lt; iCase &lt;&lt; <span class=\"string\">&quot;: &quot;</span> &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "Competitive Programming"
            ]
        },
        {
            "id": "https://youngforest.github.io/2019/08/29/kick-start-2019-round-E/",
            "url": "https://youngforest.github.io/2019/08/29/kick-start-2019-round-E/",
            "title": "kick start 2019 round E",
            "date_published": "2019-08-29T11:12:03.000Z",
            "content_html": "<h2 id=\"cherries-mesh\"><a class=\"markdownIt-Anchor\" href=\"#cherries-mesh\"></a> Cherries Mesh</h2>\n<p>Minimum spanning tree.<br />\n尤其要注意Union-find的实现中，find要采用path compression的方法才能实现O(1).<br />\n否则会超时。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">UF</span> &#123;</span><br><span class=\"line\">\tvector&lt;<span class=\"type\">int</span>&gt; parents;</span><br><span class=\"line\">\t<span class=\"built_in\">UF</span>(<span class=\"type\">int</span> n) &#123;</span><br><span class=\"line\">\t\tparents.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">\t\t\tparents[i] = i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> parents[x] == x ? x : (parents[x] = <span class=\"built_in\">find</span>(parents[x]));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">unio</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> px = <span class=\"built_in\">find</span>(x);</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> py = <span class=\"built_in\">find</span>(y);</span><br><span class=\"line\">\t\tparents[px] = py;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> T;</span><br><span class=\"line\">\tcin &gt;&gt; T;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; T; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> N, M;</span><br><span class=\"line\">\t\tcin &gt;&gt; N &gt;&gt; M;</span><br><span class=\"line\">\t\t<span class=\"function\">UF <span class=\"title\">uf</span><span class=\"params\">(N)</span></span>;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; M; ++j) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> l, r;</span><br><span class=\"line\">\t\t\tcin &gt;&gt; l &gt;&gt; r;</span><br><span class=\"line\">\t\t\t--l;</span><br><span class=\"line\">\t\t\t--r;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (uf.<span class=\"built_in\">find</span>(l) == uf.<span class=\"built_in\">find</span>(r)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tuf.<span class=\"built_in\">unio</span>(l, r);</span><br><span class=\"line\">\t\t\tans += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tans += (N - <span class=\"number\">1</span> - ans) * <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Case #&quot;</span> &lt;&lt; i + <span class=\"number\">1</span> &lt;&lt; <span class=\"string\">&quot;: &quot;</span> &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"code-eat-switcher\"><a class=\"markdownIt-Anchor\" href=\"#code-eat-switcher\"></a> Code-Eat Switcher</h2>\n<h3 id=\"test-set-1\"><a class=\"markdownIt-Anchor\" href=\"#test-set-1\"></a> Test set 1:</h3>\n<p>S = 1 或 2。列不等式就可以求解。<br />\n当S = 2时，有2个变量，不等式求解过程类似线性规划。</p>\n<p>比赛的时候思路是对的，但是因为S = 1时，返回值写错了，一直没有AC。当时一直在调S = 2时的逻辑，完全没有想到S = 1时会出错。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unordered_map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"type\">const</span> vector&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt;&amp; energy, <span class=\"type\">const</span> <span class=\"type\">int</span> S, <span class=\"type\">double</span> code, <span class=\"type\">double</span> eat)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (S == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"type\">double</span> Ci = energy[<span class=\"number\">0</span>].first;</span><br><span class=\"line\">        <span class=\"type\">double</span> Ei = energy[<span class=\"number\">0</span>].second;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> code / Ci + eat / Ei &lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (S == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"type\">double</span> C1 = energy[<span class=\"number\">0</span>].first, C2 = energy[<span class=\"number\">1</span>].first;</span><br><span class=\"line\">        <span class=\"type\">double</span> E1 = energy[<span class=\"number\">0</span>].second, E2 = energy[<span class=\"number\">1</span>].second;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (C1 / C2 == E1 / E2) &#123;</span><br><span class=\"line\">            vector&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; tmp = &#123;<span class=\"built_in\">make_pair</span>(energy[<span class=\"number\">0</span>].first + energy[<span class=\"number\">1</span>].first, energy[<span class=\"number\">0</span>].second + energy[<span class=\"number\">1</span>].second)&#125;;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">solve</span>(tmp, <span class=\"number\">1</span>, code, eat);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">double</span> C = code, E = eat;</span><br><span class=\"line\">        <span class=\"type\">double</span> x = (C / C2 - <span class=\"number\">1</span> + E / E2 - E1 / E2) / (C1 / C2 - E1 / E2);</span><br><span class=\"line\">        <span class=\"type\">double</span> y = C / C2 - x * C1 / C2;</span><br><span class=\"line\">        <span class=\"comment\">// cout &lt;&lt; &quot;result: &quot; &lt;&lt; x &lt;&lt; &quot;, &quot; &lt;&lt; y &lt;&lt; &quot;|&quot; &lt;&lt; x * C1 + y * C2 &lt;&lt; &quot;, &quot; &lt;&lt; (1 - x) * E1 + (1 - y) * E2 &lt;&lt; &quot; | &quot; &lt;&lt; </span></span><br><span class=\"line\">        <span class=\"comment\">// 1 - E / E2 + E1 / E2 - x * E1 / E2</span></span><br><span class=\"line\">        <span class=\"comment\">// &lt;&lt; endl;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span> - E / E2 + E1 / E2 - <span class=\"number\">1</span> * E1 / E2 &gt;= C / C2 - <span class=\"number\">1</span> * C1 / C2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (y &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"number\">1</span> - E / E2 + E1 / E2 - <span class=\"number\">1</span>) * (E2 / E1) &gt;= (C / C2 - <span class=\"number\">1</span>) * (C2 / C1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span> - E / E2 + E1 / E2 &gt;= C / C2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (y &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"number\">1</span> - E / E2 + E1 / E2) * (E2 / E1) &gt;= (C / C2) * (C2 / C1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"comment\">// return x &gt;= 0 &amp;&amp; y &gt;= 0 &amp;&amp; x &lt;= 1 &amp;&amp; y &lt;= 1;</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> T;</span><br><span class=\"line\">\tcin &gt;&gt; T;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; T; ++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> D, S;</span><br><span class=\"line\">        cin &gt;&gt; D &gt;&gt; S;</span><br><span class=\"line\">        string ans;</span><br><span class=\"line\">        vector&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">energy</span>(S);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; S; ++i) &#123;</span><br><span class=\"line\">            cin &gt;&gt; energy[i].first &gt;&gt; energy[i].second;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; D; ++i) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> A, B;</span><br><span class=\"line\">            cin &gt;&gt; A &gt;&gt; B;</span><br><span class=\"line\">            <span class=\"type\">bool</span> yes = <span class=\"built_in\">solve</span>(energy, S, A, B);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (yes) &#123;</span><br><span class=\"line\">                ans.<span class=\"built_in\">push_back</span>(<span class=\"string\">&#x27;Y&#x27;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                ans.<span class=\"built_in\">push_back</span>(<span class=\"string\">&#x27;N&#x27;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Case #&quot;</span> &lt;&lt; i + <span class=\"number\">1</span> &lt;&lt; <span class=\"string\">&quot;: &quot;</span> &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"test-set-2\"><a class=\"markdownIt-Anchor\" href=\"#test-set-2\"></a> Test Set 2</h3>\n<p>观察有，对于每个slot，每获得1份eating能量，就会少收获<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>C</mi><mi>i</mi></msub><mi mathvariant=\"normal\">/</mi><msub><mi>E</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">C_i / E_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>份coding能量。所以如果<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>C</mi><mi>i</mi></msub><mi mathvariant=\"normal\">/</mi><msub><mi>E</mi><mi>i</mi></msub><mo>&lt;</mo><msub><mi>C</mi><mi>j</mi></msub><mi mathvariant=\"normal\">/</mi><msub><mi>E</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">C_i / E_i &lt; C_j / E_j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span>的话，更好的选择永远时i。<br />\n根据这个观察，我们把slot根据<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>C</mi><mi>i</mi></msub><mi mathvariant=\"normal\">/</mi><msub><mi>E</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">C_i / E_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>排序，计算E的前缀和和C的后缀和。每天使用二分查找找到满足eating的分界点，再判断是否满足coding。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unordered_map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"type\">const</span> vector&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; &amp;energy, <span class=\"type\">const</span> <span class=\"type\">int</span> S,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">           <span class=\"type\">const</span> vector&lt;<span class=\"type\">int</span>&gt; &amp;prefix, <span class=\"type\">const</span> vector&lt;<span class=\"type\">int</span>&gt; &amp;suffix, <span class=\"type\">int</span> code,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">           <span class=\"type\">int</span> eat)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> it = <span class=\"built_in\">lower_bound</span>(prefix.<span class=\"built_in\">begin</span>(), prefix.<span class=\"built_in\">end</span>(), eat);</span><br><span class=\"line\">    <span class=\"type\">int</span> index = <span class=\"built_in\">distance</span>(prefix.<span class=\"built_in\">begin</span>(), it);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index == S) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">double</span> need;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        need = eat;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        need = eat - prefix[index - <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">double</span> f = need / energy[index].second;</span><br><span class=\"line\">    <span class=\"type\">double</span> code_have;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index == S - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        code_have = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        code_have = suffix[index + <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">double</span> code_need = code - code_have;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"number\">1</span> - f) * energy[index].first &gt;= code_need;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> T;</span><br><span class=\"line\">    cin &gt;&gt; T;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; T; ++i) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> D, S;</span><br><span class=\"line\">        cin &gt;&gt; D &gt;&gt; S;</span><br><span class=\"line\">        string ans;</span><br><span class=\"line\">        vector&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">energy</span>(S);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; S; ++i) &#123;</span><br><span class=\"line\">            cin &gt;&gt; energy[i].first &gt;&gt; energy[i].second;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(energy.<span class=\"built_in\">begin</span>(), energy.<span class=\"built_in\">end</span>(),</span><br><span class=\"line\">             [](<span class=\"type\">const</span> <span class=\"keyword\">auto</span> &amp;lhs, <span class=\"type\">const</span> <span class=\"keyword\">auto</span> &amp;rhs) -&gt; <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">                 <span class=\"keyword\">return</span> lhs.first / <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">double</span>&gt;(lhs.second) &lt;</span><br><span class=\"line\">                        rhs.first / <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">double</span>&gt;(rhs.second);</span><br><span class=\"line\">             &#125;);</span><br><span class=\"line\">        <span class=\"comment\">// build prefix cumulative for eating</span></span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">prefix</span><span class=\"params\">(S)</span></span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> current = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; S; ++i) &#123;</span><br><span class=\"line\">            current += energy[i].second;</span><br><span class=\"line\">            prefix[i] = current;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// build suffix cumulative for coding</span></span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">suffix</span><span class=\"params\">(S)</span></span>;</span><br><span class=\"line\">        current = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = S - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; --i) &#123;</span><br><span class=\"line\">            current += energy[i].first;</span><br><span class=\"line\">            suffix[i] = current;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// binary search for each day</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; D; ++i) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> A, B;</span><br><span class=\"line\">            cin &gt;&gt; A &gt;&gt; B;</span><br><span class=\"line\">            <span class=\"type\">bool</span> yes = <span class=\"built_in\">solve</span>(energy, S, prefix, suffix, A, B);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (yes) &#123;</span><br><span class=\"line\">                ans.<span class=\"built_in\">push_back</span>(<span class=\"string\">&#x27;Y&#x27;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                ans.<span class=\"built_in\">push_back</span>(<span class=\"string\">&#x27;N&#x27;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Case #&quot;</span> &lt;&lt; i + <span class=\"number\">1</span> &lt;&lt; <span class=\"string\">&quot;: &quot;</span> &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"street-checkers\"><a class=\"markdownIt-Anchor\" href=\"#street-checkers\"></a> Street Checkers</h2>\n<p>一个数X是否是interesting的，可以转化为 |(# of odd divisors) - (# of even divisors)| &lt;= 2.<br />\n对于R &lt; 10<sup>6的数据集，我们可以把所有小于10</sup>6的数，进行预处理获得其约束的个数，时间复杂度为O(sqrt(X))，然后建立[1, X]中interesting数目的prefix sum。对于query [L, R]，我们就可以O(1)获得答案了。总的时间复杂度为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msub><mi>R</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><msqrt><msub><mi>R</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub></msqrt><mo>+</mo><mi>T</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(R_{max} \\sqrt{R_{max}} + T)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1016650000000001em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mord mathnormal mtight\">a</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.851665em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mord mathnormal mtight\">a</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-2.811665em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.18833500000000003em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span></span></span></span>, 预处理 + T个测试用例.</p>\n<p>对于大的数据集，我们还需要继续观察。<br />\n任何奇数的约数仍然是奇数。每个整数X都能写成<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>=</mo><mi>A</mi><mo>×</mo><msup><mn>2</mn><mi>p</mi></msup></mrow><annotation encoding=\"application/x-tex\">X = A \\times 2 ^ p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span></span></span>, 其中 A是一个奇数，X是非负整数。<br />\n因此，我们可以把X的所有约数分为组, 其中<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>d</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">d_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>,<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>d</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">d_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>,…,<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>d</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">d_k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>是A的约数。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><msub><mi>d</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>d</mi><mn>1</mn></msub><mo>∗</mo><mn>2</mn><mo separator=\"true\">,</mo><msub><mi>d</mi><mn>1</mn></msub><mo>∗</mo><msup><mn>2</mn><mn>2</mn></msup><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>d</mi><mn>1</mn></msub><mo>∗</mo><msup><mn>2</mn><mi>p</mi></msup><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{d_1, d_1 * 2, d_1 * 2^2, \\dots, d_1 * 2^p\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span><br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><msub><mi>d</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><msub><mi>d</mi><mn>2</mn></msub><mo>∗</mo><mn>2</mn><mo separator=\"true\">,</mo><msub><mi>d</mi><mn>2</mn></msub><mo>∗</mo><msup><mn>2</mn><mn>2</mn></msup><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>d</mi><mn>2</mn></msub><mo>∗</mo><msup><mn>2</mn><mi>p</mi></msup><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{d_2, d_2 * 2, d_2 * 2^2, \\dots, d_2 * 2^p\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span><br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>…</mo></mrow><annotation encoding=\"application/x-tex\">\\dots</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.12em;vertical-align:0em;\"></span><span class=\"minner\">…</span></span></span></span><br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><msub><mi>d</mi><mi>k</mi></msub><mo separator=\"true\">,</mo><msub><mi>d</mi><mi>k</mi></msub><mo>∗</mo><mn>2</mn><mo separator=\"true\">,</mo><msub><mi>d</mi><mi>k</mi></msub><mo>∗</mo><msup><mn>2</mn><mn>2</mn></msup><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>d</mi><mi>k</mi></msub><mo>∗</mo><msup><mn>2</mn><mi>p</mi></msup><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{d_k, d_k * 2, d_k * 2^2, \\dots, d_k * 2^p\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span></p>\n<p>可以发现，奇约数的个数为k, (k &gt;= 1, 至少有个奇约数为1)。<br />\n偶约数为k * X.<br />\n奇偶之差为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>k</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">|k(X-1)| \\le 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>.<br />\n解为：</p>\n<ul>\n<li>\n<p>Case 1: X = 0, k = 1 or 2</p>\n</li>\n<li>\n<p>Case 2: X = 1, k can be any value</p>\n</li>\n<li>\n<p>Case 3: X = 2, k = 1 or 2</p>\n</li>\n<li>\n<p>Case 4: X = 3, k = 1</p>\n</li>\n<li>\n<p>Case 1 表示 1 或 一个奇质数。</p>\n</li>\n<li>\n<p>Case 2 表示，A可以为任意奇数，则原数的形式为 $ 2*(2n + 1) = 4 * n + 2$, 可以通过O(1)算出。</p>\n</li>\n<li>\n<p>Case 3 表示, A 为 1 或 任意奇质数。也就是[L / 4, R / 4]中的奇质数个数。</p>\n</li>\n<li>\n<p>Case 4 只表示一个数 8.<br />\n求质数的个数可以使用<a href=\"https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\">Sieve of Eratosthenes</a>.</p>\n</li>\n</ul>\n<p>时间复杂度: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>T</mi><mo>∗</mo><mo stretchy=\"false\">(</mo><mi>R</mi><mo>−</mo><mi>L</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>∗</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy=\"false\">(</mo><msqrt><mi>R</mi></msqrt><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(T * (R - L + 1) * log(\\sqrt{R}))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.176665em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9266650000000001em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span><span style=\"top:-2.886665em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.11333499999999996em;\"><span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>",
            "tags": [
                "Competitive Programming"
            ]
        },
        {
            "id": "https://youngforest.github.io/2019/07/28/kick-start-2019-round-D/",
            "url": "https://youngforest.github.io/2019/07/28/kick-start-2019-round-D/",
            "title": "kick start 2019 round D",
            "date_published": "2019-07-28T08:19:32.000Z",
            "content_html": "<p>排名: 765 / 1866.</p>\n<h2 id=\"x-or-what\"><a class=\"markdownIt-Anchor\" href=\"#x-or-what\"></a> X or What</h2>\n<p>本题是找规律的题目，考察最xor的熟悉程度。事实上，我曾经很接近于正确解法了。但一头心思钻到 interval 题目用线段树求解的经验上，试图寻找节点记录什么信息。结果越走越偏。</p>\n<p>总结起来规律是这样的:<br />\n题目中给了xor-even的定义。<br />\n我们根据xor的性质有：</p>\n<ul>\n<li>odd xor odd -&gt; even</li>\n<li>odd xor even -&gt; odd</li>\n<li>even xor even -&gt; even</li>\n</ul>\n<p>想要最后xor-even，interval中的odd必须是偶数个。一个非常直接的思路就出来了。统计odd的数量，如果是偶数，那么最长的interval就是整个数组的长度。如果是奇数，则去掉头或尾，找最长的。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n, q;</span><br><span class=\"line\"><span class=\"type\">int</span> a[N], v[N];</span><br><span class=\"line\"><span class=\"type\">int</span> p[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">even</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    count += i % <span class=\"number\">2</span>;</span><br><span class=\"line\">    i /= <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read_input</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>, &amp;n, &amp;q);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;x);</span><br><span class=\"line\">    a[i] = <span class=\"built_in\">even</span>(x) &amp; <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; q; ++i) &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> x;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>, p+i, &amp;x);</span><br><span class=\"line\">    v[i] = <span class=\"built_in\">even</span>(x) &amp; <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  set&lt;<span class=\"type\">int</span>&gt; idx[<span class=\"number\">2</span>];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">    idx[a[i]].<span class=\"built_in\">insert</span>(i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; q; ++i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a[p[i]] != v[i]) &#123;</span><br><span class=\"line\">      idx[a[p[i]]].<span class=\"built_in\">erase</span>(p[i]);</span><br><span class=\"line\">      a[p[i]] = v[i];</span><br><span class=\"line\">      idx[a[p[i]]].<span class=\"built_in\">insert</span>(p[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i)</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (idx[<span class=\"number\">1</span>].<span class=\"built_in\">size</span>() % <span class=\"number\">2</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> ans = <span class=\"built_in\">max</span>(*idx[<span class=\"number\">1</span>].<span class=\"built_in\">rbegin</span>(), n-*idx[<span class=\"number\">1</span>].<span class=\"built_in\">begin</span>()<span class=\"number\">-1</span>);</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, ans);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> LOCAL</span></span><br><span class=\"line\">  <span class=\"type\">time_t</span> starttime = <span class=\"built_in\">clock</span>();</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">  <span class=\"type\">int</span> tt;</span><br><span class=\"line\">  <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;tt);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> tc = <span class=\"number\">1</span>; tc &lt;= tt; tc++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Case #%d: &quot;</span>, tc);</span><br><span class=\"line\">    <span class=\"built_in\">read_input</span>();</span><br><span class=\"line\">    <span class=\"built_in\">solve</span>();</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> LOCAL</span></span><br><span class=\"line\">    cerr &lt;&lt; <span class=\"string\">&quot;~ TC#&quot;</span> &lt;&lt; tc &lt;&lt; <span class=\"string\">&quot; done! execution time: &quot;</span> &lt;&lt;</span><br><span class=\"line\">      (<span class=\"type\">double</span>)(<span class=\"built_in\">clock</span>()-starttime) / CLOCKS_PER_SEC &lt;&lt; <span class=\"string\">&quot; s&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\"></a> </h2>\n",
            "tags": [
                "Competitive Programming"
            ]
        },
        {
            "id": "https://youngforest.github.io/2019/07/25/kick-start-2019-round-C/",
            "url": "https://youngforest.github.io/2019/07/25/kick-start-2019-round-C/",
            "title": "kick start 2019 round C",
            "date_published": "2019-07-25T10:51:07.000Z",
            "content_html": "<p>赛后补的题解。<br />\n<a href=\"https://codingcompetitions.withgoogle.com/kickstart/round/0000000000050ff2\">题目链接</a></p>\n<p>主要参考的是 旷神 直播的解法，和官方 Analysis的解法。</p>\n<h2 id=\"wiggle-walk\"><a class=\"markdownIt-Anchor\" href=\"#wiggle-walk\"></a> Wiggle Walk</h2>\n<p>比较容易想到的是暴力解法。模拟整个命令执行过程，标记每个格子是否之前走过。<br />\n时间复杂度: O(N ^ 2).</p>\n<p>虽然实际上凑巧可以AC，但比较冒险。理论上会在大的测试集上TLE。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; <span class=\"title\">solve</span><span class=\"params\">(<span class=\"type\">const</span> string&amp; instructions, <span class=\"type\">const</span> <span class=\"type\">int</span> R, <span class=\"type\">const</span> <span class=\"type\">int</span> C, <span class=\"type\">const</span> <span class=\"type\">int</span> Sr, <span class=\"type\">const</span> <span class=\"type\">int</span> Sc)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> current_x = Sr, current_y = Sc;</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">bool</span>&gt;&gt; <span class=\"built_in\">visited</span>(R + <span class=\"number\">1</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">bool</span>&gt; (C + <span class=\"number\">1</span>, <span class=\"literal\">false</span>));</span><br><span class=\"line\">    visited[current_x][current_y] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">char</span> c : instructions) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> dx, dy;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (c)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;N&#x27;</span>:</span><br><span class=\"line\">            dx = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            dy = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;E&#x27;</span>:</span><br><span class=\"line\">            dx = <span class=\"number\">0</span>;</span><br><span class=\"line\">            dy = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;W&#x27;</span>:</span><br><span class=\"line\">            dx = <span class=\"number\">0</span>;</span><br><span class=\"line\">            dy = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;S&#x27;</span>:</span><br><span class=\"line\">            dx = <span class=\"number\">1</span>;</span><br><span class=\"line\">            dy = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            cerr &lt;&lt; <span class=\"string\">&quot;Bad instruction: &quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            current_x += dx;</span><br><span class=\"line\">            current_y += dy;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (visited[current_x][current_y] == <span class=\"literal\">true</span>);</span><br><span class=\"line\">        visited[current_x][current_y] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;current_x, current_y&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> T;</span><br><span class=\"line\">    cin &gt;&gt; T;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; T; ++i) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> N, R, C, Sr, Sc;</span><br><span class=\"line\">        cin &gt;&gt; N &gt;&gt; R &gt;&gt; C &gt;&gt; Sr &gt;&gt; Sc;</span><br><span class=\"line\">        string instructions;</span><br><span class=\"line\">        cin &gt;&gt; instructions;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> ans = <span class=\"built_in\">solve</span>(instructions, R, C, Sr, Sc);</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Case #&quot;</span> &lt;&lt; i + <span class=\"number\">1</span> &lt;&lt; <span class=\"string\">&quot;: &quot;</span> &lt;&lt; ans.first &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; ans.second &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>需要找到快速跳过已经走过格子的方法。一种是题解里给的，记录interval的方式。时间复杂度: O(N log N). 每次查询interval需要O(log N).</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cassert&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getNext</span><span class=\"params\">(set&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; &amp;visited, <span class=\"type\">const</span> <span class=\"type\">int</span> x, <span class=\"type\">int</span> direction)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">auto</span> it = visited.<span class=\"built_in\">lower_bound</span>(&#123;x + <span class=\"number\">1</span>, x + <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">  <span class=\"built_in\">assert</span>(it != visited.<span class=\"built_in\">begin</span>());</span><br><span class=\"line\">  --it;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (direction &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> it-&gt;second;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> it-&gt;first - <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">visitRow</span><span class=\"params\">(set&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; &amp;row, <span class=\"type\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">auto</span> it = row.<span class=\"built_in\">lower_bound</span>(&#123;y + <span class=\"number\">1</span>, y + <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (it == row.<span class=\"built_in\">begin</span>()) &#123;</span><br><span class=\"line\">    it = row.<span class=\"built_in\">insert</span>(&#123;y, y + <span class=\"number\">1</span>&#125;).first;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    --it;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (it-&gt;first &lt;= y &amp;&amp; it-&gt;second &gt; y) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (it-&gt;second == y) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">auto</span> old = it;</span><br><span class=\"line\">      it = row.<span class=\"built_in\">insert</span>(it, &#123;it-&gt;first, it-&gt;second + <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">      it = row.<span class=\"built_in\">erase</span>(old);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      it = row.<span class=\"built_in\">insert</span>(&#123;y, y + <span class=\"number\">1</span>&#125;).first;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// merge interval</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">next</span>(it) != row.<span class=\"built_in\">end</span>() &amp;&amp; <span class=\"built_in\">next</span>(it)-&gt;first == it-&gt;second) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> end = <span class=\"built_in\">next</span>(it)-&gt;second;</span><br><span class=\"line\">    <span class=\"type\">int</span> begin = it-&gt;first;</span><br><span class=\"line\">    row.<span class=\"built_in\">erase</span>(<span class=\"built_in\">next</span>(it));</span><br><span class=\"line\">    row.<span class=\"built_in\">erase</span>(it);</span><br><span class=\"line\">    row.<span class=\"built_in\">insert</span>(&#123;begin, end&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">visit</span><span class=\"params\">(vector&lt;set&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt;&gt; &amp;visitedR,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">           vector&lt;set&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt;&gt; &amp;visitedC, <span class=\"type\">const</span> <span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">auto</span> &amp;row = visitedR[x];</span><br><span class=\"line\">  <span class=\"built_in\">visitRow</span>(row, y);</span><br><span class=\"line\">  <span class=\"keyword\">auto</span> &amp;column = visitedC[y];</span><br><span class=\"line\">  <span class=\"built_in\">visitRow</span>(column, x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; <span class=\"title\">solve</span><span class=\"params\">(<span class=\"type\">const</span> string &amp;instructions, <span class=\"type\">const</span> <span class=\"type\">int</span> R, <span class=\"type\">const</span> <span class=\"type\">int</span> C,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                     <span class=\"type\">const</span> <span class=\"type\">int</span> Sr, <span class=\"type\">const</span> <span class=\"type\">int</span> Sc)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> current_x = Sr, current_y = Sc;</span><br><span class=\"line\">  vector&lt;set&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt;&gt; <span class=\"built_in\">visitedR</span>(R + <span class=\"number\">1</span>);</span><br><span class=\"line\">  vector&lt;set&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt;&gt; <span class=\"built_in\">visitedC</span>(C + <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"built_in\">visit</span>(visitedR, visitedC, current_x, current_y);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">char</span> c : instructions) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (c) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;N&#x27;</span>:</span><br><span class=\"line\">      current_x = <span class=\"built_in\">getNext</span>(visitedC[current_y], current_x, <span class=\"number\">-1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;E&#x27;</span>:</span><br><span class=\"line\">      current_y = <span class=\"built_in\">getNext</span>(visitedR[current_x], current_y, <span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;W&#x27;</span>:</span><br><span class=\"line\">      current_y = <span class=\"built_in\">getNext</span>(visitedR[current_x], current_y, <span class=\"number\">-1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;S&#x27;</span>:</span><br><span class=\"line\">      current_x = <span class=\"built_in\">getNext</span>(visitedC[current_y], current_x, <span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      cerr &lt;&lt; <span class=\"string\">&quot;Bad instruction: &quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">visit</span>(visitedR, visitedC, current_x, current_y);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;current_x, current_y&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> T;</span><br><span class=\"line\">  cin &gt;&gt; T;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; T; ++i) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> N, R, C, Sr, Sc;</span><br><span class=\"line\">    cin &gt;&gt; N &gt;&gt; R &gt;&gt; C &gt;&gt; Sr &gt;&gt; Sc;</span><br><span class=\"line\">    string instructions;</span><br><span class=\"line\">    cin &gt;&gt; instructions;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> ans = <span class=\"built_in\">solve</span>(instructions, R, C, Sr, Sc);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Case #&quot;</span> &lt;&lt; i + <span class=\"number\">1</span> &lt;&lt; <span class=\"string\">&quot;: &quot;</span> &lt;&lt; ans.first &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; ans.second &lt;&lt; endl;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>另一种是 邝神 直播中的方法。用并查集，需要注意的是union时，方向是重要的。时间复杂度为 O(N).</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">UF</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> F[<span class=\"number\">200010</span>];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (F[x] == <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> F[x] = <span class=\"built_in\">find</span>(F[x]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(F, <span class=\"number\">-1</span>, <span class=\"built_in\">sizeof</span>(F));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">join</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> t1 = <span class=\"built_in\">find</span>(x);</span><br><span class=\"line\">        <span class=\"type\">int</span> t2 = <span class=\"built_in\">find</span>(y);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t1 != t2) &#123;</span><br><span class=\"line\">            F[t2] = t1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">UF N, E, W, S;</span><br><span class=\"line\"></span><br><span class=\"line\">map&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;, <span class=\"type\">int</span>&gt; p2Id;</span><br><span class=\"line\"><span class=\"type\">int</span> tot;</span><br><span class=\"line\">map&lt;<span class=\"type\">int</span>, pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; id2P;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    N.<span class=\"built_in\">init</span>();</span><br><span class=\"line\">    E.<span class=\"built_in\">init</span>();</span><br><span class=\"line\">    W.<span class=\"built_in\">init</span>();</span><br><span class=\"line\">    S.<span class=\"built_in\">init</span>();</span><br><span class=\"line\">    tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">    p2Id.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    id2P.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getId</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">    pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; p = <span class=\"built_in\">make_pair</span>(x, y);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!p2Id.<span class=\"built_in\">count</span>(p)) &#123;</span><br><span class=\"line\">        p2Id[p] = tot;</span><br><span class=\"line\">        id2P[tot] = p;</span><br><span class=\"line\">        tot++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p2Id[p];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">gao</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> now = <span class=\"built_in\">getId</span>(x, y);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> w = <span class=\"built_in\">getId</span>(x, y<span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> e = <span class=\"built_in\">getId</span>(x, y<span class=\"number\">+1</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> n = <span class=\"built_in\">getId</span>(x<span class=\"number\">-1</span>, y);</span><br><span class=\"line\">    <span class=\"type\">int</span> s = <span class=\"built_in\">getId</span>(x<span class=\"number\">+1</span>, y);</span><br><span class=\"line\">    W.<span class=\"built_in\">join</span>(w, now);</span><br><span class=\"line\">    E.<span class=\"built_in\">join</span>(e, now);</span><br><span class=\"line\">    N.<span class=\"built_in\">join</span>(n, now);</span><br><span class=\"line\">    S.<span class=\"built_in\">join</span>(s, now);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; <span class=\"title\">getNext</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y, <span class=\"type\">char</span> dir)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> now = <span class=\"built_in\">getId</span>(x, y);</span><br><span class=\"line\">    <span class=\"type\">int</span> nextId;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dir == <span class=\"string\">&#x27;N&#x27;</span>) &#123;</span><br><span class=\"line\">        nextId = N.<span class=\"built_in\">find</span>(now);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (dir == <span class=\"string\">&#x27;E&#x27;</span>) &#123;</span><br><span class=\"line\">        nextId = E.<span class=\"built_in\">find</span>(now);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (dir == <span class=\"string\">&#x27;W&#x27;</span>) &#123;</span><br><span class=\"line\">        nextId = W.<span class=\"built_in\">find</span>(now);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (dir == <span class=\"string\">&#x27;S&#x27;</span>) &#123;</span><br><span class=\"line\">        nextId = S.<span class=\"built_in\">find</span>(now);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> id2P[nextId];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> str[<span class=\"number\">50010</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> T;</span><br><span class=\"line\">    <span class=\"type\">int</span> iCase = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--) &#123;</span><br><span class=\"line\">        iCase++;</span><br><span class=\"line\">        <span class=\"type\">int</span> N, R, C, sx, sy;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d%d&quot;</span>, &amp;N, &amp;R, &amp;C, &amp;sx, &amp;sy);</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, str);</span><br><span class=\"line\">        <span class=\"built_in\">init</span>();</span><br><span class=\"line\">        <span class=\"built_in\">gao</span>(sx, sy);</span><br><span class=\"line\">        pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; now = <span class=\"built_in\">make_pair</span>(sx, sy);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; N; ++i) &#123;</span><br><span class=\"line\">            now = <span class=\"built_in\">getNext</span>(now.first, now.second, str[i]);</span><br><span class=\"line\">            <span class=\"built_in\">gao</span>(now.first, now.second);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Case #%d: %d %d\\n&quot;</span>, iCase, now.first, now.second);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"circuit-board\"><a class=\"markdownIt-Anchor\" href=\"#circuit-board\"></a> Circuit Board</h2>\n<p>旷神用了比较暴力的解法。O(R * C^2).<br />\n记录每个格子之前相差K的格子数。<br />\n然后，枚举每列和K，扫描行，更新最大面积。</p>\n<p>观察数据规模，和实际测试，都是能过的。Kick start的时间复杂度基本上也是<code>10^6</code>这个量级。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> a[<span class=\"number\">310</span>][<span class=\"number\">310</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> diff[<span class=\"number\">310</span>][<span class=\"number\">310</span>][<span class=\"number\">310</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> T;</span><br><span class=\"line\">  <span class=\"type\">int</span> iCase = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;T);</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (T--) &#123;</span><br><span class=\"line\">    iCase++;</span><br><span class=\"line\">    <span class=\"type\">int</span> R, C, K;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;R, &amp;C, &amp;K);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; R; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; C; j++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i][j]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; R; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; C; ++j) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> Min = a[i][j];</span><br><span class=\"line\">        <span class=\"type\">int</span> Max = a[i][j];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = j; k &lt; C; ++k) &#123;</span><br><span class=\"line\">          Min = <span class=\"built_in\">min</span>(a[i][k], Min);</span><br><span class=\"line\">          Max = <span class=\"built_in\">max</span>(a[i][k], Max);</span><br><span class=\"line\">          diff[i][j][k] = Max - Min;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; C; ++j) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = j; k &lt; C; ++k) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> now = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; R; ++i) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (diff[i][j][k] &lt;= K) &#123;</span><br><span class=\"line\">                    ans = <span class=\"built_in\">max</span>(ans, (k - j + <span class=\"number\">1</span>) * (i - now + <span class=\"number\">1</span>));</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    now = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Case #%d: %d\\n&quot;</span>, iCase, ans);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>官方的解法是<code>O(N log N)</code>的。<br />\n借助线段树快速查询最大最小值，二分确定满足K的右边界，largest-rectangle-under-histogram 获取最大矩形面积。<br />\n十分考验就高级数据结构和算法的熟悉程度和快速实现能力。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"comment\">// https://www.geeksforgeeks.org/min-max-range-queries-array/</span></span><br><span class=\"line\"><span class=\"comment\">// https://www.geeksforgeeks.org/largest-rectangle-under-histogram/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">SegmentTree</span> &#123;</span><br><span class=\"line\">    vector&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; st;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">SegmentTree</span>(<span class=\"type\">const</span> vector&lt;<span class=\"type\">int</span>&gt;&amp; a) &#123;</span><br><span class=\"line\">        n = a.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> x = <span class=\"built_in\">ceil</span>(<span class=\"built_in\">log2</span>(n));</span><br><span class=\"line\">        <span class=\"type\">int</span> max_size = std::<span class=\"built_in\">pow</span>(<span class=\"number\">2</span>, x + <span class=\"number\">1</span>) - <span class=\"number\">1</span>;</span><br><span class=\"line\">        st.<span class=\"built_in\">resize</span>(max_size);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">constructSTUtil</span>(a, <span class=\"number\">0</span>, n<span class=\"number\">-1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// A recursive function that constructs Segment Tree for array[ss..se].</span></span><br><span class=\"line\">    <span class=\"comment\">// si is index of current node in segment tree st</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">constructSTUtil</span><span class=\"params\">(<span class=\"type\">const</span> vector&lt;<span class=\"type\">int</span>&gt;&amp; arr, <span class=\"type\">int</span> ss, <span class=\"type\">int</span> se, <span class=\"type\">int</span> si)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// If there is one element in array, store it in current node of segment tree and return</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ss == se) &#123;</span><br><span class=\"line\">            st[si].first = arr[ss];</span><br><span class=\"line\">            st[si].second = arr[ss];</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// If there are more than one elements, then recurse for left and right</span></span><br><span class=\"line\">        <span class=\"comment\">// subtrees and store the minimum and maximum of two values in this nodee</span></span><br><span class=\"line\">        <span class=\"type\">int</span> mid = ss + (se - ss) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"built_in\">constructSTUtil</span>(arr, ss, mid, si*<span class=\"number\">2</span><span class=\"number\">+1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">constructSTUtil</span>(arr, mid<span class=\"number\">+1</span>, se, si*<span class=\"number\">2</span><span class=\"number\">+2</span>);</span><br><span class=\"line\">        st[si].first = <span class=\"built_in\">min</span>(st[si*<span class=\"number\">2</span><span class=\"number\">+1</span>].first, st[si*<span class=\"number\">2</span><span class=\"number\">+2</span>].first);</span><br><span class=\"line\">        st[si].second = <span class=\"built_in\">max</span>(st[si*<span class=\"number\">2</span><span class=\"number\">+1</span>].second, st[si*<span class=\"number\">2</span><span class=\"number\">+2</span>].second);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * A recursive function to get the minimun and maximum value in a</span></span><br><span class=\"line\"><span class=\"comment\">     * given range of array indexes. The following are parameters for thie function.</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * st --&gt; segment tree vector</span></span><br><span class=\"line\"><span class=\"comment\">     * index --&gt; index of current node in the segment tree. Initially 0 is passed as root is always at index 0</span></span><br><span class=\"line\"><span class=\"comment\">     * ss &amp;&amp; se --&gt; Starting and ending indexes of the segment represented by current node, i.e. st[index]</span></span><br><span class=\"line\"><span class=\"comment\">     * qs &amp;&amp; qe --&gt; Starting and ending indexes of query range</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; <span class=\"title\">maxMinUtil</span><span class=\"params\">(<span class=\"type\">int</span> ss, <span class=\"type\">int</span> se, <span class=\"type\">int</span> qs, <span class=\"type\">int</span> qe, <span class=\"type\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// if segment of this node is a part of given range,</span></span><br><span class=\"line\">        <span class=\"comment\">// then return the minimum and maximum node of the segment</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ss &gt;= qs &amp;&amp; se &lt;= qe) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> st[index];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// If segment of this node is outside the given range</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (se &lt; qs || ss &gt; qe) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;numeric_limits&lt;<span class=\"type\">int</span>&gt;::<span class=\"built_in\">max</span>(), numeric_limits&lt;<span class=\"type\">int</span>&gt;::<span class=\"built_in\">min</span>()&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// If a part of this segment overlaps with the given range</span></span><br><span class=\"line\">        <span class=\"type\">int</span> mid = ss + (se - ss) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> left = <span class=\"built_in\">maxMinUtil</span>(ss, mid, qs, qe, index*<span class=\"number\">2</span><span class=\"number\">+1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> right = <span class=\"built_in\">maxMinUtil</span>(mid<span class=\"number\">+1</span>, se, qs, qe, index*<span class=\"number\">2</span><span class=\"number\">+2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;<span class=\"built_in\">min</span>(left.first, right.first), <span class=\"built_in\">max</span>(left.second, right.second)&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; <span class=\"title\">maxMin</span><span class=\"params\">(<span class=\"type\">int</span> qs, <span class=\"type\">int</span> qe)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (qs &lt; <span class=\"number\">0</span> || qe &gt; n - <span class=\"number\">1</span> || qs &gt; qe) &#123;</span><br><span class=\"line\">            cerr &lt;&lt; <span class=\"string\">&quot;Invalid Input&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;numeric_limits&lt;<span class=\"type\">int</span>&gt;::<span class=\"built_in\">max</span>(), numeric_limits&lt;<span class=\"type\">int</span>&gt;::<span class=\"built_in\">min</span>()&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">maxMinUtil</span>(<span class=\"number\">0</span>, n<span class=\"number\">-1</span>, qs, qe, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">queryDiff</span><span class=\"params\">(<span class=\"type\">int</span> qs, <span class=\"type\">int</span> qe)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> ans = <span class=\"built_in\">maxMin</span>(qs, qe);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans.second - ans.first;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"type\">const</span> vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt;&amp; board, <span class=\"type\">int</span> K)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> R = board.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"type\">int</span> C = board[<span class=\"number\">0</span>].<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">heigth</span>(R, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(C));</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; R; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> maxMin = <span class=\"built_in\">SegmentTree</span>(board[i]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; C; ++ j) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> lo = j, hi = C;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (lo &lt; hi) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> mid = lo + (hi - lo) / <span class=\"number\">2</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (maxMin.<span class=\"built_in\">queryDiff</span>(j, mid) &lt;= K) &#123;</span><br><span class=\"line\">                    lo = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    hi = mid;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            heigth[i][j] = lo - j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; C; ++j) &#123;</span><br><span class=\"line\">        stack&lt;<span class=\"type\">int</span>&gt; s;</span><br><span class=\"line\">        <span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; R) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s.<span class=\"built_in\">empty</span>() || heigth[s.<span class=\"built_in\">top</span>()][j] &lt;= heigth[i][j]) &#123;</span><br><span class=\"line\">                s.<span class=\"built_in\">push</span>(i);</span><br><span class=\"line\">                ++i;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> tp = s.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                ans = <span class=\"built_in\">max</span>(ans, heigth[tp][j] * (s.<span class=\"built_in\">empty</span>() ? i : i - s.<span class=\"built_in\">top</span>() - <span class=\"number\">1</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!s.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> tp = s.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">            s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            ans = <span class=\"built_in\">max</span>(ans, heigth[tp][j] * (s.<span class=\"built_in\">empty</span>() ? i : i - s.<span class=\"built_in\">top</span>() - <span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> T;</span><br><span class=\"line\">  cin &gt;&gt; T;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= T; ++i) &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> R, C, K;</span><br><span class=\"line\">      cin &gt;&gt; R &gt;&gt; C &gt;&gt; K;</span><br><span class=\"line\">      vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">board</span>(R, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(C));</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; R; ++j) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; C; ++k) &#123;</span><br><span class=\"line\">              cin &gt;&gt; board[j][k];</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"type\">int</span> ans = <span class=\"built_in\">solve</span>(board, K);</span><br><span class=\"line\">      cout &lt;&lt; <span class=\"string\">&quot;Case #&quot;</span> &lt;&lt; i &lt;&lt; <span class=\"string\">&quot;: &quot;</span> &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"catch-some\"><a class=\"markdownIt-Anchor\" href=\"#catch-some\"></a> Catch Some</h2>\n<p>经典的DP问题。<br />\n每种颜色的衬衫肯定只穿一次。因为2次所走的路肯定大于一次，而且观察到的狗的数量是一样的。<br />\n每种颜色有2个最小花费，一种是需要返回到原点的，另一种是不需要。<br />\ndp[i][j][0/1]表示使用了 (第i种颜色，观察了j个狗，不返回/返回到原点) 所需的最小花费。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> P[<span class=\"number\">1010</span>], A[<span class=\"number\">1010</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> dp[<span class=\"number\">1010</span>][<span class=\"number\">1010</span>][<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> INF = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; vec[<span class=\"number\">1010</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> T;</span><br><span class=\"line\">    <span class=\"type\">int</span> iCase = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--) &#123;</span><br><span class=\"line\">        iCase++;</span><br><span class=\"line\">        <span class=\"type\">int</span> n, k;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;P[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;A[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">1000</span>; ++i) &#123;</span><br><span class=\"line\">            vec[i].<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            vec[A[i]].<span class=\"built_in\">push_back</span>(P[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">1000</span>; ++i) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">sort</span>(vec[i].<span class=\"built_in\">begin</span>(), vec[i].<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">1000</span>; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt;= n; ++j) &#123;</span><br><span class=\"line\">                dp[i][j][<span class=\"number\">0</span>] = dp[i][j][<span class=\"number\">1</span>] = INF;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>][<span class=\"number\">0</span>] = dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>][<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt;= n;++j) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (dp[i][j][<span class=\"number\">0</span>] == INF &amp;&amp; dp[i][j][<span class=\"number\">1</span>] == INF) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"type\">int</span> sz = vec[i<span class=\"number\">+1</span>].<span class=\"built_in\">size</span>();</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> x = <span class=\"number\">0</span>; x &lt;= sz; ++x) &#123;</span><br><span class=\"line\">                    <span class=\"type\">int</span> tmp = x == <span class=\"number\">0</span> ? <span class=\"number\">0</span> : vec[i<span class=\"number\">+1</span>][x<span class=\"number\">-1</span>];</span><br><span class=\"line\">                    dp[i<span class=\"number\">+1</span>][j+x][<span class=\"number\">0</span>] = <span class=\"built_in\">min</span>(dp[i<span class=\"number\">+1</span>][j+x][<span class=\"number\">0</span>], dp[i][j][<span class=\"number\">0</span>] + <span class=\"number\">2</span> * tmp);</span><br><span class=\"line\">                    dp[i<span class=\"number\">+1</span>][j+x][<span class=\"number\">1</span>] = <span class=\"built_in\">min</span>(dp[i<span class=\"number\">+1</span>][j+x][<span class=\"number\">1</span>], dp[i][j][<span class=\"number\">0</span>] + tmp);</span><br><span class=\"line\">                    dp[i<span class=\"number\">+1</span>][j+x][<span class=\"number\">1</span>] = <span class=\"built_in\">min</span>(dp[i<span class=\"number\">+1</span>][j+x][<span class=\"number\">1</span>], dp[i][j][<span class=\"number\">1</span>] + <span class=\"number\">2</span> * tmp);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Case #%d: %d\\n&quot;</span>, iCase, dp[<span class=\"number\">1000</span>][k][<span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"后记\"><a class=\"markdownIt-Anchor\" href=\"#后记\"></a> 后记</h2>\n<p>总结一下kick start的常考考点：</p>\n<ul>\n<li>DP/背包</li>\n<li>二分</li>\n<li>线段树</li>\n</ul>\n",
            "tags": [
                "Competitive Programming"
            ]
        },
        {
            "id": "https://youngforest.github.io/2019/07/24/kick-start-2019-round-B/",
            "url": "https://youngforest.github.io/2019/07/24/kick-start-2019-round-B/",
            "title": "kick start 2019 round B",
            "date_published": "2019-07-24T03:04:30.000Z",
            "content_html": "<p>赛后补的题解。<br />\n<a href=\"https://codingcompetitions.withgoogle.com/kickstart/round/0000000000050eda\">题目链接</a></p>\n<h2 id=\"building-palindromes\"><a class=\"markdownIt-Anchor\" href=\"#building-palindromes\"></a> Building Palindromes</h2>\n<p>给定长度为N的一个字符串，和Q个Query。每个query是一个range，可以得到字串。判断子串重新排列后是否回文。因为可以任意重排，所以子串中字符的顺序不重要，重要的是每个字符出现的频数。频数为奇数的字符数目为0或1，即可重排为回文串。<br />\n因为N和Q的规模较大，<code>10^5</code>。平方算法会超时。这里借用前缀和的思路，快速计算子串字符频数。<br />\n时间复杂度为线性。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unordered_map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> <span class=\"type\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> T;</span><br><span class=\"line\">    cin &gt;&gt; T;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= T; ++i) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> N, Q;</span><br><span class=\"line\">        cin &gt;&gt; N &gt;&gt; Q;</span><br><span class=\"line\">        string s;</span><br><span class=\"line\">        cin &gt;&gt; s;</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">prefix</span>(N<span class=\"number\">+1</span>);</span><br><span class=\"line\">        prefix[<span class=\"number\">0</span>] = <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(<span class=\"number\">26</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= N; ++j) &#123;</span><br><span class=\"line\">            prefix[j] = prefix[j<span class=\"number\">-1</span>];</span><br><span class=\"line\">            ++prefix[j][s[j<span class=\"number\">-1</span>] - <span class=\"string\">&#x27;A&#x27;</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; Q; ++j) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> L, R;</span><br><span class=\"line\">            cin &gt;&gt; L &gt;&gt; R;</span><br><span class=\"line\">            <span class=\"type\">const</span> <span class=\"keyword\">auto</span>&amp; l = prefix[L<span class=\"number\">-1</span>], r = prefix[R];</span><br><span class=\"line\">            <span class=\"type\">int</span> odd = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">26</span>; ++k) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((r[k] - l[k]) % <span class=\"number\">2</span> == <span class=\"number\">1</span>)</span><br><span class=\"line\">                    ++odd;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (odd &lt;= <span class=\"number\">1</span>)</span><br><span class=\"line\">                ++ans;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Case #&quot;</span> &lt;&lt; i &lt;&lt; <span class=\"string\">&quot;: &quot;</span> &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"energy-stones\"><a class=\"markdownIt-Anchor\" href=\"#energy-stones\"></a> Energy Stones</h2>\n<p>本题的思想是 贪心 + 动态规划 (一种<a href=\"https://en.wikipedia.org/wiki/Knapsack_problem\">0-1背包</a>)。更多背包问题，可以参考<a href=\"https://comzyh.com/upload/PDF/Pack-PDF-Comzyh.pdf\">背包九讲</a>。<br />\n难点在于，背包遍历的顺序需要用贪心的思路去排序的。</p>\n<p>对于S相同的小的测试集而言，L大的先去遍历。可以是的损失的能量最少。<br />\n对于S不同的大的测试集而言，2个石头<code>i</code>, <code>j</code>的顺序由<code>S_i * L_j</code>决定，如果<code>S_i * L_j &lt; S_j * L_i</code>，则先去<code>i</code>损失的能量更少。</p>\n<p>贪心的正确性也很容易去证明。如果我们有一个吃石头的序列，则 必然是按照能量损失较小的顺序去吃的。否则交换一下顺序，可以获得更大的能量。</p>\n<p>时间复杂度: O(N * N * S_i).<br />\n空间复杂度: O(N * N * S_i), 可以进一步优化到O(N * S_i)</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;tuple&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Stone</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> s, e, l;</span><br><span class=\"line\">  <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"type\">const</span> Stone &amp;p) <span class=\"type\">const</span> &#123; <span class=\"keyword\">return</span> s * p.l &lt; l * p.s; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> <span class=\"type\">const</span> *argv[])</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> T;</span><br><span class=\"line\">  cin &gt;&gt; T;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> iCase = <span class=\"number\">1</span>; iCase &lt;= T; ++iCase) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> N;</span><br><span class=\"line\">    cin &gt;&gt; N;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;Stone&gt; <span class=\"title\">data</span><span class=\"params\">(N + <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> S_sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= N; ++i) &#123;</span><br><span class=\"line\">      cin &gt;&gt; data[i].s &gt;&gt; data[i].e &gt;&gt; data[i].l;</span><br><span class=\"line\">      S_sum += data[i].s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(data.<span class=\"built_in\">begin</span>() + <span class=\"number\">1</span>, data.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">dp</span>(N + <span class=\"number\">1</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(S_sum + <span class=\"number\">1</span>));</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= N; ++i) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">int</span> time = <span class=\"number\">0</span>; time &lt;= S_sum; ++time) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (time &lt; data[i].s) &#123;</span><br><span class=\"line\">          dp[i][time] = dp[i - <span class=\"number\">1</span>][time];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          dp[i][time] =</span><br><span class=\"line\">              <span class=\"built_in\">max</span>(dp[i - <span class=\"number\">1</span>][time],</span><br><span class=\"line\">                  dp[i - <span class=\"number\">1</span>][time - data[i].s] +</span><br><span class=\"line\">                      <span class=\"built_in\">max</span>(<span class=\"number\">0</span>, data[i].e - data[i].l * (time - data[i].s)));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> time = <span class=\"number\">0</span>; time &lt;= S_sum; ++time) &#123;</span><br><span class=\"line\">      ans = <span class=\"built_in\">max</span>(ans, dp[N][time]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Case #&quot;</span> &lt;&lt; iCase &lt;&lt; <span class=\"string\">&quot;: &quot;</span> &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"diverse-subarray\"><a class=\"markdownIt-Anchor\" href=\"#diverse-subarray\"></a> Diverse Subarray</h2>\n<p>本题和第一题一样，都需要用到前缀和，但这一转换其实并不是很明显。<br />\n需要先把 types序列 转换成 增减事件序列，此时可以看出，增减事件的前缀和即是最后的我们需要优化的礼物数。<br />\n然后，为了快速获取最大前缀和，可以使用 [线段树](// <a href=\"https://www.geeksforgeeks.org/maximum-prefix-sum-given-range/\">https://www.geeksforgeeks.org/maximum-prefix-sum-given-range/</a>) 这一工具。实现<code>O(log N)</code>效率的查询一个Range中最大的前缀和，和<code>O(log N)</code>更新线段树。</p>\n<p>总的时间复杂度: O(N log N)</p>\n<ul>\n<li>初始化线段树 O(N log N)</li>\n<li>对于N个起点，更新、查询 线段树 O(log N)</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;limits&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unordered_map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">SegmentTree</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> sum = numeric_limits&lt;<span class=\"type\">int</span>&gt;::<span class=\"built_in\">min</span>();</span><br><span class=\"line\">    <span class=\"type\">int</span> prefix = numeric_limits&lt;<span class=\"type\">int</span>&gt;::<span class=\"built_in\">min</span>();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isValid</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> sum != numeric_limits&lt;<span class=\"type\">int</span>&gt;::<span class=\"built_in\">min</span>() &amp;&amp;</span><br><span class=\"line\">             prefix != numeric_limits&lt;<span class=\"type\">int</span>&gt;::<span class=\"built_in\">min</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Node &amp;<span class=\"keyword\">operator</span>=(<span class=\"type\">const</span> Node &amp;rhs) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>-&gt;sum = rhs.sum;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>-&gt;prefix = rhs.prefix;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"type\">const</span> <span class=\"type\">int</span> MAX_N = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">17</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 存储线段树的全局数组</span></span><br><span class=\"line\">  vector&lt;Node&gt; dat;</span><br><span class=\"line\">  <span class=\"type\">int</span> n;</span><br><span class=\"line\">  <span class=\"comment\">// 初始化</span></span><br><span class=\"line\">  <span class=\"built_in\">SegmentTree</span>(<span class=\"type\">int</span> n_, <span class=\"type\">int</span> a[]) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 为简单起见，把元素个数扩大到2的幂</span></span><br><span class=\"line\">    n = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n &lt; n_)</span><br><span class=\"line\">      n *= <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 把所有的值都设为INT_MAX</span></span><br><span class=\"line\">    dat.<span class=\"built_in\">resize</span>(<span class=\"number\">2</span> * n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n_; ++i) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">update</span>(i, a[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">const</span> <span class=\"keyword\">auto</span> &amp;d : dat) &#123;</span><br><span class=\"line\">      cout &lt;&lt; <span class=\"string\">&quot;&#123;&quot;</span> &lt;&lt; d.sum &lt;&lt; <span class=\"string\">&quot;, &quot;</span> &lt;&lt; d.prefix &lt;&lt; <span class=\"string\">&quot;&#125;, &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 把第k个值(0-indexed)更新为a</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"type\">int</span> k, <span class=\"type\">int</span> a)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 叶子节点</span></span><br><span class=\"line\">    k += n - <span class=\"number\">1</span>;</span><br><span class=\"line\">    dat[k].sum = a;</span><br><span class=\"line\">    dat[k].prefix = a;</span><br><span class=\"line\">    <span class=\"comment\">// 向上更新</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (k &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      k = (k - <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!dat[<span class=\"number\">2</span> * k + <span class=\"number\">2</span>].<span class=\"built_in\">isValid</span>())</span><br><span class=\"line\">        dat[k] = dat[<span class=\"number\">2</span> * k + <span class=\"number\">1</span>];</span><br><span class=\"line\">      <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        dat[k].sum = dat[<span class=\"number\">2</span> * k + <span class=\"number\">1</span>].sum + dat[<span class=\"number\">2</span> * k + <span class=\"number\">2</span>].sum;</span><br><span class=\"line\">        dat[k].prefix = <span class=\"built_in\">max</span>(dat[<span class=\"number\">2</span> * k + <span class=\"number\">1</span>].prefix,</span><br><span class=\"line\">                            dat[<span class=\"number\">2</span> * k + <span class=\"number\">1</span>].sum + dat[<span class=\"number\">2</span> * k + <span class=\"number\">2</span>].prefix);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 求[beg, end)的最小值</span></span><br><span class=\"line\">  <span class=\"comment\">// 后面的参数是为了计算起来方便而转入的。</span></span><br><span class=\"line\">  <span class=\"comment\">// k 是节点的编号, l, r表示这个节点对应的是[l, r)区间。</span></span><br><span class=\"line\">  <span class=\"comment\">// 在外部调用时，用query(index, beg, end, 0, n)</span></span><br><span class=\"line\">  <span class=\"function\">Node <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> index, <span class=\"type\">const</span> <span class=\"type\">int</span> beg, <span class=\"type\">const</span> <span class=\"type\">int</span> end, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span> <span class=\"type\">const</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// cout &lt;&lt; &quot;(&quot; &lt;&lt; index &lt;&lt; &quot;, &quot; &lt;&lt; l &lt;&lt; &quot;, &quot; &lt;&lt; r &lt;&lt; &quot;);&quot; &lt;&lt; endl;</span></span><br><span class=\"line\">    Node ret;</span><br><span class=\"line\">    <span class=\"comment\">// 如果[beg, end) 和 [l, r)不相交，则返回INT_MAX</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r &lt;= beg || end &lt;= l)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    <span class=\"comment\">// 如果[beg, end)完全包含[l, r), 则返回当前节点的值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (beg &lt;= l &amp;&amp; r &lt;= end)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> dat[index];</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = l + (r - l) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> vl = <span class=\"built_in\">query</span>(index * <span class=\"number\">2</span> + <span class=\"number\">1</span>, beg, end, l, mid);</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> vr = <span class=\"built_in\">query</span>(index * <span class=\"number\">2</span> + <span class=\"number\">2</span>, beg, end, mid, r);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!vr.<span class=\"built_in\">isValid</span>()) &#123;</span><br><span class=\"line\">      ret = vl;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!vl.<span class=\"built_in\">isValid</span>()) &#123;</span><br><span class=\"line\">      ret = vr;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      ret.sum = vl.sum + vr.sum;</span><br><span class=\"line\">      ret.prefix = <span class=\"built_in\">max</span>(vl.prefix, vl.sum + vr.prefix);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\">Node <span class=\"title\">queryMin</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span> a, <span class=\"type\">const</span> <span class=\"type\">int</span> b)</span> <span class=\"type\">const</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"built_in\">query</span>(<span class=\"number\">0</span>, a, b, <span class=\"number\">0</span>, n); &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// https://www.geeksforgeeks.org/maximum-prefix-sum-given-range/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> <span class=\"type\">const</span> *argv[])</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> T;</span><br><span class=\"line\">  cin &gt;&gt; T;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> iCase = <span class=\"number\">1</span>; iCase &lt;= T; ++iCase) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> N, S;</span><br><span class=\"line\">    cin &gt;&gt; N &gt;&gt; S;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">A</span><span class=\"params\">(N)</span>, <span class=\"title\">events</span><span class=\"params\">(N)</span></span>;</span><br><span class=\"line\">    unordered_map&lt;<span class=\"type\">int</span>, vector&lt;<span class=\"type\">int</span>&gt;&gt; types; <span class=\"comment\">// type, &lt;index&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; N; ++i) &#123;</span><br><span class=\"line\">      cin &gt;&gt; A[i];</span><br><span class=\"line\">      types[A[i]].<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (types[A[i]].<span class=\"built_in\">size</span>() &lt;= S) &#123;</span><br><span class=\"line\">        events[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (types[A[i]].<span class=\"built_in\">size</span>() == S + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        events[i] = -S;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        events[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">SegmentTree <span class=\"title\">st</span><span class=\"params\">(N, events.data())</span></span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = numeric_limits&lt;<span class=\"type\">int</span>&gt;::<span class=\"built_in\">min</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; N; ++i) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">auto</span> r = st.<span class=\"built_in\">queryMin</span>(i, N);</span><br><span class=\"line\">      ans = <span class=\"built_in\">max</span>(ans, r.prefix);</span><br><span class=\"line\">      <span class=\"keyword\">auto</span> &amp;v = types[A[i]];</span><br><span class=\"line\">      <span class=\"keyword\">auto</span> it = <span class=\"built_in\">lower_bound</span>(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), i);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (it + S &lt; v.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">        st.<span class=\"built_in\">update</span>(*(it + S), <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (it + S + <span class=\"number\">1</span> &lt; v.<span class=\"built_in\">end</span>())</span><br><span class=\"line\">          st.<span class=\"built_in\">update</span>(*(it + S + <span class=\"number\">1</span>), -S);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Case #&quot;</span> &lt;&lt; iCase &lt;&lt; <span class=\"string\">&quot;: &quot;</span> &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"后记\"><a class=\"markdownIt-Anchor\" href=\"#后记\"></a> 后记</h2>\n<p>练习了2场Kick Start，并实际参与1场。我发现自己的水平里Google的要求还差的远呢。Google的对算法的要求直逼ACM，竞赛选手会有很大优势的。我虽然水平有限，但还有时间可以进步。<br />\n过去有6年的比赛题，每年8轮。足够练习2个月时间了。</p>\n<p>周末一场2019 Round D，我会参加练手。争取拿到第1题的全部分数 和 后2题的小 case的分数。<br />\n加油，Forest！</p>\n",
            "tags": [
                "Competitive Programming"
            ]
        },
        {
            "id": "https://youngforest.github.io/2019/03/24/kick-start-2019-round-A/",
            "url": "https://youngforest.github.io/2019/03/24/kick-start-2019-round-A/",
            "title": "Kick start 2019 round A",
            "date_published": "2019-03-24T05:29:15.000Z",
            "content_html": "<p>[题目链接]</p>\n<p>这是我首次参加Kick start比赛。之前本科的时候，和舍友tls 参加过它的前身Code Jam。今年才正式准备Kick start的一系列比赛。原因是这是Google选拔软件工程师的途径，而Google是我的Dream Company。<br />\n我于5月22日在清华参加了Google的校园宣讲会。在宣讲会上，前辈们也分外强调准备和参加Kick start的重要性。GG作为一家很左的公司，分外强调公平。而Kick start就是实现招聘公平的一个工具。毕竟相比其他公司的过分注重内推，Kick start给了弱势学校的学生一个机会。</p>\n<p>由于平台故障，最后25min无法提交。虽然我提前一个小时放弃比赛了，但是晚上收到邮件告知这个bug。如果没有这个Bug的话，我的排名可能还要后退。<br />\n最后的排名是 600/3305.<br />\n得分分别为</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Training</th>\n<th>Parcels</th>\n<th>Contention</th>\n<th>Total</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>我的</td>\n<td>20</td>\n<td>15</td>\n<td>0</td>\n<td>35</td>\n</tr>\n<tr>\n<td>总分</td>\n<td>20</td>\n<td>35</td>\n<td>45</td>\n<td>100</td>\n</tr>\n</tbody>\n</table>\n<p>也就是说，我过了签到题和第二题的small case。<br />\n题目的难度总体比LeetCode要难的多，最后只有2个人拿到了满分。</p>\n<h2 id=\"1-training\"><a class=\"markdownIt-Anchor\" href=\"#1-training\"></a> 1. Training</h2>\n<p>从一个N人的队伍中，挑出P人。要求这P个人的训练时长最小，训练时长为 技能点最大的人的技能点 - 每个人的技能点 之和。<br />\nIntuition：<br />\n先排序。然后用一个长度为P的窗口，不断滑动，求的最小值。</p>\n<p>时间复杂度：O(N log N), 因为排序。<br />\n空间复杂度：O(N).</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">solution</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;skills, <span class=\"type\">int</span> N, <span class=\"type\">int</span> P)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(skills.<span class=\"built_in\">begin</span>(), skills.<span class=\"built_in\">end</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> need_hour = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; P - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        need_hour += skills[P - <span class=\"number\">1</span>] - skills[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> ret = need_hour;</span><br><span class=\"line\">    <span class=\"type\">int</span> left = <span class=\"number\">0</span>, right = P - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (right &lt; N) &#123;</span><br><span class=\"line\">        right++;</span><br><span class=\"line\">        need_hour += (P - <span class=\"number\">1</span>) * (skills[right] - skills[right - <span class=\"number\">1</span>]);</span><br><span class=\"line\">        need_hour -= skills[right - <span class=\"number\">1</span>] - skills[left];</span><br><span class=\"line\">        left++;</span><br><span class=\"line\">        ret = <span class=\"built_in\">min</span>(ret, need_hour);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> T;</span><br><span class=\"line\">    cin &gt;&gt; T;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; T; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> N, P;</span><br><span class=\"line\">        cin &gt;&gt; N &gt;&gt; P;</span><br><span class=\"line\">        vector&lt;<span class=\"type\">int</span>&gt; skills;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; N; j++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> s;</span><br><span class=\"line\">            cin &gt;&gt; s;</span><br><span class=\"line\">            skills.<span class=\"built_in\">push_back</span>(s);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Case #&quot;</span> &lt;&lt; i + <span class=\"number\">1</span> &lt;&lt; <span class=\"string\">&quot;: &quot;</span> &lt;&lt; <span class=\"built_in\">solution</span>(skills, N, P) &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-parcels\"><a class=\"markdownIt-Anchor\" href=\"#2-parcels\"></a> 2. Parcels</h2>\n<p>给定一个R * C的网格。网格中分布着一些邮局，你只能新建造一个邮局。使得所有格子到达最近邮局的最大距离（定义为曼哈顿距离）最短。</p>\n<p>Intuition：<br />\n我只想到了一种暴力的解法，过了small case。<br />\n从邮局出发，更新所有格子的距离。<br />\n新加邮局时，枚举所有可能的位置。<br />\n时间复杂度: O((R * C)^2)<br />\n空间复杂度: O(R * C).</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这里函数名其实应该是 dfs</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">bfs</span><span class=\"params\">(vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt;&amp; distance, <span class=\"type\">int</span> R, <span class=\"type\">int</span> C, <span class=\"type\">int</span> i, <span class=\"type\">int</span> j, <span class=\"type\">int</span> depth)</span> </span>&#123;</span><br><span class=\"line\">\tdistance[i][j] = depth;</span><br><span class=\"line\">\tvector&lt;<span class=\"type\">int</span>&gt; di = &#123; <span class=\"number\">-1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\tvector&lt;<span class=\"type\">int</span>&gt; dj = &#123; <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span> &#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">4</span>; k++) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> ni = i + di[k];</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> nj = j + dj[k];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (ni &lt; R &amp;&amp; nj &lt; C &amp;&amp; ni &gt;= <span class=\"number\">0</span> &amp;&amp; nj &gt;= <span class=\"number\">0</span> &amp;&amp; distance[ni][nj] &gt; depth + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">bfs</span>(distance, R, C, ni, nj, depth + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">solution</span><span class=\"params\">(vector&lt;string&gt; &amp;grids, <span class=\"type\">int</span> R, <span class=\"type\">int</span> C)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tvector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">distance</span>(R, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(C, numeric_limits&lt;<span class=\"type\">int</span>&gt;::<span class=\"built_in\">max</span>()));</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; R; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; C; j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (grids[i][j] == <span class=\"string\">&#x27;1&#x27;</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">bfs</span>(distance, R, C, i, j, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> ret = numeric_limits&lt;<span class=\"type\">int</span>&gt;::<span class=\"built_in\">max</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; R; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; C; j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (grids[i][j] == <span class=\"string\">&#x27;0&#x27;</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">auto</span> distance_copy = distance;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">bfs</span>(distance_copy, R, C, i, j, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">int</span> max_distance = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; R; k++) &#123;</span><br><span class=\"line\">\t\t\t\t\tmax_distance = <span class=\"built_in\">max</span>(max_distance, *<span class=\"built_in\">max_element</span>(distance_copy[k].<span class=\"built_in\">begin</span>(), distance_copy[k].<span class=\"built_in\">end</span>()));</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tret = <span class=\"built_in\">min</span>(ret, max_distance);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (ret == numeric_limits&lt;<span class=\"type\">int</span>&gt;::<span class=\"built_in\">max</span>()) ? <span class=\"number\">0</span> : ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> T;</span><br><span class=\"line\">\tcin &gt;&gt; T;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; T; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> R, C;</span><br><span class=\"line\">\t\tcin &gt;&gt; R &gt;&gt; C;</span><br><span class=\"line\">\t\t<span class=\"function\">vector&lt;string&gt; <span class=\"title\">grids</span><span class=\"params\">(R)</span></span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; R; j++) &#123;</span><br><span class=\"line\">\t\t\tcin &gt;&gt; grids[j];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Case #&quot;</span> &lt;&lt; i + <span class=\"number\">1</span> &lt;&lt; <span class=\"string\">&quot;: &quot;</span> &lt;&lt; <span class=\"built_in\">solution</span>(grids, R, C) &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>赛后学习官方的ANALYSIS，正确的解法是：</p>\n<p>首先考虑如下的子问题：给定一个最大距离K，我们是否可以通过增加一个邮局，使得最大距离小于等于K？<br />\n这是一个判定问题。<br />\n可以利用我的解法，但是只需要关心那些最大距离大于K的格子。利用这点不同，最后算法的效率会大幅提高。<br />\n有了判定问题的解法，我们可以二分搜索出最优解。这也是一种讲 最优化问题 转化为 判定问题的方法。</p>\n<p>总的做法如下：</p>\n<ol>\n<li>首先求的所有格子到最近邮局的距离。可以通过BFS，从所有邮局开始搜索。因为每个格子访问一次，所以时间复杂度为<code>O(R * C)</code>.</li>\n<li>对于所有到邮局距离超过K的格子，我们需要找到是否存在一个格子到这些格子的距离小于等于K。为了有效的实现这个步骤，注意到曼哈顿距离计算的等价公式为：<code>dist((x1, y1), (x2, y2)) = max(abs(x1 + y1 - (x2 + y2)), abs(x1 - y1 - (x2 - y2)))</code>. 固定点<code>(x2, y2)</code>, 最大的曼哈顿距离在 <code>x1 + y1</code> 或 <code>x1 - y1</code> 最大或最小时达到。对于所有最大到邮局距离超过K的格子，我们都计算<code>x1 + y1</code> 或 <code>x1 - y1</code> 最大 和 最小值，得到4个值。然后，再尝试所有可以放邮局的格子。每个格子我们都可以在常数时间内判定。所以此步骤的时间复杂度为<code>RC + RC = O(RC)</code>。</li>\n<li>二分搜索。总的时间复杂度为<code>O(RC log(R+C))</code>.</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;numeric&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;utility&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">  vector&lt;set&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt;&gt; manhatten; <span class=\"comment\">// [i] 表示距离为i的点的集合</span></span><br><span class=\"line\">  vector&lt;<span class=\"type\">int</span>&gt; max_x_sub_y;</span><br><span class=\"line\">  vector&lt;<span class=\"type\">int</span>&gt; min_x_sub_y;</span><br><span class=\"line\">  vector&lt;<span class=\"type\">int</span>&gt; max_x_add_y;</span><br><span class=\"line\">  vector&lt;<span class=\"type\">int</span>&gt; min_x_add_y;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">bfs</span><span class=\"params\">(vector&lt;string&gt; &amp;grids, <span class=\"type\">int</span> R, <span class=\"type\">int</span> C)</span> </span>&#123;</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">bool</span>&gt;&gt; <span class=\"built_in\">visited</span>(R, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">bool</span>&gt;(C, <span class=\"literal\">false</span>));</span><br><span class=\"line\">    queue&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; q;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; R; ++i) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; C; ++j) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (grids[i][j] == <span class=\"string\">&#x27;1&#x27;</span>) &#123;</span><br><span class=\"line\">          visited[i][j] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">          q.<span class=\"built_in\">push</span>(&#123;i, j&#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> level = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> s = q.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; s; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> current = q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        manhatten[level].<span class=\"built_in\">insert</span>(current);</span><br><span class=\"line\">        q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        vector&lt;<span class=\"type\">int</span>&gt; di = &#123;<span class=\"number\">-1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        vector&lt;<span class=\"type\">int</span>&gt; dj = &#123;<span class=\"number\">0</span>, <span class=\"number\">-1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">4</span>; ++k) &#123;</span><br><span class=\"line\">          <span class=\"type\">int</span> ni = current.first + di[k];</span><br><span class=\"line\">          <span class=\"type\">int</span> nj = current.second + dj[k];</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (ni &gt;= <span class=\"number\">0</span> &amp;&amp; ni &lt; R &amp;&amp; nj &gt;= <span class=\"number\">0</span> &amp;&amp; nj &lt; C &amp;&amp;</span><br><span class=\"line\">              visited[ni][nj] == <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">            visited[ni][nj] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            q.<span class=\"built_in\">push</span>(&#123;ni, nj&#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      ++level;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">possible</span><span class=\"params\">(vector&lt;string&gt; &amp;grids, <span class=\"type\">int</span> K, <span class=\"type\">int</span> R, <span class=\"type\">int</span> C)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> grids_count_larger_than_K =</span><br><span class=\"line\">        <span class=\"built_in\">accumulate</span>(manhatten.<span class=\"built_in\">cbegin</span>() + K + <span class=\"number\">1</span>, manhatten.<span class=\"built_in\">cend</span>(), <span class=\"number\">0</span>,</span><br><span class=\"line\">                   [](<span class=\"type\">const</span> <span class=\"keyword\">auto</span> &amp;lhs, <span class=\"type\">const</span> <span class=\"keyword\">auto</span> &amp;rhs) -&gt; <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">                     <span class=\"keyword\">return</span> lhs + rhs.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">                   &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (grids_count_larger_than_K == <span class=\"number\">0</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> max_x_sub_y_K =</span><br><span class=\"line\">        *<span class=\"built_in\">max_element</span>(max_x_sub_y.<span class=\"built_in\">cbegin</span>() + K + <span class=\"number\">1</span>, max_x_sub_y.<span class=\"built_in\">cend</span>());</span><br><span class=\"line\">    <span class=\"type\">int</span> min_x_sub_y_K =</span><br><span class=\"line\">        *<span class=\"built_in\">min_element</span>(min_x_sub_y.<span class=\"built_in\">cbegin</span>() + K + <span class=\"number\">1</span>, min_x_sub_y.<span class=\"built_in\">cend</span>());</span><br><span class=\"line\">    <span class=\"type\">int</span> max_x_add_y_K =</span><br><span class=\"line\">        *<span class=\"built_in\">max_element</span>(max_x_add_y.<span class=\"built_in\">cbegin</span>() + K + <span class=\"number\">1</span>, max_x_add_y.<span class=\"built_in\">cend</span>());</span><br><span class=\"line\">    <span class=\"type\">int</span> min_x_add_y_K =</span><br><span class=\"line\">        *<span class=\"built_in\">min_element</span>(min_x_add_y.<span class=\"built_in\">cbegin</span>() + K + <span class=\"number\">1</span>, min_x_add_y.<span class=\"built_in\">cend</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; R; ++i) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; C; ++j) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (grids[i][j] == <span class=\"string\">&#x27;0&#x27;</span>) &#123;</span><br><span class=\"line\">          <span class=\"type\">int</span> distance = numeric_limits&lt;<span class=\"type\">int</span>&gt;::<span class=\"built_in\">min</span>();</span><br><span class=\"line\">          distance = <span class=\"built_in\">max</span>(distance, <span class=\"built_in\">abs</span>(i - j - max_x_sub_y_K));</span><br><span class=\"line\">          distance = <span class=\"built_in\">max</span>(distance, <span class=\"built_in\">abs</span>(i - j - min_x_sub_y_K));</span><br><span class=\"line\">          distance = <span class=\"built_in\">max</span>(distance, <span class=\"built_in\">abs</span>(i + j - max_x_add_y_K));</span><br><span class=\"line\">          distance = <span class=\"built_in\">max</span>(distance, <span class=\"built_in\">abs</span>(i + j - min_x_add_y_K));</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (distance &lt;= K)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">solution</span><span class=\"params\">(vector&lt;string&gt; &amp;grids, <span class=\"type\">int</span> R, <span class=\"type\">int</span> C)</span> </span>&#123;</span><br><span class=\"line\">    manhatten.<span class=\"built_in\">resize</span>(R + C);</span><br><span class=\"line\">    <span class=\"built_in\">bfs</span>(grids, R, C);</span><br><span class=\"line\">    max_x_sub_y.<span class=\"built_in\">resize</span>(R + C);</span><br><span class=\"line\">    min_x_sub_y.<span class=\"built_in\">resize</span>(R + C);</span><br><span class=\"line\">    max_x_add_y.<span class=\"built_in\">resize</span>(R + C);</span><br><span class=\"line\">    min_x_add_y.<span class=\"built_in\">resize</span>(R + C);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; manhatten.<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">      max_x_sub_y[i] = numeric_limits&lt;<span class=\"type\">int</span>&gt;::<span class=\"built_in\">min</span>();</span><br><span class=\"line\">      min_x_sub_y[i] = numeric_limits&lt;<span class=\"type\">int</span>&gt;::<span class=\"built_in\">max</span>();</span><br><span class=\"line\">      max_x_add_y[i] = numeric_limits&lt;<span class=\"type\">int</span>&gt;::<span class=\"built_in\">min</span>();</span><br><span class=\"line\">      min_x_add_y[i] = numeric_limits&lt;<span class=\"type\">int</span>&gt;::<span class=\"built_in\">max</span>();</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">const</span> <span class=\"keyword\">auto</span> &amp;point : manhatten[i]) &#123;</span><br><span class=\"line\">        max_x_sub_y[i] = <span class=\"built_in\">max</span>(max_x_sub_y[i], point.first - point.second);</span><br><span class=\"line\">        min_x_sub_y[i] = <span class=\"built_in\">min</span>(min_x_sub_y[i], point.first - point.second);</span><br><span class=\"line\">        max_x_add_y[i] = <span class=\"built_in\">max</span>(max_x_add_y[i], point.first + point.second);</span><br><span class=\"line\">        min_x_add_y[i] = <span class=\"built_in\">min</span>(min_x_add_y[i], point.first + point.second);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> lo = <span class=\"number\">0</span>, hi = R + C;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> binary = [&amp;grids, R, C, <span class=\"keyword\">this</span>](<span class=\"type\">int</span> K) -&gt; <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">possible</span>(grids, K, R, C);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// [lo, hi)</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (lo &lt; hi) &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> mid = lo + (hi - lo) / <span class=\"number\">2</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"built_in\">binary</span>(mid)) &#123;</span><br><span class=\"line\">        lo = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        hi = mid;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> lo;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> T;</span><br><span class=\"line\">  cin &gt;&gt; T;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; T; i++) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> R, C;</span><br><span class=\"line\">    cin &gt;&gt; R &gt;&gt; C;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;string&gt; <span class=\"title\">grids</span><span class=\"params\">(R)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; R; j++) &#123;</span><br><span class=\"line\">      cin &gt;&gt; grids[j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Case #&quot;</span> &lt;&lt; i + <span class=\"number\">1</span> &lt;&lt; <span class=\"string\">&quot;: &quot;</span> &lt;&lt; <span class=\"built_in\">Solution</span>().<span class=\"built_in\">solution</span>(grids, R, C)</span><br><span class=\"line\">         &lt;&lt; endl;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<!-- \n进一步优化到O(RC)。在第2步中，我们可以计算得到所有格子的最大最小值。然后，遍历所有可能的格子，得到最大邮局的位置和距离。 -->\n<h2 id=\"3-contention\"><a class=\"markdownIt-Anchor\" href=\"#3-contention\"></a> 3. Contention</h2>\n<p>题意：<br />\n给定Q个Bookings，N个seats, 每个booking用L和R表示，意思是索取从L到R的座位，包括L和R。<br />\n后面的booking，如果前面的座位被占用的话，就只占用可以占用的那些座位。<br />\n求一个最大的K，使得存在一个Bookings的序列。每个Booking都被满足最少K个座位。</p>\n<p>数据范围: Q 30000, N 10^6</p>\n<p>官方分析：</p>\n<p>观测有：给定一个booking序列，最后一个booking可以获得的seats数不依赖于前面的booking的顺序。<br />\n所以，我们可以每次确定最后一个booking，然后不断向前挪。答案是Q步中，最小的座位预定数。</p>\n<p>另一个观察：每次向前挪的时候，我们可以从剩余的booking中贪心地选择最后一个请求：选择那个我们可以获得最多seats的请求。贪心的直觉证明是：最后的答案在向前挪的时候是非递增的。</p>\n<p>该题难度还是很大的，赛中只有2人做出来。我花了半天也还是无法很好地理解。所以题解暂时搁置了。</p>\n",
            "tags": [
                "Competitive Programming"
            ]
        }
    ]
}