{
    "version": "https://jsonfeed.org/version/1",
    "title": "YoungForest's blog • All posts by \"intern\" category",
    "description": "佛系更新；生活、学习",
    "home_page_url": "https://youngforest.github.io",
    "items": [
        {
            "id": "https://youngforest.github.io/2018/05/07/Advanced-SQL-practice/",
            "url": "https://youngforest.github.io/2018/05/07/Advanced-SQL-practice/",
            "title": "SQL实践进阶",
            "date_published": "2018-05-07T22:30:25.000Z",
            "content_html": "<p>这一周在公司写了很多很长功能很复杂的sql语句，深感自己的数据库和SQL学的还只是皮毛，完全没法满足工程上的要求。<br />\n负责带我的二mentor对SQL比较也精通，对我有很多指导和建议。<br />\n没有对比就没有伤害，自己的菜和师兄的强让我知耻而后勇，有了进阶SQL的想法和行动。</p>\n<span id=\"more\"></span>\n<p>我被推荐的2份教程（感谢快手师兄和二mentor）：</p>\n<ul>\n<li>sql必知必会</li>\n<li><a href=\"http://www.runoob.com/sql/sql-constraints.html\">runoob</a></li>\n</ul>\n<p>其中《sql必知必会》我系统的看过一遍，runoob教程只是大致浏览一遍。<br />\n我认为只看一个教程就够了。<br />\nrunoob的优点是可以在网站提供的线上数据库进行测试和练习，这一点和<a href=\"https://www.w3schools.com/sql/\">w3school的教程</a>有些像。<br />\n《sql必知必会》的优点是内容比较多，作者会传授一些写sql的经验，还会涉及到不同数据库的移植性和区别。</p>\n<p><a href=\"https://leetcode.com/problemset/database/\">leetcode上有42道Database的面试题目</a>，有时间一定要刷一刷。</p>\n<h1 id=\"实践中遇到的问题\"><a class=\"markdownIt-Anchor\" href=\"#实践中遇到的问题\"></a> 实践中遇到的问题</h1>\n<p>由于我的岗位是推荐组的算法工程师，有大量的数据挖掘的需要。<br />\n而且写的不是纯sql，而是<a href=\"https://cwiki.apache.org/confluence/display/Hive/Home\">Hive</a>-sql。<br />\nHive上存在很多限制和挑战，比如不能在select中嵌套select子句，<code>select 2 * (select 3);</code>就是不可以的（最后摸索出得解决方案是：使用聚集函数或列之间的可计算进行需要的计算，这就很考验<code>union</code>或<code>join</code>的灵活使用了。）；数据量特别大，每次查询很耗时（学会了用小的查询验证想法，从内到外层层验证，还有在‘jupyter notebook’上进行查询和计算）。</p>\n<h1 id=\"回答面试中的问题\"><a class=\"markdownIt-Anchor\" href=\"#回答面试中的问题\"></a> 回答面试中的问题</h1>\n<p>一面的小哥哥当时问我：你会SQL吗？</p>\n<p>我：会，而且我之前还有在数据库公司的实习经历。</p>\n<p>小哥哥：那你说说‘left join’，‘right join’，'inner join’的区别。</p>\n<p>我：不知道…</p>\n<p>小哥哥：那你知道partition吗？</p>\n<p>我：这个我也不知道。</p>\n<p>小哥哥：你会的SQL仅限于上过的“数据库原理”和“课程设计”课吗？</p>\n<p>我：是的，而且因为一段时间不用有些生疏了。</p>\n<p>小哥哥就没再问SQL相关的内容了。</p>\n<p>经过一周的工作和SQL的重新系统学习，我现在可以回答这两个问题了。</p>\n<h3 id=\"left-joinright-joininner-join的区别\"><a class=\"markdownIt-Anchor\" href=\"#left-joinright-joininner-join的区别\"></a> ‘left join’，‘right join’，'inner join’的区别</h3>\n<p>'inner join’即内联结，对于不匹配的项，不存在于联结结果中；‘left join’，左外联结，如果左边的项在右边的表中没有匹配项，仍存在一条记录于联结结果中，此时右边表列均为NULL；‘right join’，右联结与之类似。事实上，'left join’和’right join’可以互换，只是联结的左右两表也需要互换位置。</p>\n<h3 id=\"partition的概念\"><a class=\"markdownIt-Anchor\" href=\"#partition的概念\"></a> partition的概念</h3>\n<p>partion是为了加快查询速度，而将一个表分成不同的区。<br />\n限制是，select时，被partition的列必须写在where里作为filter。</p>\n",
            "tags": [
                "tech",
                "kuaishou"
            ]
        }
    ]
}