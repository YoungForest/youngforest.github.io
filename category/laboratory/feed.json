{
    "version": "https://jsonfeed.org/version/1",
    "title": "YoungForest's blog • All posts by \"laboratory\" category",
    "description": "佛系更新；生活、学习",
    "home_page_url": "https://youngforest.github.io",
    "items": [
        {
            "id": "https://youngforest.github.io/2017/01/14/pressure-test-to-CPU-memory-disk-network-IO/",
            "url": "https://youngforest.github.io/2017/01/14/pressure-test-to-CPU-memory-disk-network-IO/",
            "title": "对CPU 内存 硬盘读写 网络 进行压力测试",
            "date_published": "2017-01-14T12:39:23.000Z",
            "content_html": "<p>近来实验室的师兄有个需求, 写4个小程序, 分别对内存, CPU, 硬盘, 网络进行压力测试, 要求测试程序有压力档位可以调, 比如压力可以分为大, 中, 小. 二话不说, 撸起袖子加油干. 需求很简单, 但实现起来却并不简单, 笔者边学习, 边写程序, 才勉强完成任务.</p>\n<span id=\"more\"></span>\n<h2 id=\"测试环境\"><a class=\"markdownIt-Anchor\" href=\"#测试环境\"></a> 测试环境</h2>\n<p>Ubuntu 14.04</p>\n<h2 id=\"cpu\"><a class=\"markdownIt-Anchor\" href=\"#cpu\"></a> CPU</h2>\n<p>受<a href=\"https://book.douban.com/subject/3004255/\">编程之美</a>的第一章&quot;让CPU占有率曲线听你指挥&quot;启发, 我很快地完成了对CPU的压力测试程序.</p>\n<h4 id=\"基本思路\"><a class=\"markdownIt-Anchor\" href=\"#基本思路\"></a> 基本思路</h4>\n<p>确定一个小周期, 笔者的周期设置为100, 这个值可以通过改变PIECE的值来改变, 周期为 100 * PIECE.</p>\n<p>在每个周期中, stress%的时间用于一个死循环, 剩下 (100-stress)%的时间usleep(注意sleep和usleep的区别).</p>\n<h4 id=\"程序源代码\"><a class=\"markdownIt-Anchor\" href=\"#程序源代码\"></a> 程序源代码</h4>\n<script src=\"https://gist.github.com/YoungForest/04080ae9ad932aa1fd7211c05e93b197.js\"></script>\n<h4 id=\"使用方法\"><a class=\"markdownIt-Anchor\" href=\"#使用方法\"></a> 使用方法</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ 程序名 stress    <span class=\"comment\"># 其中 0&lt;=stress&lt;=100</span></span><br><span class=\"line\">$ <span class=\"comment\"># 例子</span></span><br><span class=\"line\">$ gcc cpu_benchmark.c -o cpu_benchmark.out</span><br><span class=\"line\">$ cpu_benchmark.out 50</span><br></pre></td></tr></table></figure>\n<h2 id=\"硬盘读写\"><a class=\"markdownIt-Anchor\" href=\"#硬盘读写\"></a> 硬盘读写</h2>\n<p>对硬盘进行读写的压力测试, 我是分别通过两个程序实现的.</p>\n<h3 id=\"硬盘读操作\"><a class=\"markdownIt-Anchor\" href=\"#硬盘读操作\"></a> 硬盘读操作</h3>\n<h4 id=\"基本思路-2\"><a class=\"markdownIt-Anchor\" href=\"#基本思路-2\"></a> 基本思路</h4>\n<p>与CPU的压力测试类似, 在一个周期(1s)里, 先从硬盘里读取特定大小(speed)的数据, 周期的剩余时间sleep.</p>\n<h4 id=\"程序源代码-2\"><a class=\"markdownIt-Anchor\" href=\"#程序源代码-2\"></a> 程序源代码</h4>\n<script src=\"https://gist.github.com/YoungForest/9faaa24df53b3e78d27c18155ee26384.js\"></script>\n<h4 id=\"使用方法-2\"><a class=\"markdownIt-Anchor\" href=\"#使用方法-2\"></a> 使用方法</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python3 disk_read.py 硬盘名 level    <span class=\"comment\"># 其中level可以是0, 1, 2, 3</span></span><br><span class=\"line\">$ <span class=\"comment\"># 例子</span></span><br><span class=\"line\">$ python3 disk_read.py /dev/vda 2</span><br></pre></td></tr></table></figure>\n<h3 id=\"硬盘写操作\"><a class=\"markdownIt-Anchor\" href=\"#硬盘写操作\"></a> 硬盘写操作</h3>\n<h4 id=\"基本思想\"><a class=\"markdownIt-Anchor\" href=\"#基本思想\"></a> 基本思想</h4>\n<p>硬盘写操作的压力测试与读操作类似. 在一个周期内(1s)向一个文件中写入特定大小的数据, 之后删掉, 在周期的剩余时间内sleep.</p>\n<p>为了向文件中写数据, 笔者使用了命令<br />\n<code>dd if=/dev/zero of=/path/to/targetfile bs=1024k count=speed conv=fdatasync &gt; /dev/null 2&gt; /dev/null</code>.<br />\n该命令从/dev/zero中读取数据(其实是无效数据, /dev/zero 经常被作为初始化文件的数据源), 写入到/path/to/targetfile中. 为了不使<code>dd</code>产生的错误输出和标准输出影响本程序的可读性, 使用重定向了. /dev/null 是一个黑洞设备, 可以向其输入任何数据而不会产生坏的影响.</p>\n<h4 id=\"程序源代码-3\"><a class=\"markdownIt-Anchor\" href=\"#程序源代码-3\"></a> 程序源代码</h4>\n<script src=\"https://gist.github.com/YoungForest/0b3fdfbe15821b32991d9d48a9122290.js\"></script>\n<h4 id=\"使用方法-3\"><a class=\"markdownIt-Anchor\" href=\"#使用方法-3\"></a> 使用方法</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python3 disk_write.py 硬盘名 level    <span class=\"comment\"># 其中level可以是0, 1, 2, 3</span></span><br><span class=\"line\">$ <span class=\"comment\"># 例子</span></span><br><span class=\"line\">$ python3 disk_write.py /dev/vda 2</span><br></pre></td></tr></table></figure>\n<h2 id=\"内存\"><a class=\"markdownIt-Anchor\" href=\"#内存\"></a> 内存</h2>\n<h4 id=\"基本思想-2\"><a class=\"markdownIt-Anchor\" href=\"#基本思想-2\"></a> 基本思想</h4>\n<p>对内存的测试, 笔者的师兄向笔者介绍了<a href=\"https://linux.die.net/man/8/memtester\"><code>memtester</code></a>这个程序. 具体安装及使用方法:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"comment\"># 安装</span></span><br><span class=\"line\">$ sudo apt-get install memtester</span><br><span class=\"line\">$ <span class=\"comment\"># 从PHYSADDR处分配MEMORY大小的内存, 测试ITERATIONS次.</span></span><br><span class=\"line\">$ sudo memtester [-p PHYSADDR] &lt;MEMORY&gt; [ITERATIONS]</span><br></pre></td></tr></table></figure>\n<p>一般情况下, 不需要指定PHYSADDR, 因为可能将其他进程占用的内存破坏掉, 存在一定的危险性.</p>\n<p>利用<code>memtester</code>这个程序, 笔者进行简单加工, 就完成了需求.</p>\n<h4 id=\"程序源代码-4\"><a class=\"markdownIt-Anchor\" href=\"#程序源代码-4\"></a> 程序源代码</h4>\n<script src=\"https://gist.github.com/YoungForest/73875763467c9cd1eeccad3496a18398.js\"></script>\n<h4 id=\"使用方法-4\"><a class=\"markdownIt-Anchor\" href=\"#使用方法-4\"></a> 使用方法</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python3 memory_benchmark.py &lt;MEMORY&gt; [ITERATIONS]</span><br><span class=\"line\">$ <span class=\"comment\"># 例子</span></span><br><span class=\"line\">$ python3 memory_benchmark.py 3m 10</span><br><span class=\"line\">$ python3 memory_benchmark.py 2m </span><br></pre></td></tr></table></figure>\n<h2 id=\"网络\"><a class=\"markdownIt-Anchor\" href=\"#网络\"></a> 网络</h2>\n<p>师兄的需求是需要公网压力测试, 查找了很多资料, 大多数工具都是测网速的, 而不是可以指定上下行速率进行测试. 幸运的是, 找了几天之后, 终于找到一个工具<code>iperf</code>可以勉强完成任务.</p>\n<h4 id=\"基本思路-3\"><a class=\"markdownIt-Anchor\" href=\"#基本思路-3\"></a> 基本思路</h4>\n<p>一台机器作为服务器, 另一台机器作为客户端, 客户端向服务器发包, 服务器接受, 连接使用UDP连接. 这也就是说, 如果没有服务器的话, 客户端仍然可以对网络上行进行压力测试; 但没有客户端, 服务器则没法对网络下行进行压力测试. 简单地说, 服务器(下行)是被动的, 客户端(上行)是主动的, 没人收包仍然可以狂发包, 但没人发包, 无论如何是收不到包的.</p>\n<h4 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\"></a> 安装</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install iperf</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用方法-5\"><a class=\"markdownIt-Anchor\" href=\"#使用方法-5\"></a> 使用方法</h4>\n<h5 id=\"服务器\"><a class=\"markdownIt-Anchor\" href=\"#服务器\"></a> 服务器</h5>\n<p>启动服务器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ iperf -s</span><br></pre></td></tr></table></figure>\n<h5 id=\"客户端\"><a class=\"markdownIt-Anchor\" href=\"#客户端\"></a> 客户端</h5>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ iperf -c 服务器ip -b 压力值</span><br><span class=\"line\">$ <span class=\"comment\"># 比如:</span></span><br><span class=\"line\">$ iperf -c 123.206.61.77 -b 11m</span><br></pre></td></tr></table></figure>\n<h4 id=\"参考\"><a class=\"markdownIt-Anchor\" href=\"#参考\"></a> 参考</h4>\n<p><a href=\"http://www.binarytides.com/linux-commands-monitor-network/\">Linux下如何监控网络</a><br />\n<a href=\"https://www.linux.com/learn/five-funny-little-linux-network-testers-and-monitors\">Linux网络测试和监控</a><br />\n<a href=\"http://tuxtweaks.com/2014/11/linux-network-speed-test/?utm_source=tuicool&amp;utm_medium=referral\">[Linux] 局域网中测试网速</a></p>\n",
            "tags": [
                "benchmark"
            ]
        }
    ]
}