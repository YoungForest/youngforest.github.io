{
    "version": "https://jsonfeed.org/version/1",
    "title": "YoungForest's blog • All posts by \"tech\" category",
    "description": "佛系更新；生活、学习",
    "home_page_url": "https://youngforest.github.io",
    "items": [
        {
            "id": "https://youngforest.github.io/2021/02/27/build-qBittorrent/",
            "url": "https://youngforest.github.io/2021/02/27/build-qBittorrent/",
            "title": "MAC 手动编译 build qBittorrent",
            "date_published": "2021-02-27T09:10:01.000Z",
            "content_html": "<h2 id=\"起因\"><a class=\"markdownIt-Anchor\" href=\"#起因\"></a> 起因</h2>\n<p>最近毕业压力比较大，想在北邮人上下载个电影看看，放松下。却发现一直使用的做种下载工具qBittorrent无法打开了。在网上寻找了半天原因和解决方案。</p>\n<p>最终确认是MAC更新的锅，qBittorrent 属于认证不完整的应用：<a href=\"https://github.com/qbittorrent/qBittorrent/issues/11570\">Issue 11570</a>。<br />\n解决方案有二：</p>\n<ul>\n<li>禁掉APPLE的安全检查</li>\n<li>自己手动编译一遍应用</li>\n</ul>\n<p>由于某些原因，我无法对MAC做过多的系统更改。只好尝试第二个解决方案。事实证明，手动编译qBittorrent并不简单，一下午就此度过，电影也不用看了。为方便有相同问题的同学参考，我记录我的解决方案于此。因为在我编译构建过程中，网上并没有类似的教程或是参考，而且确实有不少坑。</p>\n<h2 id=\"步骤\"><a class=\"markdownIt-Anchor\" href=\"#步骤\"></a> 步骤</h2>\n<p>如果之前没有QT环境，<code>./configure</code>会报找不到<code>qmake</code>的错误。需要配置相应的环境。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install qt</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;export PATH=&quot;/usr/local/opt/qt/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"string\">&quot;/usr/local/opt/qt/bin:<span class=\"variable\">$PATH</span>&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> LDFLAGS=<span class=\"string\">&quot;-L/usr/local/opt/qt/lib&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CPPFLAGS=<span class=\"string\">&quot;-I/usr/local/opt/qt/include&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PKG_CONFIG_PATH=<span class=\"string\">&quot;/usr/local/opt/qt/lib/pkgconfig</span></span><br></pre></td></tr></table></figure>\n<p>如果之前没有<code>boost</code>环境，会报找不到<code>boostlib</code>的错误：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">checking <span class=\"keyword\">for</span> boostlib &gt;= 1.65 (106500)... configure: We could not detect the boost libraries (version 1.65 or higher). If you have a staged boost library (still not installed) please specify <span class=\"variable\">$BOOST_ROOT</span> <span class=\"keyword\">in</span> your environment and <span class=\"keyword\">do</span> not give a PATH to --with-boost option.  If you are sure you have boost installed, <span class=\"keyword\">then</span> check your version number looking <span class=\"keyword\">in</span> &lt;boost/version.hpp&gt;. See http://randspringer.de/boost <span class=\"keyword\">for</span> more documentation.</span><br><span class=\"line\">configure: error: Could not find Boost</span><br></pre></td></tr></table></figure>\n<p>需要安装<code>boost</code>环境。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install boost</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install libtorrent-rasterbar</span><br></pre></td></tr></table></figure>\n<p>如果遇到报错，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error: Directory not empty @ dir_s_rmdir - /usr/local/opt/openssl</span><br></pre></td></tr></table></figure>\n<p>可以删掉对应文件夹或是更改其所有人<code>chown</code>.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew cleanup</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">rm</span> -rf /usr/local/Cellar/openssl/1.0.2q</span><br></pre></td></tr></table></figure>\n<p>在我<code>brew install libtorrent-rasterbar</code>后再<code>./configure</code>时，仍然会发生该库版本不对的问题：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Requested <span class=\"string\">&#x27;libtorrent-rasterbar &gt;= 1.2.11&#x27;</span> but version of libtorrent-rasterbar is 1.2.10</span><br></pre></td></tr></table></figure>\n<p>因为<code>brew</code>的formula中只有1.2.10，我们只好手动编译一个新版了。</p>\n<p>去github找到libtorrent-rasterbar对应版本的源码：<a href=\"https://github.com/arvidn/libtorrent/releases/tag/v1.2.11\">download</a>。按照文档中的构建说明编译安装即可。</p>\n<p>对于MAC来说：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install boost-build boost openssl@1.1</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;using darwin ;&quot;</span> &gt;&gt;~/user-config.jam</span><br><span class=\"line\">b2 crypto=openssl cxxstd=17 openssl-lib=/usr/local/Cellar/openssl@1.1/1.1.1j/lib openssl-include=/usr/local/Cellar/openssl@1.1/1.1.1j/include release</span><br><span class=\"line\">b2 crypto=openssl cxxstd=17 openssl-lib=/usr/local/Cellar/openssl@1.1/1.1.1j/lib openssl-include=/usr/local/Cellar/openssl@1.1/1.1.1j/include install --prefix=/usr/local</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> libtorrent_LIBS=<span class=\"string\">&quot;-L/usr/local/lib&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> libtorrent_CFLAGS=<span class=\"string\">&quot;-I/usr/local/include&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> openssl_CFLAGS=<span class=\"string\">&quot;-I/usr/local/Cellar/openssl@1.1/1.1.1j/include&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> openssl_LIBS=<span class=\"string\">&quot;-L/usr/local/Cellar/openssl@1.1/1.1.1j/lib&quot;</span></span><br><span class=\"line\">./configure</span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\">qbittorrent</span><br></pre></td></tr></table></figure>\n<!-- ```bash\nUndefined symbols for architecture x86_64:\n  \"_EVP_sha512\"\n``` -->\n<p>除此之外，你还可以参考<a href=\"https://github.com/qbittorrent/qBittorrent/wiki#compilation\">官网的另外一些编译构建文档</a>. 这里提供了使用CMake或QT Creator的编译方案。</p>\n",
            "tags": [
                "折腾"
            ]
        },
        {
            "id": "https://youngforest.github.io/2019/11/11/mac-write-ntfs-solution/",
            "url": "https://youngforest.github.io/2019/11/11/mac-write-ntfs-solution/",
            "title": "Mac OS写入ntfs解决方案",
            "date_published": "2019-11-11T02:10:44.000Z",
            "content_html": "<p>使用Mac系统确实存在一些不方便的地方，比如 写入 NTFS的硬盘或U盘。默认情况下，MAC 只支持读取NTFS。不过只要你有勇气折腾，解决方案还是很简单的。</p>\n<h2 id=\"最推荐方法\"><a class=\"markdownIt-Anchor\" href=\"#最推荐方法\"></a> 最推荐方法</h2>\n<p><a href=\"https://mounty.app/\">Mounty for NTFS</a></p>\n<p>优点：免费，小巧<br />\n缺点：不hack，其实就是命令行的包装。有些同学可能更喜欢命令行的方式。</p>\n<h2 id=\"最hack的方法\"><a class=\"markdownIt-Anchor\" href=\"#最hack的方法\"></a> 最hack的方法</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> umount <span class=\"string\">&quot;/Volumes/Seagate Expansion Drive&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> mount -t ntfs -o rw,auto,nobrowse /dev/disk3s1 ~/ntfs-volume</span><br></pre></td></tr></table></figure>\n<p>reference: <a href=\"https://mounty.app/\">mounty</a></p>\n<p>经过一段时间的斗争，我还是采用了安装第三方应用的推荐方法。因为命令行确实经常忘记或是输错，每次都要重新Google，与我使用Mac系统想要的优雅方便不符。</p>\n",
            "tags": [
                "Mac"
            ]
        }
    ]
}