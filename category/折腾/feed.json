{
    "version": "https://jsonfeed.org/version/1",
    "title": "YoungForest's blog • All posts by \"折腾\" category",
    "description": "佛系更新；生活、学习",
    "home_page_url": "https://youngforest.github.io",
    "items": [
        {
            "id": "https://youngforest.github.io/2021/10/13/Niz-plum-option-key-not-work/",
            "url": "https://youngforest.github.io/2021/10/13/Niz-plum-option-key-not-work/",
            "title": "Niz plum option key 在蓝牙模式下不响应",
            "date_published": "2021-10-13T04:39:31.000Z",
            "content_html": "<p>最近使用我心爱的Niz Plum 66键盘时遇到一个奇怪的bug。<br />\n在蓝牙模式下，左option键失灵。因为我hammerspoon和其他应用的快捷键大量使用，虽然偶尔可以通过右option键短暂替代。但总不是回事儿，工作效率大幅降低。</p>\n<p>这个bug的引入我也不确定是如何来的。大概是我Mac开始连2个外界显示器开始的。<br />\n奇怪的是，有线模式并没有问题。而且我试过蓝牙断开重连也并没有修复。换个蓝牙通道也无济于事。</p>\n<p>我在网络上进行了大量的搜索，并没有找到类似的问题和解决方案。最终还是在自己的不断摸索下成功修复了。因此记录下来，以防止未来再次遇到。</p>\n<p><a href=\"http://yunxii.cn/2019/08/12/plum%E9%9D%99%E7%94%B5%E5%AE%B9%E9%94%AE%E7%9B%9866%E9%94%AE%E8%AF%B4%E6%98%8E%E4%B9%A6/\">参考说明书</a>.</p>\n<ol>\n<li>恢复出厂设置: 同时按住键盘四角的四个键5秒钟。</li>\n<li>键盘开机，连接Mac。</li>\n<li>重新配置键盘设置, 如我的如下:\n<ul>\n<li>Fn + Command 从默认的Windows键位切换回Mac</li>\n<li>Fn + ] 降低按键延迟</li>\n<li>Fn + 右Shift 将右shift转成<code>shift</code>而非默认的 Up</li>\n</ul>\n</li>\n<li>左Option键已成功修复。</li>\n</ol>\n<p>敬请享受自己的键盘吧！</p>\n",
            "tags": [
                "键盘"
            ]
        },
        {
            "id": "https://youngforest.github.io/2021/09/07/Setup-English-blog/",
            "url": "https://youngforest.github.io/2021/09/07/Setup-English-blog/",
            "title": "Hexo 创建中英文博客",
            "date_published": "2021-09-07T09:50:49.000Z",
            "content_html": "<p>自从来到亚马逊工作，接触英文和外国同事比较多。锻炼使用英语的需求越来越大。而且为了和国际接轨，我决定创建自己的英文博客。</p>\n<h2 id=\"步骤\"><a class=\"markdownIt-Anchor\" href=\"#步骤\"></a> 步骤</h2>\n<p>以中文博客为模版，创建英文博客。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cp</span> -r Hexo HexoEn</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>删除HexoEn中没用的中文博文和资源。</p>\n<p>在Github创建一个新repo：“en”.</p>\n<p>修改HexoEn <code>_config.yml</code>配置文件。注意部署分支为<code>gh-pages</code>, 这个GitHub默认的pages分支，如果不同的话，需要去repo的<code>Setting-&gt;Pages</code>配置一下你自定义的分支:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">language:</span> </span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">en</span></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">git@github.com:YoungForest/en.git</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">gh-pages</span></span><br><span class=\"line\"><span class=\"attr\">theme_config:</span></span><br><span class=\"line\">  <span class=\"attr\">menu:</span></span><br><span class=\"line\">    <span class=\"attr\">home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-home</span></span><br><span class=\"line\">    <span class=\"attr\">about:</span> <span class=\"string\">/about/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-user</span></span><br><span class=\"line\">    <span class=\"attr\">tags:</span> <span class=\"string\">/tags/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-tags</span></span><br><span class=\"line\">    <span class=\"attr\">categories:</span> <span class=\"string\">/categories/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-th</span></span><br><span class=\"line\">    <span class=\"attr\">archives:</span> <span class=\"string\">/archives/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-archive</span></span><br><span class=\"line\">    <span class=\"string\">中文:</span> <span class=\"string\">https://youngforest.github.io</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-language</span> <span class=\"comment\"># 图标可以去该网站搜索：https://fontawesome.com/v4.7/icons/</span></span><br></pre></td></tr></table></figure>\n<p>中文Hexo <code>_config.yml</code>配置文件:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">language:</span> </span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">zh-CN</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">en</span></span><br><span class=\"line\"><span class=\"attr\">theme_config:</span></span><br><span class=\"line\">  <span class=\"attr\">menu:</span></span><br><span class=\"line\">    <span class=\"attr\">home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-home</span></span><br><span class=\"line\">    <span class=\"attr\">about:</span> <span class=\"string\">/about/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-user</span></span><br><span class=\"line\">    <span class=\"attr\">tags:</span> <span class=\"string\">/tags/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-tags</span></span><br><span class=\"line\">    <span class=\"attr\">categories:</span> <span class=\"string\">/categories/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-th</span></span><br><span class=\"line\">    <span class=\"attr\">archives:</span> <span class=\"string\">/archives/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-archive</span></span><br><span class=\"line\">    <span class=\"attr\">English:</span> <span class=\"string\">https://youngforest.github.io/en/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-globe</span></span><br></pre></td></tr></table></figure>\n<p>这样中英文博客就可以在Menu互相外链了。</p>\n<p>部署博客，看看效果如何。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate -d</span><br></pre></td></tr></table></figure>\n<p>把HexoEn也推到远端，做保存和同步。注意，这里和deploy用的是同一个repo, 但是不同的分支。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote remove origin</span><br><span class=\"line\">git remote add origin git@github.com:YoungForest/en.git</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n<h2 id=\"最后的效果\"><a class=\"markdownIt-Anchor\" href=\"#最后的效果\"></a> 最后的效果</h2>\n<p>中文博客：<a href=\"https://youngforest.github.io\">https://youngforest.github.io</a><br />\n英文博客：<a href=\"https://youngforest.github.io/en/\">https://youngforest.github.io/en/</a></p>\n",
            "tags": [
                "Hexo"
            ]
        },
        {
            "id": "https://youngforest.github.io/2021/04/01/BUAA-daily-health-report/",
            "url": "https://youngforest.github.io/2021/04/01/BUAA-daily-health-report/",
            "title": "BUAA daily health report",
            "date_published": "2021-04-01T03:16:46.000Z",
            "content_html": "<p>Auto daily health report solution for BUAA.</p>\n<span id=\"more\"></span>\n<h2 id=\"报告脚本\"><a class=\"markdownIt-Anchor\" href=\"#报告脚本\"></a> 报告脚本</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;Accept&#x27;</span>: <span class=\"string\">&#x27;application/json, text/javascript, */*; q=0.01&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Accept-Encoding&#x27;</span>: <span class=\"string\">&#x27;gzip, deflate, br&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Accept-Language&#x27;</span>: <span class=\"string\">&#x27;zh-CN,zh;q=0.9,en;q=0.8&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;application/x-www-form-urlencoded; charset=UTF-8&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Host&#x27;</span>: <span class=\"string\">&#x27;app.buaa.edu.cn&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class=\"string\">&#x27;empty&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class=\"string\">&#x27;cors&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Sec-Fetch-Site&#x27;</span>: <span class=\"string\">&#x27;same-origin&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/80.0.3987.87 Chrome/80.0.3987.87 Safari/537.36&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;X-Requested-With&#x27;</span>: <span class=\"string\">&#x27;XMLHttpRequest&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">report</span>(<span class=\"params\">uesrname, password, dataform</span>):</span><br><span class=\"line\">    x = requests.session()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># login, fetch cookies</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(time.strftime(<span class=\"string\">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime()))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Logging in......&#x27;</span>)</span><br><span class=\"line\">    rep = x.post(</span><br><span class=\"line\">        <span class=\"string\">&#x27;https://app.buaa.edu.cn/uc/wap/login/check&#x27;</span>,</span><br><span class=\"line\">        data=&#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;username&#x27;</span>: uesrname,</span><br><span class=\"line\">            <span class=\"string\">&#x27;password&#x27;</span>: password </span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        headers=headers,</span><br><span class=\"line\">        timeout=<span class=\"number\">360</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(rep.text)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(rep.status_code)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Save report......&#x27;</span>)</span><br><span class=\"line\">    saveReport = x.post(</span><br><span class=\"line\">        <span class=\"string\">&#x27;https://app.buaa.edu.cn/buaaxsncov/wap/default/save&#x27;</span>,</span><br><span class=\"line\">        headers=headers,</span><br><span class=\"line\">        data = dataform</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(saveReport.text)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(saveReport.status_code)</span><br><span class=\"line\">    </span><br><span class=\"line\">content = <span class=\"string\">&#x27;sfzs=1&amp;bzxyy=&amp;bzxyy_other=&amp;brsfzc=1&amp;tw=&amp;sfcxzz=&amp;zdjg=&amp;zdjg_other=&amp;sfgl=&amp;gldd=&amp;gldd_other=&amp;glyy=&amp;glyy_other=&amp;gl_start=&amp;gl_end=&amp;sfmqjc=&amp;sfzc_14=1&amp;sfqw_14=0&amp;sfqw_14_remark=&amp;sfzgfx=0&amp;sfzgfx_remark=&amp;sfjc_14=0&amp;sfjc_14_remark=&amp;sfjcqz_14=0&amp;sfjcqz_14_remark=&amp;sfgtjz_14=0&amp;sfgtjz_14_remark=&amp;szsqqz=0&amp;sfyqk=&amp;szdd=1&amp;area=%E5%8C%97%E4%BA%AC%E5%B8%82%20%E6%B5%B7%E6%B7%80%E5%8C%BA&amp;city=%E5%8C%97%E4%BA%AC%E5%B8%82&amp;province=%E5%8C%97%E4%BA%AC%E5%B8%82&amp;address=%E5%8C%97%E4%BA%AC%E5%B8%82%E6%B5%B7%E6%B7%80%E5%8C%BA%E8%8A%B1%E5%9B%AD%E8%B7%AF%E8%A1%97%E9%81%93%E5%8C%97%E4%BA%AC%E8%88%AA%E7%A9%BA%E8%88%AA%E5%A4%A9%E5%A4%A7%E5%AD%A6%E5%8C%97%E4%BA%AC%E8%88%AA%E7%A9%BA%E8%88%AA%E5%A4%A9%E5%A4%A7%E5%AD%A6%E5%AD%A6%E9%99%A2%E8%B7%AF%E6%A0%A1%E5%8C%BA&amp;geo_api_info=%7B%22type%22%3A%22complete%22%2C%22position%22%3A%7B%22Q%22%3A39.980937228733%2C%22R%22%3A116.35092936197998%2C%22lng%22%3A116.350929%2C%22lat%22%3A39.980937%7D%2C%22location_type%22%3A%22html5%22%2C%22message%22%3A%22Get%20geolocation%20success.Convert%20Success.Get%20address%20success.%22%2C%22accuracy%22%3A29%2C%22isConverted%22%3Atrue%2C%22status%22%3A1%2C%22addressComponent%22%3A%7B%22citycode%22%3A%22010%22%2C%22adcode%22%3A%22110108%22%2C%22businessAreas%22%3A%5B%7B%22name%22%3A%22%E4%BA%94%E9%81%93%E5%8F%A3%22%2C%22id%22%3A%22110108%22%2C%22location%22%3A%7B%22Q%22%3A39.99118%2C%22R%22%3A116.34157800000003%2C%22lng%22%3A116.341578%2C%22lat%22%3A39.99118%7D%7D%2C%7B%22name%22%3A%22%E7%89%A1%E4%B8%B9%E5%9B%AD%22%2C%22id%22%3A%22110108%22%2C%22location%22%3A%7B%22Q%22%3A39.977965%2C%22R%22%3A116.37172700000002%2C%22lng%22%3A116.371727%2C%22lat%22%3A39.977965%7D%7D%5D%2C%22neighborhoodType%22%3A%22%E7%94%9F%E6%B4%BB%E6%9C%8D%E5%8A%A1%3B%E7%94%9F%E6%B4%BB%E6%9C%8D%E5%8A%A1%E5%9C%BA%E6%89%80%3B%E7%94%9F%E6%B4%BB%E6%9C%8D%E5%8A%A1%E5%9C%BA%E6%89%80%22%2C%22neighborhood%22%3A%22%E5%8C%97%E4%BA%AC%E8%88%AA%E7%A9%BA%E8%88%AA%E5%A4%A9%E5%A4%A7%E5%AD%A6%22%2C%22building%22%3A%22%22%2C%22buildingType%22%3A%22%22%2C%22street%22%3A%22%E5%AD%A6%E9%99%A2%E8%B7%AF%22%2C%22streetNumber%22%3A%2237%E5%8F%B7%22%2C%22country%22%3A%22%E4%B8%AD%E5%9B%BD%22%2C%22province%22%3A%22%E5%8C%97%E4%BA%AC%E5%B8%82%22%2C%22city%22%3A%22%22%2C%22district%22%3A%22%E6%B5%B7%E6%B7%80%E5%8C%BA%22%2C%22township%22%3A%22%E8%8A%B1%E5%9B%AD%E8%B7%AF%E8%A1%97%E9%81%93%22%7D%2C%22formattedAddress%22%3A%22%E5%8C%97%E4%BA%AC%E5%B8%82%E6%B5%B7%E6%B7%80%E5%8C%BA%E8%8A%B1%E5%9B%AD%E8%B7%AF%E8%A1%97%E9%81%93%E5%8C%97%E4%BA%AC%E8%88%AA%E7%A9%BA%E8%88%AA%E5%A4%A9%E5%A4%A7%E5%AD%A6%E5%8C%97%E4%BA%AC%E8%88%AA%E7%A9%BA%E8%88%AA%E5%A4%A9%E5%A4%A7%E5%AD%A6%E5%AD%A6%E9%99%A2%E8%B7%AF%E6%A0%A1%E5%8C%BA%22%2C%22roads%22%3A%5B%5D%2C%22crosses%22%3A%5B%5D%2C%22pois%22%3A%5B%5D%2C%22info%22%3A%22SUCCESS%22%7D&amp;gwdz=&amp;is_move=0&amp;move_reason=&amp;move_remark=&amp;realname=%E6%9D%A8%E6%A3%AE&amp;number=ZY1806711&amp;uid=305542&amp;created=1614692203&amp;date=20210302&amp;id=28752&amp;gwszdd=&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">lambda_handler</span>(<span class=\"params\">event, context</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Checking health info at &#123;&#125;...&#x27;</span>.<span class=\"built_in\">format</span>(event[<span class=\"string\">&#x27;time&#x27;</span>]))</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        report(<span class=\"string\">&#x27;学号&#x27;</span>, <span class=\"string\">&#x27;密码&#x27;</span>, content)</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Check failed!&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">raise</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Check passed!&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> event[<span class=\"string\">&#x27;time&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span> (lambda_handler(&#123;<span class=\"string\">&#x27;time&#x27;</span>: datetime.datetime.now()&#125;, &#123;&#125;))</span><br></pre></td></tr></table></figure>\n<p>如果<code>python</code>脚本报错</p>\n<blockquote>\n<p>‘ascii’ codec can’t encode characters in position 12-15: ordinal not in range(128)</p>\n</blockquote>\n<p>应该是编码的问题，按照<a href=\"https://www.jianshu.com/p/4e2000920332\">网络上的教程</a>. 在命令前增加环境变量解决：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PYTHONIOENCODING=utf-8 python report.py</span><br></pre></td></tr></table></figure>\n<h2 id=\"cron-定时\"><a class=\"markdownIt-Anchor\" href=\"#cron-定时\"></a> Cron 定时</h2>\n<p>配合Unix/Linux的<a href=\"https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/crontab.html\">crontab</a>，可以达到每天定时打卡的效果.</p>\n<p>rentaocron文件内容:</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">16 18 * * * PYTHONIOENCODING=utf-8 python3 /home/rentao/workspace/report.py</span><br></pre></td></tr></table></figure>\n<p>启动定时任务:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab rentaocron</span><br></pre></td></tr></table></figure>\n<p>查看定时任务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab -l</span><br></pre></td></tr></table></figure>\n<h2 id=\"获得打卡地址\"><a class=\"markdownIt-Anchor\" href=\"#获得打卡地址\"></a> 获得打卡地址</h2>\n<h3 id=\"mac-配置代理服务器\"><a class=\"markdownIt-Anchor\" href=\"#mac-配置代理服务器\"></a> Mac 配置代理服务器</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install mitmproxy</span><br></pre></td></tr></table></figure>\n",
            "tags": []
        },
        {
            "id": "https://youngforest.github.io/2021/03/26/SSH-proxy-by-jump-server/",
            "url": "https://youngforest.github.io/2021/03/26/SSH-proxy-by-jump-server/",
            "title": "SSH 通过跳板机登陆服务器",
            "date_published": "2021-03-26T07:11:02.000Z",
            "content_html": "<h2 id=\"动机\"><a class=\"markdownIt-Anchor\" href=\"#动机\"></a> 动机</h2>\n<p>接上篇<a href=\"https://youngforest.github.io/2021/03/18/Ubuntu-vpn-cannot-access-public-resource/\">解决台式机Ubuntu VPN访问公网资源</a>的问题后，我尝试了配置跳板机访问杭研院机器。</p>\n<p>在科研工作中，MAC笔记本无法连接OpenVPN，从而访问杭研院机器。我的台式机Ubuntu已经配置好了VPN，可以访问服务器。我现在想通过台式机Ubuntu中转，从而实现MAC“直接”访问杭研院。抽象一下问题为：</p>\n<ul>\n<li>A可以访问B</li>\n<li>A不可以访问C</li>\n<li>B可以访问C</li>\n<li>我现在想A访问C</li>\n</ul>\n<p>由于工作中主要使用SSH，因此，问题简化成A通过SSH直接登陆C。<br />\n我经过不屑的网上搜索和尝试，总结了2中技术和方法实现我的目的。</p>\n<ul>\n<li>SSH 代理</li>\n<li>SSH 隧道</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"ssh-代理\"><a class=\"markdownIt-Anchor\" href=\"#ssh-代理\"></a> SSH 代理</h2>\n<p>这种方法最简单，不需要在B上进行任何操作，无缝连接C。</p>\n<p>A上执行，其中<code>rentao@10.134.150.154</code>是B，<code>ldmc@192.168.131.181</code>是C。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -o <span class=\"string\">&quot;ProxyJump rentao@10.134.150.154&quot;</span> ldmc@192.168.131.181</span><br></pre></td></tr></table></figure>\n<p>Reference: <a href=\"https://www.xiebruce.top/650.html\">穿越跳板机</a></p>\n<h2 id=\"ssh-隧道\"><a class=\"markdownIt-Anchor\" href=\"#ssh-隧道\"></a> SSH 隧道</h2>\n<p>B上执行:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -f -N -L 0.0.0.0:9906:192.168.131.181:22 ldmc@192.168.131.181</span><br></pre></td></tr></table></figure>\n<p>A上执行:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -p 9906 ldmc@10.134.150.154</span><br></pre></td></tr></table></figure>\n<p>虽然这种方法看起来更麻烦些，需要A B协作。但是相比第一种方法，其实更加灵活。可以通过SSH 隧道的方式通过B中转暴露更多C的服务（如观察训练数据的tensorboard HTTP服务也是我常需要暴露的），并不一定是SSH登陆。</p>\n<p>Reference: <a href=\"https://www.zsythink.net/archives/2450\">SSH 端口转发：SSH 隧道</a></p>\n",
            "tags": [
                "tech"
            ]
        },
        {
            "id": "https://youngforest.github.io/2021/03/18/Ubuntu-vpn-cannot-access-public-resource/",
            "url": "https://youngforest.github.io/2021/03/18/Ubuntu-vpn-cannot-access-public-resource/",
            "title": "Ubuntu OpenVPN 无法获取公网资源",
            "date_published": "2021-03-18T03:20:13.000Z",
            "content_html": "<p>由于科研需求，我需要连接杭州研究院的VPN，才能使用显卡做神经网络的训练任务。<br />\n然而在Ubunut 18.04配置好OpenVPN后，发现一个难题：连上VPN后无法上外网（百度等网站，不是墙外的网站，而是相对局域网内网的“外网”），断开VPN后可以连外网，但无法连接杭研院的资源。鉴于工作中，外网和杭研院内网基本缺一不可，我花了2天时间调研和修复改问题。而且其他同学使用VPN并没有类似问题，所以我认为是<code>Ubuntu</code>独特的问题。修复的操作很简单，但定位到问题的过程十分坎坷。</p>\n<h2 id=\"现象整理\"><a class=\"markdownIt-Anchor\" href=\"#现象整理\"></a> 现象整理</h2>\n<p>连接VPN后，可以ping通baidu的IP，但浏览器无法连接baidu，<a href=\"http://xn--pingbaidu-zz6n858p0ufslzom6ak32f.com\">也无法直接ping通baidu.com</a>。浏览器只能打开杭研院和北航内部的网站。<br />\n初步判断是网络上DNS服务器的问题，但调研之后发现DNS的配置并无问题。<br />\n猜测是访问外部资源时，理应的DNS解析并没有办法完成。</p>\n<p>最后在网上查了半天，才发现真正的问题（VPN本地配置问题）和解决方案。</p>\n<h2 id=\"解决方案\"><a class=\"markdownIt-Anchor\" href=\"#解决方案\"></a> 解决方案</h2>\n<p><a href=\"https://askubuntu.com/a/713066/558370\">网上最类似的一个问题和解决方案</a></p>\n<p>由于我是Ubuntu 18.04, 并不大一样。<br />\n在我这里给出我的完整解决方案，以供大家参考。</p>\n<p>打开VPN的配置。</p>\n<p><img src=\"/images/vpn1.png\" alt=\"Step 1\" /></p>\n<p><img src=\"/images/vpn2.png\" alt=\"Step 2\" /></p>\n<p>勾选“Use this connection only for resources on its network&quot;</p>\n<p><img src=\"/images/vpn2.png\" alt=\"Step 2\" /></p>\n<p>Apply后，重新连接VPN即可解决问题。</p>\n<h2 id=\"后记\"><a class=\"markdownIt-Anchor\" href=\"#后记\"></a> 后记</h2>\n<p>下一步，我还会试着在Ubuntu上装个跳板机。这样我的Mac或许可以通过该跳板机连入杭研院的机器。 (已经成功啦，下篇更新在<a href=\"https://youngforest.github.io/2021/03/26/SSH-proxy-by-jump-server/\">这里</a>)。</p>\n",
            "tags": [
                "Linux"
            ]
        },
        {
            "id": "https://youngforest.github.io/2021/02/25/Google-AdSense-for-hexo-next/",
            "url": "https://youngforest.github.io/2021/02/25/Google-AdSense-for-hexo-next/",
            "title": "hexo next 配置 Google AdSense",
            "date_published": "2021-02-25T03:17:14.000Z",
            "content_html": "<h2 id=\"动机\"><a class=\"markdownIt-Anchor\" href=\"#动机\"></a> 动机</h2>\n<p>最近由于看了“半佛仙人”的一些视频，我对钱更感兴趣了。除了拿出积蓄的一部分投资A股外，还想着怎么提高被动收入。自己一直有写博客的习惯，写了有5年多，攒了一百余篇文章。虽然每日浏览量只有几十，但苍蝇再小也是肉。参照大佬的一些经验，尝试着通过投放广告来牟利。<br />\n一般网站的广告收入都是通过广告联盟接入的。简而言之就是，你只用出租广告位给广告联盟，他们在此投放针对用户的广告，然后按照流量给你钱。<br />\n面向国际的主要就是Google AdSense了，国内也有一些，如百度。<br />\n因为我本职是一名程序员，博客内容也不分国界，因此选择了Google AdSense作为广告商。Google AdSense的配置十分简单。</p>\n<h2 id=\"具体步骤\"><a class=\"markdownIt-Anchor\" href=\"#具体步骤\"></a> 具体步骤</h2>\n<p><a href=\"https://www.google.com/adsense/\">注册新的AdSense账号</a>.</p>\n<p>从Google AdSense上获取针对你网站的广告脚本，类似这样</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">data-ad-client</span>=<span class=\"string\">&quot;ca-pub-9*******6&quot;</span> <span class=\"attr\">async</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Option1:</p>\n<p>将广告脚本粘贴在<code>./themes/next/layout/_partials/head/head-unique.swig</code>的末尾。</p>\n<p>然后进行验证。一般几天就会通过，发邮件通知到你。</p>\n<p>通过审核后，需要去AdSense上进行配置。基本上把 <strong>自动广告</strong> 打开即可。</p>\n<p>Option2:</p>\n<p>在博客根目录下创建<code>_config.next.yml</code>文件，内容如下：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">custom_file_path:</span></span><br><span class=\"line\">  <span class=\"attr\">head:</span> <span class=\"string\">source/_data/head.swig</span></span><br></pre></td></tr></table></figure>\n<p>创建<code>source/_data/head.swig</code>文件，内容如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">data-ad-client</span>=<span class=\"string\">&quot;ca-pub-9046219176772396&quot;</span> <span class=\"attr\">async</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-9046219176772396&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Option2的优势在于对<code>next</code>不侵入，方便用Github Action做CD.</p>\n<h3 id=\"adstxt-的设置\"><a class=\"markdownIt-Anchor\" href=\"#adstxt-的设置\"></a> ads.txt 的设置</h3>\n<p>该文件放置在 <code>./source/</code> 下即可，和<code>_posts/</code> 同级。<br />\n<code>hexo d -g</code>部署后，对应的文件就会自动部署到<code>/public/</code>也就是你的博客上了。<br />\n其他需要生成放置在博客根目录下的文件也是类似的处理。</p>\n",
            "tags": [
                "Hexo"
            ]
        },
        {
            "id": "https://youngforest.github.io/2018/05/08/ssh-login-remote-server-without-password/",
            "url": "https://youngforest.github.io/2018/05/08/ssh-login-remote-server-without-password/",
            "title": "ssh免密登陆服务器",
            "date_published": "2018-05-08T10:47:09.000Z",
            "content_html": "<p>以下命令仅针对Unix-like系统。<br />\nWindows是不需要这样的解决方法的，Windows下很多类Putty工具都可以选择&quot;记住密码&quot;来实现免密登陆。<br />\n我在Mac上没有找到类似记住密码的解决方案，但使用Key事实上是更安全的一种方式。</p>\n<span id=\"more\"></span>\n<h2 id=\"step1-生成rsa密钥对\"><a class=\"markdownIt-Anchor\" href=\"#step1-生成rsa密钥对\"></a> step1: 生成rsa密钥对</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>\n<h2 id=\"step2-上传rsa公钥到服务器\"><a class=\"markdownIt-Anchor\" href=\"#step2-上传rsa公钥到服务器\"></a> step2: 上传rsa公钥到服务器</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> id_rsa.pub | ssh -p 26757 root@138.128.193.150 <span class=\"string\">&#x27;cat &gt;&gt; .ssh/authorized_keys&#x27;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"step3-更改权限\"><a class=\"markdownIt-Anchor\" href=\"#step3-更改权限\"></a> step3: 更改权限</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -p 26757 root@138.128.193.150 <span class=\"string\">&quot;chmod 700 .ssh; chmod 640 .ssh/authorized_keys&quot;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"step4-success\"><a class=\"markdownIt-Anchor\" href=\"#step4-success\"></a> step4: success!</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -p 26757 root@138.128.193.150</span><br></pre></td></tr></table></figure>\n<p>reference:<br />\n<a href=\"https://www.tecmint.com/ssh-passwordless-login-using-ssh-keygen-in-5-easy-steps/\">ssh-passwordless-login-using-ssh-keygen-in-5-easy-steps</a></p>\n",
            "tags": [
                "tech"
            ]
        },
        {
            "id": "https://youngforest.github.io/2017/08/12/optimize-cortana-in-searching-local-files-and-folders/",
            "url": "https://youngforest.github.io/2017/08/12/optimize-cortana-in-searching-local-files-and-folders/",
            "title": "Optimize Cortana in Searching Local files and Folders",
            "date_published": "2017-08-12T15:50:49.000Z",
            "content_html": "<h2 id=\"problem-description\"><a class=\"markdownIt-Anchor\" href=\"#problem-description\"></a> Problem description</h2>\n<p>When I used the Cortana, the personal assistant of Windows 10, I found that it is confusing that searching<br />\nfunction worked badly sometimes but well sometimes. To improve my productivity, I googled this problem and<br />\nencounter a good solution.</p>\n<h2 id=\"reference\"><a class=\"markdownIt-Anchor\" href=\"#reference\"></a> Reference</h2>\n<p><a href=\"https://www.windowscentral.com/how-add-new-cortana-search-file-locations-windows-10\">https://www.windowscentral.com/how-add-new-cortana-search-file-locations-windows-10</a></p>\n",
            "tags": [
                "Windows"
            ]
        },
        {
            "id": "https://youngforest.github.io/2017/04/08/atom-explore/",
            "url": "https://youngforest.github.io/2017/04/08/atom-explore/",
            "title": "atom 浅尝辄止",
            "date_published": "2017-04-08T14:20:36.000Z",
            "content_html": "<h2 id=\"配置代理\"><a class=\"markdownIt-Anchor\" href=\"#配置代理\"></a> 配置代理</h2>\n<p>笔者的需求是在markdown文档中插入LaTeX公式, atom默认的<code>markdown-preview</code>包无法满足要求. 经过搜索, 社区包<code>markdown-preview-plus</code>可是满足该需求.</p>\n<h3 id=\"atom包管理\"><a class=\"markdownIt-Anchor\" href=\"#atom包管理\"></a> <a href=\"http://flight-manual.atom.io/using-atom/sections/atom-packages/#atom-packages\">atom包管理</a></h3>\n<p>按照官方教程, 安装失败</p>\n<blockquote>\n<p>Installing “markdown-preview-plus@2.4.9” failed.</p>\n</blockquote>\n<p>在log中, 笔者发现了这样的请求</p>\n<blockquote>\n<p>GET <a href=\"https://atom.io/download/electron/v1.3.13/iojs-v1.3.13.tar.gz\">https://atom.io/download/electron/v1.3.13/iojs-v1.3.13.tar.gz</a></p>\n</blockquote>\n<p>笔者接着使用浏览器测试该网址, 无法相应, 猜测是被q了. 幸运的是, atom文档中考虑到使用代理的需要, 并给出了guide.</p>\n<p><a href=\"http://flight-manual.atom.io/getting-started/sections/installing-atom/#using-a-proxy\">配置apm的代理</a></p>\n<p>最后, <a href=\"http://blog.youngforest.me/2016/11/02/%E5%AE%9E%E7%8E%B0terminal%E4%BB%A3%E7%90%86/\">fq基本功</a>. 不解释.</p>\n<h3 id=\"具体命令\"><a class=\"markdownIt-Anchor\" href=\"#具体命令\"></a> 具体命令</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sean@sean-OptiPlex-790:~$ apm config <span class=\"built_in\">set</span> https-proxy http://localhost:8123</span><br><span class=\"line\">sean@sean-OptiPlex-790:~$ apm config get https-proxy</span><br><span class=\"line\">http://localhost:8123/</span><br><span class=\"line\">sean@sean-OptiPlex-790:~$ apm install markdown-preview-plus</span><br><span class=\"line\">Installing markdown-preview-plus to /home/sean/.atom/packages ✓</span><br></pre></td></tr></table></figure>",
            "tags": [
                "atom"
            ]
        },
        {
            "id": "https://youngforest.github.io/2017/03/26/gvim-configuration-for-windows/",
            "url": "https://youngforest.github.io/2017/03/26/gvim-configuration-for-windows/",
            "title": "gvim configuration for windows",
            "date_published": "2017-03-26T10:46:41.000Z",
            "content_html": "<p>最近由于准备GRE, 整天背单词, 练听力和写作, 很是心烦, 很久没折腾了, 所以抽出时间, 给自己的笔记本下载并配置gvim, 也算是休憩.</p>\n<h1 id=\"下载\"><a class=\"markdownIt-Anchor\" href=\"#下载\"></a> <a href=\"http://www.vim.org/download.php#pc\">下载</a></h1>\n<h1 id=\"配置文件\"><a class=\"markdownIt-Anchor\" href=\"#配置文件\"></a> 配置文件</h1>\n<p>与Linux不同, Windows中gvim的配置文件为<code>$HOME/_vimrc</code>(个人配置文件), <code>$VIMROOT/_vimrc</code>(系统配置文件), 默认情况下为<code>C:\\Program Files (x86)\\Vim</code>. 除此之外, 还可以有<code>_gvimrc</code>文件, 只有在gui情况下打开才会读取, 在terminal下不会. 这对于两者应用不同的配置很有帮助, 尤其是使用不同的主题, 同一主题下, 两者的效果很不同. 这样就避免了使用<code>if(has'gui_running')</code>这样复杂的配置内容.</p>\n<h1 id=\"vimrc配置\"><a class=\"markdownIt-Anchor\" href=\"#vimrc配置\"></a> .vimrc配置</h1>\n<h2 id=\"打开配置文件\"><a class=\"markdownIt-Anchor\" href=\"#打开配置文件\"></a> 打开配置文件</h2>\n<ul>\n<li><code>:e $MYVIMRC</code>: 打开用户配置文件, 如果没有的话可以参考<code>help vimrc</code></li>\n<li><code>:e $MYGVIMRC</code>: 打开GUI用户配置<br />\n<code>help vimrc</code>中推荐的配置文件位置是<code>$HOME/vimfiles/vimrc</code>(Windows)或<code>~/.vim/vimrc(Windows)</code>, 这样比起<code>$HOME/_vimrc</code>和<code>~/.vim</code>更portable.</li>\n</ul>\n<h2 id=\"个性化内容\"><a class=\"markdownIt-Anchor\" href=\"#个性化内容\"></a> 个性化内容</h2>\n<p>$MYGVIMRC</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> clipboard=unnamed   <span class=\"comment\">&quot; 与Windows公用clipboard, 默认情况下, y, p只使用vim的clipboard, 不是很方便</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">colorscheme</span> monokai <span class=\"comment\">&quot; 一个我比较喜欢的主题, 不过在terminal下很难看, 所以放在gvimrc中</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> guifont=Consola<span class=\"variable\">s:h18</span>:cANSI:qDRAFT   <span class=\"comment\">&quot;换个字体, 默认字体忍不了</span></span><br></pre></td></tr></table></figure>\n<p>$MYVIMRC</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">number</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> nobackup    <span class=\"comment\">&quot;不产生~文件</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> noswapfile  <span class=\"comment\">&quot;不产生.swp文件</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> noundofile  <span class=\"comment\">&quot;不产生.un文件</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> encoding=utf-<span class=\"number\">8</span>  <span class=\"comment\">&quot;默认为cp936, 改为与系统兼容的utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> fileformat=dos  <span class=\"comment\">&quot;换行符以\\r\\n为准</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> fileencoding=utf-<span class=\"number\">8</span>  <span class=\"comment\">&quot;与系统兼容</span></span><br><span class=\"line\"><span class=\"keyword\">syntax</span> enable</span><br></pre></td></tr></table></figure>\n<h2 id=\"markdown支持\"><a class=\"markdownIt-Anchor\" href=\"#markdown支持\"></a> markdown支持</h2>\n<p>vim的插件可以说可以满足你的任何需求, 然而在这里我不是用vim插件, 而是使用chrome extension满足自己的需求. 理由是配置更简单, 未来其他编辑器也可以利用.</p>\n<p><a href=\"https://github.com/volca/markdown-preview\">插件安装和使用说明</a></p>\n<p><strong>绑定快捷键.</strong> 在vimrc中加入:</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&quot; Open markdown files with Chrome.</span></span><br><span class=\"line\"><span class=\"keyword\">autocmd</span> BufEnter *.md <span class=\"keyword\">exe</span> <span class=\"string\">&#x27;noremap &lt;F5&gt; :!start C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe %:p&lt;CR&gt;&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>使用时按<code>F5</code>就可以了.</p>\n<h1 id=\"后记\"><a class=\"markdownIt-Anchor\" href=\"#后记\"></a> 后记</h1>\n<p>这篇post就是用<code>gvim for MS-WINDOWS</code>完成的.</p>\n",
            "tags": [
                "vim"
            ]
        },
        {
            "id": "https://youngforest.github.io/2017/01/18/sublime-personlize/",
            "url": "https://youngforest.github.io/2017/01/18/sublime-personlize/",
            "title": "个性化sublime",
            "date_published": "2017-01-18T07:27:15.000Z",
            "content_html": "<p><strong>[摘要]</strong> <a href=\"https://www.sublimetext.com/\">sublime text3</a>是一款强大的editor, 我从大二下开始正式使用, 经过半年的不断摸索, 将sublime配置成为个性化的editor, 满足了我日常编码的大部分需求.</p>\n<h3 id=\"为不同的语言进行不同的配置\"><a class=\"markdownIt-Anchor\" href=\"#为不同的语言进行不同的配置\"></a> 为不同的语言进行不同的配置</h3>\n<p>首先, 打开该语言的任意个文件, <code>Sublime Text 3 -&gt; Preferences -&gt; Settings - Syntax Specific</code>进入该语言设置文件, 修改设置文件并保存即可.</p>\n<p><a href=\"http://mlo.io/blog/2012/08/23/language-specific-indents-sublime.html\">参考: 为不同语言设置不同缩进</a></p>\n<h3 id=\"color-scheme\"><a class=\"markdownIt-Anchor\" href=\"#color-scheme\"></a> Color Scheme</h3>\n<p>sublime text 3 默认的主题是<code>Monokai(dark)</code>, 感觉还是挺养眼的, 但缺点是markdown的支持特别差. 我还比较喜欢的另一个主题<code>Solarized(dark)</code>也是这样, 默认提供的<code>Solarized</code>与在vim中的体验相去甚远. 所以我通过<code>Package Contorl</code>安装了<code>Solarized Color Scheme</code>这个主题, 与vim对照如下, 还是比较养眼.</p>\n<p><img src=\"../assets/sublime-solarized-optimized.PNG\" alt=\"Solarized optimized for sublime\" /></p>\n<p><img src=\"../assets/vim-solarized.PNG\" alt=\"Solarized for vim\" /></p>\n",
            "tags": [
                "sublime"
            ]
        },
        {
            "id": "https://youngforest.github.io/2016/11/22/move-posts-from-cnblogs-to-Hexo/",
            "url": "https://youngforest.github.io/2016/11/22/move-posts-from-cnblogs-to-Hexo/",
            "title": "将博客园中的随笔迁移到Hexo",
            "date_published": "2016-11-21T17:42:23.000Z",
            "content_html": "<p>有关如何将其他博客上的文章迁移到<code>Hexo</code>上, <a href=\"https://hexo.io/docs/migration.html\">官方文档</a>给出了一些指引. 我也是根据官方文档进行了将自己之前在博客园中的随笔迁移到新博客上的尝试. 这个过程中遇到过一些问题, 再此给出解决方法.</p>\n<span id=\"more\"></span>\n<h2 id=\"未安装迁移插件\"><a class=\"markdownIt-Anchor\" href=\"#未安装迁移插件\"></a> 未安装迁移插件</h2>\n<p>博客园需要用rss迁移, 我根据文档, <code>$ npm install hexo-migrator-rss --save</code> 安装了相关的插件, 但在运行迁移命令<code>$ hexo migrate rss &lt;source&gt;</code>时, 报出了如下错误:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">undefined migrator plugin is not installed.</span><br><span class=\"line\">Installed migrator plugins:</span><br><span class=\"line\"></span><br><span class=\"line\">For more <span class=\"built_in\">help</span>, you can check the online docs: http://hexo.io/</span><br></pre></td></tr></table></figure>\n<p>我在<a href=\"http://stackoverflow.com/questions/34025076/when-running-hexo-migrate-rss-it-prompt-undefined-migrator-plugin-is-not-insta\">stackoverflow</a>上找到了答案. 原来是需要在博客所在的目录下运行安装插件命令<code>$ npm install hexo-migrator-rss --save</code>才可以. 看来还是我不熟悉nodejs的原因, 因为nodejs的包管理安装默认是局部的, 安装在当前文件夹下的.</p>\n<p>在博客所在目录下重新安装&quot;hexo-migrator-rss&quot;插件, 问题解决.</p>\n<h2 id=\"迁移后的文章只有摘要和超链接\"><a class=\"markdownIt-Anchor\" href=\"#迁移后的文章只有摘要和超链接\"></a> 迁移后的文章只有摘要和超链接</h2>\n<p>成功迁移后, 我兴奋地立即查看了迁移结果, 结果发现, 迁移的文章只有摘要和链接到博客园原文章的超链接, 就想下图一样. 这显然不是我想要的.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/13612111/20493077/5f16663e-b052-11e6-9a0f-256d35ca6110.png\" alt=\"迁移不完全\" /></p>\n<p>可以发现这是由于博客园导出的rss就是这样的. 通过观察, 我发现rss的链接只是一个包含文章信息的<code>xml</code>文件, 也就是说, 如果我们可以得到有完整文章信息的<code>xml</code>文件就可以了. 恰好博客园的备份功能可以提供这样的文件. 将rss链接换为备份文件的链接, 在运行迁移命令就可以将完整的文章迁移到Hexo了. 下面是完整迁移的效果.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/13612111/20493198/cc799b42-b052-11e6-9a0d-28f2e3f8e207.png\" alt=\"迁移完全\" /></p>\n<p>不过这样的迁移还是丢失了标签这样的信息, 不尽如人意.</p>\n<h2 id=\"奇怪的格式问题\"><a class=\"markdownIt-Anchor\" href=\"#奇怪的格式问题\"></a> 奇怪的格式问题</h2>\n<p>迁移成功后发现, 有两篇文章的格式变得很奇怪, 正文都很正常, 但引用, 插入代码的地方就会排版很乱. 但另一篇却很完美. 通过观察迁移的<code>xml</code>文件内容发现, 那两篇文章的内容是html格式的, 而另一篇是<code>Markdown</code>格式的. 这时我才想起, 最初的两篇随笔是用博客园推荐的<code>TinyMCE编辑器</code>编写的, 后来才转投<code>Markdown</code>的. 所以, Hexo当然不能完美的支持.</p>\n",
            "tags": [
                "Hexo"
            ]
        },
        {
            "id": "https://youngforest.github.io/2016/11/02/terminal-proxy-configuration/",
            "url": "https://youngforest.github.io/2016/11/02/terminal-proxy-configuration/",
            "title": "实现terminal代理",
            "date_published": "2016-11-02T15:30:00.000Z",
            "content_html": "<h2 id=\"问题\"><a class=\"markdownIt-Anchor\" href=\"#问题\"></a> 问题</h2>\n<p>作为一名Linuxer，熟练使用终端是一项必备技能，但终端中有时下载安装功能速度很慢，令人崩溃.我自然而然想到了可否加个代理,提高速度。我之前一直用shadowsocks,浏览器使用switchyProxy,实现了初步的科学上网。那么,终端中是否有类似的工具呢？答案是肯定的。通过科学搜索，我成功解决了terminal中的科学上网问题，在此总结一下，希望可以帮到大家。</p>\n<span id=\"more\"></span>\n<h2 id=\"准备工具\"><a class=\"markdownIt-Anchor\" href=\"#准备工具\"></a> 准备工具</h2>\n<p>shadowsocks, polipo</p>\n<h3 id=\"shadowsocks\"><a class=\"markdownIt-Anchor\" href=\"#shadowsocks\"></a> shadowsocks</h3>\n<p><a href=\"https://shadowsocks.org/en/download/clients.html\">Download and Install Client</a></p>\n<h4 id=\"install-command-line-client\"><a class=\"markdownIt-Anchor\" href=\"#install-command-line-client\"></a> Install Command-line Client</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install shadowsocks</span><br><span class=\"line\">apt-get install shadowsocks-libev</span><br><span class=\"line\">cpan Net::Shadowsocks</span><br></pre></td></tr></table></figure>\n<p>shadowsocks的配置可以参考<a href=\"http://bblove.me/2015/03/09/use-ss/\">这篇文章</a>, 我很久之前配置的,这里就不回忆了(忘得差不多了).</p>\n<p>让我们直接从polipo开始吧.</p>\n<h3 id=\"polipo\"><a class=\"markdownIt-Anchor\" href=\"#polipo\"></a> polipo</h3>\n<p>polipo有多种安装方式,可以使用Python的包管理工具pip直接安装,也可以用各个操作系统的包管理工具安装.我更推荐后者,因为个人认为这样更好管理罢了.这里以Ubuntu为例.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-cache search polipo</span><br><span class=\"line\"></span><br><span class=\"line\">adzapper - proxy advertisement zapper add-on</span><br><span class=\"line\">polipo - lightweight, caching web proxy</span><br><span class=\"line\">polipo-dbg - debug package for polipo</span><br></pre></td></tr></table></figure>\n<p>第二个包就是给我们这些小白使用的,安装它</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install polipo</span><br></pre></td></tr></table></figure>\n<p>安装好之后默认自启的,<br />\n我们要先修改它的配置文件(/etc/polipo/config):</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">logSyslog = true</span><br><span class=\"line\">logFile = /var/log/polipo/polipo.log</span><br><span class=\"line\">logLevel = 4 # 没有这句话的话`sudo polipo -v`会出现无法查看log文件的情况</span><br><span class=\"line\"></span><br><span class=\"line\">socksParentProxy = &quot;localhost:1080&quot; # 这里假设shadowsocks的local port为1080</span><br><span class=\"line\">socksProxyType = socks5 # 是不是和SwitchyProxy的设置很像?</span><br></pre></td></tr></table></figure>\n<p>具体各个配置选项可以参考文件<code>/usr/share/doc/polipo/examples/config.sample</code>.</p>\n<p>配置好之后,我们需要重启polipo服务(每次修改配置文件需要重启服务才能加载)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service polipo stop;</span><br><span class=\"line\">sudo service polipo start;</span><br></pre></td></tr></table></figure>\n<p>或者直接</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service polipo restart;</span><br></pre></td></tr></table></figure>\n<p>可以用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo polipo -v</span><br></pre></td></tr></table></figure>\n<p>查看具体各个配置项,可以看到我们之前的更改生效了.</p>\n<h2 id=\"测试\"><a class=\"markdownIt-Anchor\" href=\"#测试\"></a> 测试</h2>\n<p>配置完成后,怎么才知道自己是否已经可以科学上网了呢?<br />\n可以使用以下命令:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~$ curl -i http://ip.cn</span><br><span class=\"line\">当前 IP：60.xxx.xxx.x 来自：中国北京北京 xxx/电信</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~$ http_proxy=http://localhost:8123 curl -i http://ip.cn # polipo的默认端口为8123,如有需要可以自行改动</span><br><span class=\"line\">当前 IP：xxx.xxx.xxx.xx0 来自：美国加利福尼亚州洛杉矶</span><br></pre></td></tr></table></figure>\n<p>这样就算成功了.</p>\n<p>最近发现&quot;<a href=\"http://ip.cn\">ip.cn</a>&quot;这个网站不能用了，500访问错误。可以将其替换为“<a href=\"http://ipinfo.io/ip%E2%80%9D%E5%B0%B1%E5%8F%AF%E4%BB%A5%E4%BA%86i%EF%BC%8C%E8%BF%99%E6%98%AF%E5%8F%A6%E4%B8%80%E4%B8%AA%E8%BF%94%E5%9B%9E%E4%BD%A0%E7%9A%84%E5%85%AC%E7%BD%91IP%E7%9A%84%E7%BD%91%E7%AB%99%E3%80%82\">ipinfo.io/ip”就可以了i，这是另一个返回你的公网IP的网站。</a><br />\n还有一些其他的网站提供类似的返回IP的服务:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl ifconfig.me</span><br><span class=\"line\">curl icanhazip.com</span><br><span class=\"line\">curl ipecho.net/plain</span><br><span class=\"line\">curl ifconfig.co</span><br></pre></td></tr></table></figure>\n<p>从浏览器中获得自己公网IP的方法:</p>\n<ul>\n<li><a href=\"https://www.google.com/search?q=what%20is%20my%20IP%20address\">Google</a></li>\n<li><a href=\"https://duckduckgo.com/?q=ip\">DuckDuckGo</a></li>\n<li><a href=\"https://www.wolframalpha.com/input/?i=what+is+my+ip+address\">Wolframalpha</a>, 推荐</li>\n</ul>\n<h2 id=\"更进一步\"><a class=\"markdownIt-Anchor\" href=\"#更进一步\"></a> 更进一步</h2>\n<p>每次都打这么长的命令<code>http_proxy=http://localhost:8123</code>着实不是我们想要的,为了方便使用,可以在终端键入<code>export http_proxy=http://localhost:8123</code>,表示对该终端所有命令生效;或者更进一步,在.bashrc中加入<code>export http_proxy=http://localhost:8123</code>,每次启动终端时自动执行.如果不想要每次都走代理,可以像我一样,在.bashrc中加入<code>alias hp=&quot;http_proxy=http://localhost:8123&quot;</code>,每次需要代理时,只需要在命令前面加<code>hp </code>就好了.</p>\n<h2 id=\"为git配置代理\"><a class=\"markdownIt-Anchor\" href=\"#为git配置代理\"></a> 为git配置代理</h2>\n<p>git clone的速度很是感人, 只有几十k, 为git配置代理也是很简单的.</p>\n<p>Add the following setting to the http items of .gitconfig files.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[http]</span><br><span class=\"line\">proxy = &lt;address of the proxy server&gt;:&lt;port of the proxy server&gt;</span><br></pre></td></tr></table></figure>\n<p>You can also configure it using the following config command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy &lt;address of the proxy server&gt;:&lt;port of the proxy server&gt;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://gist.github.com/chuyik/02d0d37a49edc162546441092efae6a1\">ssh形式连接Github</a></p>\n<p>在终端中尽情享受科学上网吧!</p>\n",
            "tags": [
                "Linux"
            ]
        },
        {
            "id": "https://youngforest.github.io/2016/11/02/Hexo-github-building-personal-blog/",
            "url": "https://youngforest.github.io/2016/11/02/Hexo-github-building-personal-blog/",
            "title": "Hexo + github 搭建个人博客",
            "date_published": "2016-11-02T14:32:55.000Z",
            "content_html": "<h2 id=\"动机放在前面\"><a class=\"markdownIt-Anchor\" href=\"#动机放在前面\"></a> 动机(放在前面)</h2>\n<p>之前在cnblog上有个博客, 但是也不经常维护, 到现在满打满算也才有3篇随笔, 1个粉. 主要是因为自己没有写东西的习惯. 高中的时候记过一段时间的日记, 零零总总写了有大半本, 都是一些励志(自欺欺人)的东西, 写给自己看的.</p>\n<span id=\"more\"></span>\n<p>首先, 之前感觉没有可写的, 但现在觉得可写的还是挺多的.自己这两年也折腾了不少东西.但折腾完后, 说实话忘得挺快的, 下次自己再弄或者给别人处理相同问题的时候, 基本上又要重新来过. 记下来下之后, 不管是自己日后需要, 还是给小伙伴们借鉴都是极有用的.</p>\n<p>其次, 经高人安利, 经常写博客, 总结自己的工作学习, 和网络上的大牛们交流是学习计算机的基本技能. 写下来, 不仅可以系统地记录自己的学习历程, 供后日回顾, 或后人参考, 还可以督促自己坚持下来. 何乐而不为呢?</p>\n<p>最后, 最近在搞编译课设的时候, 看到了<a href=\"http://jcf94.com/2016/02/21/2016-02-21-pl0/\">这篇博客</a>. 学习编译知识的同时, 感觉这个博客设计的很美观, 博主也很nice. 了解到使用<code>Hexo</code>搭建的时候, 便有了自己搭建博客的想法, 现在也终于有时间实现了.</p>\n<h2 id=\"介绍hexo\"><a class=\"markdownIt-Anchor\" href=\"#介绍hexo\"></a> 介绍<code>Hexo</code></h2>\n<p>有很多专门用来搭建博客的框架, 如 WordPress, Jekyll, Octopress, Joomla等. 这些我都没有用过, 就不评论了. 事实上, 这是我第一次搭建博客的经历, 也算是一种猿粪吧, 遇上了Hexo.</p>\n<p>这里我就自己的感受, 说说Hexo的优点:</p>\n<ol>\n<li>文档完善.</li>\n<li>中文支持好, 包括文档各个方面. 事实上, 开发者就是中国人.</li>\n<li>主题丰富.(作为一个看脸的人)</li>\n</ol>\n<h2 id=\"搭建过程\"><a class=\"markdownIt-Anchor\" href=\"#搭建过程\"></a> 搭建过程</h2>\n<h3 id=\"本地hexo安装配置\"><a class=\"markdownIt-Anchor\" href=\"#本地hexo安装配置\"></a> 本地Hexo安装配置</h3>\n<p>关于如何搭建, 我这里推荐官方的<a href=\"https://hexo.io/zh-cn/docs/\">文档</a>. 文档中说的已经很详细了, 而且遇到问题的话, 还可以直接在文档最下面的讨论区提问, 貌似遇到奇奇怪怪问题的人挺多的, 我遇到问题一般靠谷歌, 事实上, 很多时候都被谷歌引到讨论区或者文档中的<a href=\"https://hexo.io/zh-cn/docs/troubleshooting.html\">Troubleshoot</a>了.</p>\n<p>我安装hexo使用的环境的Ubuntu14.04, 在安装hexo的时候<code>$ npm install -g hexo-cli</code>, 会遇到这样的问题</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh: 1: node: not found</span><br><span class=\"line\">npm WARN This failure might be due to the use of legacy binary &quot;node&quot;</span><br><span class=\"line\">npm WARN For further explanations, please read</span><br><span class=\"line\">/usr/share/doc/nodejs/README.Debian</span><br></pre></td></tr></table></figure>\n<p>通过搜索可以很快找到解决问题的<a href=\"http://stackoverflow.com/questions/21168141/cannot-install-packages-using-node-package-manager-in-ubuntu\">方法</a>. 只需要<code>sudo apt-get install nodejs-legacy</code>就可以了.</p>\n<p>出现这个问题的原因是, debian社区发现, nodejs解释器的命令是<code>node</code>. 然而, 这个命令和其他的包有命名空间的冲突, 比如 node 包中的 ax25-node. 所以, 他们决定把nodejs解释器命令改为<code>nodejs</code>, 大家需要用到nodejs的解释器时需要<code>nodejs</code>命令, 而不是<code>node</code>. 但是这样就会带来向后兼容的问题, 之前的nodejs脚本中的命令还用的是<code>node</code>, 其他Linux发行版也一直在用<code>node</code>. 所以他们想了一个兼容的方法, 创建一个符号链接, 将/usr/bin/node链接到/usr/bin/nodejs. 这个工作又<code>node-legacy</code>包来实现, 不推荐用户自己手动链接. 并且他们也规定, 'nodejs’的源代码包应该也提供一个<code>node-legacy</code>的可执行包. 这样就&quot;完美&quot;地解决了兼容问题.</p>\n<p>由此看来, debian系的发布版都会出现这个问题.</p>\n<h3 id=\"发布到github上\"><a class=\"markdownIt-Anchor\" href=\"#发布到github上\"></a> 发布到github上</h3>\n<p>在github上新建一个库, 库名为 “{your name}.github.io”, 比如, 我的是&quot;<a href=\"http://youngforest.github.io\">youngforest.github.io</a>&quot;. 事实上, 以这样的格式命名, github会默认配置好你的<code>[GitHub Pages](https://pages.github.com/)</code>, 默认发布到&quot;https://{your name}.github.io/“, 比如我的就是&quot;<a href=\"https://youngforest.github.io/\">https://youngforest.github.io/</a>”.<br />\n当然, 如果你不这样命名的话, 自己也可去库中的设置中设置发布<code>GitHub Page</code>.</p>\n<p>在本地的博客目录下, 运行<code>hexo generate</code>, 即可在<code>public/</code>中生成你博客的静态页面, 在这个文件夹下, 将其中所有的文件推到你在github上建好的库就可以了.</p>\n<p>关于具体如何将本地的文件夹推到新建好的库, 在你新建好空库的时候, github应该会告诉你.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/13612111/20461580/713552e6-af3d-11e6-8078-a8c570e594af.png\" alt=\"initial a repository in github\" /></p>\n<p>如果你想要一条命令完成github部署的话, 可以参考<a href=\"https://hexo.io/zh-cn/docs/deployment.html\">相关文档</a>.</p>\n<p>我在运行<code>hexo deploy</code>是会遇到这样的错误<code>ERROR Deployer not found: git</code>.</p>\n<p>查了半天在<a href=\"https://github.com/hexojs/hexo/issues/1040\">hexo的isuue</a>中找到了解决方法. 在bash中运行如下命令就好了.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-index --save</span><br><span class=\"line\">npm install hexo-generator-archive --save</span><br><span class=\"line\">npm install hexo-generator-category --save</span><br><span class=\"line\">npm install hexo-generator-tag --save</span><br><span class=\"line\">npm install hexo-server --save</span><br><span class=\"line\">npm install hexo-deployer-git --save</span><br><span class=\"line\">npm install hexo-renderer-marked@0.2 --save</span><br><span class=\"line\">npm install hexo-renderer-stylus@0.2 --save</span><br><span class=\"line\">npm install hexo-generator-feed@1 --save</span><br><span class=\"line\">npm install hexo-generator-sitemap@1 --save</span><br></pre></td></tr></table></figure>\n<p>当你在浏览器中访问你的&quot;GitHub Pages&quot;时, 就会看到部署好的博客.<br />\n在<a href=\"https://youngforest.github.io/\">这里</a>可以看到我部署好的博客.</p>\n",
            "tags": [
                "Hexo"
            ]
        }
    ]
}