{
    "version": "https://jsonfeed.org/version/1",
    "title": "YoungForest's blog • All posts by \"microsoft\" tag",
    "description": "佛系更新；生活、学习",
    "home_page_url": "https://youngforest.github.io",
    "items": [
        {
            "id": "https://youngforest.github.io/2023/10/18/foreign-companies-comparision-between-China-Europe/",
            "url": "https://youngforest.github.io/2023/10/18/foreign-companies-comparision-between-China-Europe/",
            "title": "国内外企 和 欧洲外企 对比",
            "date_published": "2023-10-18T11:56:40.000Z",
            "content_html": "<p>笔者有幸在国内的外企和欧洲的外企都工作过，2家都是美国的跨国企业，因此对于中国和爱尔兰，都是外企。且都属于互联网行业。总的感受一句话，全靠同行衬托。</p>\n<p>中国的外企的特点就是，Work Life Balance，不加班，福利好，包裹好，十分人性化。同事水平也都十分高，基本都是名校毕业。当然最近几年，国内互联网行业的薪资水平也都追上甚至还有的反超了，比如新兴的 字节跳动 和 拼多多。我在这家外企呆了2年时间。因为是疫情后加入，基本都是在家办公，甚至远程入职。人性化最大的体会是，21年北京户口大赦，当时政策的规定是有半年和3年的指标，公司和员工协商决定。也就是你交够社保到半年和3年后，开始办户口。说是协商，其实员工处于弱势地位，并没有多少选择。外企基本都是让员工自己选，员工当然都选半年的。当时，主流的国内互联网公司，基本都是给3年的。更有甚者，还追加服务期到5年，得签协议，提前离职需要按比例退钱。在大家普遍5天年假的情况下，外企给到了12天。公积金也按照顶格12%给。中国劳动法其实定的标准很高，比如裁员的赔偿是N+1，比欧洲的标准N/2 要高不少。23年上半年，美国科技大厂大裁员，我的前司也不例外，中国办公室也有受影响，但给了N+6的赔偿。还是挺香的。</p>\n<p>欧洲的外企，Work Life Balance，不加班 这些优势都没有了。因为欧洲本地企业，更加Work Life Balance，不加班。美企的文化反而在这方面处于劣势。不过，福利好，包裹好的优势依旧存在。毕竟美企基本都是跨国企业，从全世界赚钱，有钱许多。而且美国本土程序员薪资很好，因此即使在欧洲只给一半薪资，也是要高于市场水平的。欧洲外企的国际化和多样性很足，同事都是来自不同国家的，甚至本地人都不是特别占优势。相反中国的外企，都是中国人占大多数，外国人极少数。欧洲本地企业，大多数还是本地人居多。除了那种外国人开的企业。但欧洲外企同事的整体水平是要比中国外企的差一大截的。我认为主要原因是，欧洲外企的生态位在欧洲就业市场，并不如中国外企那样占优势，吸引人；很多优秀的人才也是直接被吸引到美国了，不会在欧洲长待。</p>\n<p>中国和欧洲外企工作的共同点：都要和美国开会，中国是早上，欧洲是晚上，都不怎么方便。重要的项目和组还是都在美国，中国和欧洲办公室都相对边缘。三个地方也存在着很多合作。比如On Call的话，如果有的组发展的比较早，会配置美国，爱尔兰/英国，中国/印度，3个时区的小组分别负责，每个时区只用管8个小时，从而建立24小时都有人在上班的全天候服务模式。发展晚些的就只能有2个时区的小组，各12小时。最差的是一个时区管24小时，晚上的警报真是要工程师的老命。</p>\n",
            "tags": [
                "Europe",
                "Amazon",
                "Microsoft",
                "China"
            ]
        },
        {
            "id": "https://youngforest.github.io/2018/06/01/suzhou-microsoft-interview/",
            "url": "https://youngforest.github.io/2018/06/01/suzhou-microsoft-interview/",
            "title": "微软苏州面试",
            "date_published": "2018-06-01T14:54:08.000Z",
            "content_html": "<p>在@lxc师兄的内推下，我有幸可以前往 苏州微软，面试O365部门的暑期实习生。虽然最后失败了，但从这次失败的经历中，我学习到很多。<br />\n总结在此，为未来的找实习和工作做准备。</p>\n<span id=\"more\"></span>\n<h1 id=\"面试环节\"><a class=\"markdownIt-Anchor\" href=\"#面试环节\"></a> 面试环节</h1>\n<h2 id=\"一面\"><a class=\"markdownIt-Anchor\" href=\"#一面\"></a> 一面</h2>\n<ul>\n<li>尾递归，斐波那契（不会）</li>\n<li>合并2个列表</li>\n<li>makefile 编译顺序确定</li>\n<li>memcpy的实现方式和安全问题</li>\n</ul>\n<h3 id=\"用尾递归优化递归斐波那契数列\"><a class=\"markdownIt-Anchor\" href=\"#用尾递归优化递归斐波那契数列\"></a> 用尾递归优化递归斐波那契数列</h3>\n<p>斐波那契数列大家应该都很熟悉，高中数学课本上提到的经典递归数列。<br />\n其数学定义为：</p>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mi>f</mi><mi>n</mi></msub><mo>=</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.3599999999999999em\" columnalign=\"left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><msub><mi>f</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><msub><mi>f</mi><mrow><mi>n</mi><mo>−</mo><mn>2</mn></mrow></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mspace width=\"1em\"/><mtext>if </mtext><mi>n</mi><mo>&gt;</mo><mn>2</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mspace width=\"1em\"/><mtext>if </mtext><mi>n</mi><mo>=</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\"application/x-tex\">f_n = \\begin{cases}\nf_{n-1} + f_{n-2} &amp; \\quad \\text{if } n &gt; 2 \\\\\n1 &amp; \\quad \\text{if } n = 0, 1\n\\end{cases}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.0000299999999998em;vertical-align:-1.25003em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">{</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:1em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mord text\"><span class=\"mord\">if </span></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">2</span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mord text\"><span class=\"mord\">if </span></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>根据数学递推式，很容易地可以写出递归版的斐波那契数列：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">fibonacci</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> n == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> n == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fibonacci(n-<span class=\"number\">1</span>) + fibonacci(n-<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<p>根据函数调用的原理，每次需要递归调用2次本函数，当参数为n时，需要的栈帧的数目为O(2^n)。<br />\n可以利用尾递归来优化这个问题。<br />\n尾递归是<a href=\"https://en.wikipedia.org/wiki/Tail_call\">尾调用</a>的一种递归调用形式。<br />\n我对尾递归的理解是<br />\n函数式编程中使用函数调用以实现循环的方式。<br />\n所以，首先给出内存占用为O(1)的斐波那契数列循环实现。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">fibonacci</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> n == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">    f_n_sub_1 = <span class=\"number\">1</span></span><br><span class=\"line\">    f_n_sub_2 = <span class=\"number\">0</span></span><br><span class=\"line\">    i = n</span><br><span class=\"line\">    <span class=\"keyword\">while</span> i &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">        f_n_sub_1, f_n_sub_2 = f_n_sub_1 + f_n_sub_2, f_n_sub_1</span><br><span class=\"line\">        i -= <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> f_n_sub_1</span><br></pre></td></tr></table></figure>\n<p>从循环实现可以看出，整个循环实现需要2个变量(f_n_sub_1和f_n_sub_2)来记录中间的结果，<br />\n一个循环变量(i)以控制循环次数(即循环结束条件)。<br />\n将这些变量当作函数的参数即可得到尾递归版本的斐波那契数列实现。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">fibonacci</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">func</span>(<span class=\"params\">n, ret1, ret2</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> n == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ret1</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> func(n - <span class=\"number\">1</span>, ret2, ret1 + ret2)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> func(n, <span class=\"number\">0</span>, <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"memcpy的实现方式和安全性问题\"><a class=\"markdownIt-Anchor\" href=\"#memcpy的实现方式和安全性问题\"></a> memcpy的实现方式和安全性问题</h3>\n<p>也是一个字节一个字节的复制。不是我想当然的认为一整块一整块的复制，这样会更快。<br />\n回忆计算机组成原理的知识：<br />\nCPU和Memory之间由总线连接，一次（一个时钟周期）只能读取和写入一个字的数据。</p>\n<p>安全性：很不安全。<br />\n回忆操作系统的知识：进程的内存空间映射到物理内存。<br />\n直接一个一个字节从低到高地复制粘贴容易覆盖到其他指针指到的数据（破坏了其他指针的数据）甚至本身的数据。</p>\n<p>比如memcpy一个大小为200字节的指针(地址100)到地址200，会把自己的数据(200-300)的部分先覆盖掉，之后的copy就都是错的。（这是面试官给出的解释，但我后来发现，这点是不一定不成立的。因为之后我查了一些标准库中memcpy的实现，这种情况下可能会采用自后向前复制的方法防止覆盖要复制的数据。<br />\n<a href=\"https://github.com/gcc-mirror/gcc/blob/master/libgcc/memcpy.c\">无保护措施的gcc</a><br />\n<a href=\"https://blog.csdn.net/laoyang360/article/details/8020409\">有保护措施</a><br />\n）</p>\n<h3 id=\"面试官指点\"><a class=\"markdownIt-Anchor\" href=\"#面试官指点\"></a> 面试官指点</h3>\n<p>面试时在Notepad里写代码，在纸上写代码，和在白板上写，<br />\n容易程度或方便程度是：<br />\n白板 &gt; 纸 &gt; Notepad</p>\n<p>被告知面试题目后，首先要考虑清楚初始条件和具体要求，不清楚的一定要和面试官问清楚，不要上来就写。<br />\n否则后来发现歧义，再问时就晚了。</p>\n<h3 id=\"其他收获\"><a class=\"markdownIt-Anchor\" href=\"#其他收获\"></a> 其他收获</h3>\n<p>有时间一定要好好看看SICP，函数式编程的尾递归在其中就有讲。<br />\n面试官估计也读过。</p>\n<h2 id=\"二面\"><a class=\"markdownIt-Anchor\" href=\"#二面\"></a> 二面</h2>\n<ul>\n<li>求树的最深度</li>\n<li>最大和的链</li>\n<li>可以拐弯的最大和的链</li>\n<li>数组权重最大的重新排序（不会）</li>\n</ul>\n<h3 id=\"其他收获-2\"><a class=\"markdownIt-Anchor\" href=\"#其他收获-2\"></a> 其他收获</h3>\n<p>在面试时，ACM选手有天然的优势。<br />\n该面试官本科时，可能玩过ACM，因为他说“数组权重”那道题是他上学时自己出得。</p>\n<p>p.s. 面试官说他也毕业不久。</p>\n<h2 id=\"三面\"><a class=\"markdownIt-Anchor\" href=\"#三面\"></a> 三面</h2>\n<p>周二去苏州参加完面试后，周五出结果，约了第二周周二的视频面试。<br />\n说实话，视频面试前我还真有点紧张，而且由于学校出了点状况，上午才知道下午有视频面试。<br />\n仓促之前，也没有午睡，休息好。面试之前特别困。<br />\n好在真正到面试时，肾上腺素上升，不困了。</p>\n<p>三面的面试官也很nice。<br />\n听说我熟悉SQL，就出了一道SQL题目给我。</p>\n<p>类似教务管理系统。有3张表：学生（学号，姓名），课程表（课程ID，课程名），选课表（学号，课程ID，成绩）。<br />\n查询每个学生的数学成绩和语文成绩，结果为（姓名，数学成绩，语文成绩）。<br />\n刚开始假设每个学生都选了数学和语文，后来取消了这个假设（考察outer join）。</p>\n<h2 id=\"第二道题\"><a class=\"markdownIt-Anchor\" href=\"#第二道题\"></a> 第二道题</h2>\n<p>第二道题目考察<a href=\"https://en.wikipedia.org/wiki/IEEE_754#Rounding_rules\">IEEE的一种round实现</a>。</p>\n<p>首先，列出一些数字，让我观察规律。<br />\n在面试官的引导下，我猜测出来了：四舍六入五看下一位。<br />\n之后使用C语言实现这一ieee_round。</p>\n<h2 id=\"结果\"><a class=\"markdownIt-Anchor\" href=\"#结果\"></a> 结果</h2>\n<p>No Hire.</p>\n<blockquote>\n<p>很遗憾，Lead面试官最后给的是No Hire。他认为你编写代码能力不稳固。你的优点是思考能力很强，缺点是不善于展现和询问，不能从错误中获取新的解决办法，今后需要加强这方面。</p>\n<p>希望你研究生期间继续努力，欢迎再加入苏州微软。</p>\n</blockquote>\n<p>Lead面试官的眼光还是蛮准的，给出的建议的是一针见血的。我会继续努力，早日达到微软爸爸的要求的。</p>\n<p>除此之外，一开始说好的报销火车票最后也没给报，经济上还损失了1200￥。</p>\n",
            "tags": [
                "intern",
                "Microsoft"
            ]
        }
    ]
}