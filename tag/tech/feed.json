{
    "version": "https://jsonfeed.org/version/1",
    "title": "YoungForest's blog • All posts by \"tech\" tag",
    "description": "佛系更新；生活、学习",
    "home_page_url": "https://youngforest.github.io",
    "items": [
        {
            "id": "https://youngforest.github.io/2022/12/09/Find-a-Europe-SDE-job-from-China/",
            "url": "https://youngforest.github.io/2022/12/09/Find-a-Europe-SDE-job-from-China/",
            "title": "从北京到都柏林 一名程序员的润欧之旅",
            "date_published": "2022-12-09T08:42:27.000Z",
            "content_html": "<p>转自<a href=\"https://youngforest.github.io/2022/12/09/Find-a-Europe-SDE-job-from-China/\">我的博客</a></p>\n<p>今年，我按照预期计划，从国内投欧洲程序员的岗位，虽然赶上宏观经济下行，各个公司纷纷hire freeze甚至layoff。幸运地，还是拿到了2个offer，并在11月成功入职完成肉翻。虽然历经了不少坎坷，回过头看也算是一切顺利。在“润”地道路上被很多有经验地群友帮助，因此我也撰写一篇博客，总结自己地经验和教训，以方便后来人。</p>\n<p><img src=\"/images/%E6%B6%A6%E4%BA%86.png\" alt=\"润了\" /></p>\n<h2 id=\"背景\"><a class=\"markdownIt-Anchor\" href=\"#背景\"></a> 背景</h2>\n<p>首先给不熟悉我的朋友简单介绍一下我的背景。<br />\n在北京某校读了计算机本硕。<br />\n读书时从大四开始有过不少实习经历，先后在小厂、大厂，人工智能、自动驾驶，国内互联网、外企干过一段时间，在学校也有长期的科研经历。<br />\n实习是不错的成本比较低的试错机会。<br />\n经过这些尝试，结合自己的实际情况，我确定了自己的目标。找工作，而非科研。去大厂，而不是小厂。来外企，而非国内企业。<br />\n在2020年初，因为ex的原因，确定了要润到欧洲工作的计划。她因为10043的限制，去不了美国读书。她也对国内深造不感兴趣，所以当时决定选择欧洲的院校深造。打算2022年秋来读硕士。<br />\n2021年硕士毕业后，如愿在北京某国际知名外企工作了一年零4个月时间。这段经历在简历上也极大地帮助我拿到不少面试。</p>\n<p>新加坡、日本、欧洲、加拿大、澳洲 都是程序员润的热门目的地。<br />\n和美国相比，这些地区工签制度十分友好，基本只要拿到offer，都能轻松办下工签。<br />\n同时很多发达国家拥有从出生到坟墓的福利制度，尤其适合逃离国内996而且拖家带口的同行们。<br />\n最重要的是工作机会多，竞争压力小，有大量面向海外招人的岗位。从我的经验来看，不考虑语言挑战的话，面试难度是远小于国内的。<br />\n本文虽然是以投欧洲为背景，不过大多数经验也是对其他地区有帮助的。尤其是投谷歌、亚马逊、微软这种美企的。</p>\n<h2 id=\"时间线\"><a class=\"markdownIt-Anchor\" href=\"#时间线\"></a> 时间线</h2>\n<p>3月开始在Stack Overflow（现在Jobs板块已关闭）、Google Jobs、LinkedIn上海投，也找了不少朋友内推。我投的工作地点主要以荷兰为主，也投了德国、爱尔兰、英国等其他国家。<br />\n这段时间以中小公司为主，想在投大厂前多练练。但并不理想，大多数直接被据，只有4个面试。</p>\n<p>4月底开始投大厂，当然海投一直没停，最后投了近40个厂，有8家面试，2家offer。阿姆本地的大厂岗位只有 Amazon、Uber和Booking。微软投了都柏林，谷歌投了慕尼黑。<br />\n因为我本身在Amazon工作，因此外部没法投。内部投又有跨国岗位需要L5(SDE 2) + 1年的限制，我不满足。虽然内部聊了几个经理，但都不能给exception。因此错失了Amazon在欧洲的工作机会。Uber 在约Phone Interview时，hire freeze了，对面直接找不到人了。Booking干脆没拿到面试。</p>\n<p>6月面了微软和谷歌。</p>\n<p>微软是一次Online Assessment (3道算法题，LeetCode Medium难度) + 3 轮Virtual Onsite (Algorithm + Behavior Questions, Software Design + Behavior Questions, System Design + Behavior Questions) + 1轮Virtual Onnsite (Behavior Questions)。可以看出微软Behavior Questions的比重很大，每轮都有。Software Design其实就是OOD (Oriented Object Design), 我因为理解错了没有准备对，第二轮面的有些糟糕。不过最后还是拿到了Offer。</p>\n<p>谷歌是 1轮Phone Interview (Algorithm) + 4轮 Virtual Onsite (3轮 Algorithm + 1轮Behavior Questions)。可以看出，谷歌的算法比重很大，Senior以下是不面系统设计的。因为我刷题十分多，因此谷歌的这种面试模式让我很享受，感觉效果也不错。之后就是漫长的Team Match。最后因为HC Freeze结束了申请流程。谷歌的流程十分冗长，推荐的做法是，最先投谷歌，等谷歌面试结束后，再投其他大厂。这样可以使得出offer的时间差不多，方便compete。</p>\n<p>7月份同一天拿到2个Offer，谈薪资。<br />\n8月份接offer。9月办签证。10月离职。11月入职。</p>\n<p>可以看出，从开始投大厂，到入职，基本半年就过去了。大家可以酌情准备。</p>\n<p>另外，我花了不少时间在 Pramp模拟面试 和 中小厂的面试上。主要是前期没有自信，想要练习一下再冲大厂。回头看看其实用处不大。<br />\n首先是小厂和大厂面试模式和内容差别很大，练习效果一般。<br />\n其次，因为我只有1年工作经验。投小厂我收到面试其实很少，毕竟从海外搬用入职时间比较长，成本也不低，他们更愿意招一些Senior的人。<br />\n最后，因为赶上了今年恶劣的大环境，晚几个月投大厂太致命了。到6、7月的时候，陆续传来Hire Freeze或Layoff的消息。大厂虽然看实力，但运气也很重要。如果再晚些就更惨了。我最后拿微软offer的组，也不是一开始面的组。因为一开始的组Hire Freeze了，幸运地是，我入职的组因为十分基础和重要，在整个公司Hire Freeze的背景下，仍然争取到了少量的Head Count。</p>\n<h2 id=\"面试准备\"><a class=\"markdownIt-Anchor\" href=\"#面试准备\"></a> 面试准备</h2>\n<p>这部分是大家最关心，也是最花时间的了。</p>\n<p>首先推荐一下<a href=\"https://www.youtube.com/@Fred_Talk\">V2WORLD 群主的频道</a>. 有包括 简历准备、英文、算法、技能 等十分干货的视频，尤其是适合德国岗位。</p>\n<p>我这里主要结合我自己的经验，分享一下面试准备的心得。</p>\n<h3 id=\"英文\"><a class=\"markdownIt-Anchor\" href=\"#英文\"></a> 英文</h3>\n<p>英文对于很多同学可能是比较恐惧和担忧的一个挑战。我也是这样，因此很能理解。<br />\n作为一名小镇做题家，高考英语听力都不算分，从小到大的英语老师也都是二本甚至专科毕业的，自己英文都说的不利索。四六级倒是有听力，但口语当时还是可选的，也没多少人专门去考。大学英语老师水平倒是很高，但无奈基础已经摆在那里了。而且大学英语也更侧重于科研需求。大一的时候是最恐惧的时候，英语课都改成全英文的了，上课都听不懂了。也有部分同学游刃有余，对应着城乡，发达与落后地区的差距就十分明显了。从大学开始，我开始了漫长的和英语搏斗之路。虽然四六级都是一次性裸考过，但我深知那只是代表了应试能力和我阅读的强势，听说仍然比大城市的同学差很多。当时尝试了不少英语App，包括流利说和扇贝网。其中扇贝网因为网页做的不错，我身为程序员，也更习惯PC端的产品。而且扇贝听力的精听功能深得我心。我和舍友每日打卡，差不多打了有快2年时间。<br />\n另外，我也尝试参加一些学校的英语活动。包括尝试了几次英语社，每日大早在沙河南湖边大声背诵。以志愿者身份，参加了2次暑期学校，解决外国学生的各种问题。也以学生身份上了一次暑期学校的课。<br />\n以考促学也是一个不错的途径。当时还没有10043法案，北航的同学出国比例还是挺高的，最后大概有20%，再加上剩下有些许留学想法的，可能有50%。我当时也受影响，考了托福。虽然最后只考了91分，但准备的过程中，确实让我英语进步很多，尤其是听力。<br />\n再到后来去比利时交换，也有了机会锻炼自己的英文和交流。</p>\n<p>虽然到目前为止，我发现自己的英语和周围人之间还是有不小差距的，但可以基本不大影响工作。在面试过程中，因为欧洲这边基本也都不是英语母语，所以要求和水平相对较低。即使如此，还是有面试据我的理由是，他们目前想找一个英文更好的人。</p>\n<p>在我看来，面试中的英文并不难，最重要的是你敢说，愿意交流。如果遇到不会表达的，或没表达清楚，只要和面试官反复沟通和确认，基本上还是可以沟通无碍的。其实在工作中也是一样。</p>\n<p>因此，我给出的建议是：用模拟面试（如<a href=\"https://www.pramp.com/invt/lYgBVdQ8qrTMQg9jwEmP\">pramp</a>）或 真正的面试(可以先投一些小厂) 去练习，找到短板和技巧。无论是英文还是技术，欧洲的面试真没大多数人想象中的那么难。</p>\n<h3 id=\"简历投递\"><a class=\"markdownIt-Anchor\" href=\"#简历投递\"></a> 简历投递</h3>\n<p>主要靠网友内推和Linkedin海投为主。花些时间维护好Linkedin profile。基本大厂靠内推，其他靠海投。</p>\n<h3 id=\"算法题\"><a class=\"markdownIt-Anchor\" href=\"#算法题\"></a> 算法题</h3>\n<p>还是得靠刷题 LeetCode基本刷上300题就差不多了。<br />\n之前写的经验在这里分享一下: <a href=\"https://www.zhihu.com/question/280279208/answer/704774024\">大家都是如何刷 LeetCode 的？ - youngforest的回答 - 知乎</a></p>\n<h3 id=\"软件设计-software-design-ood\"><a class=\"markdownIt-Anchor\" href=\"#软件设计-software-design-ood\"></a> 软件设计 Software Design, OOD</h3>\n<p>基本这一本书就够了：</p>\n<ul>\n<li>Grokking the Object Oriented Design Interview<br />\n其他进阶资料：</li>\n<li><a href=\"https://github.com/donnemartin/system-design-primer\">The System Design Primer</a></li>\n</ul>\n<h3 id=\"系统设计-system-design\"><a class=\"markdownIt-Anchor\" href=\"#系统设计-system-design\"></a> 系统设计 System Design</h3>\n<p>准备面试基本看2本书就够了，</p>\n<ul>\n<li>Grokking the System Design Interview</li>\n<li>Alex Yu - System Design Interview_ An Insider’s Guide</li>\n</ul>\n<p>如果没时间，优先看第一本。</p>\n<p>除此应付面试外，其实系统设计对于工作也是十分重要的。我这里也推荐一些资源，提升自己本身系统设计的能力，而不是为了应付面试。</p>\n<ul>\n<li>DDIA (Designing Data Intensive Applications)</li>\n<li><a href=\"https://www.1point3acres.com/bbs/thread-907316-1-1.html\">一本分布式电子书和视频资料</a></li>\n</ul>\n<h3 id=\"行为面试\"><a class=\"markdownIt-Anchor\" href=\"#行为面试\"></a> 行为面试</h3>\n<p>Behavior questions 很好准备，用一两周即可。网上有大量的问题，自己提前根据自己的过往经历准备几个故事，足以应付大多数问题即可。一定要基于自己过往经历，可以添油加醋，但不要无中生有，要不面试时如果问follow up有可能圆不上露馅。</p>\n<p>文章</p>\n<ul>\n<li><a href=\"https://www.1point3acres.com/bbs/google_search.php?q=behavior%20question\">一亩三分地</a></li>\n<li><a href=\"https://www.1point3acres.com/bbs/thread-529217-1-1.html\">一亩三分地 Behavior questions合集</a></li>\n</ul>\n<p>Podcast</p>\n<ul>\n<li><a href=\"https://softskills.audio/\">softskills</a></li>\n<li><a href=\"https://podcasts.google.com/feed/aHR0cHM6Ly9zb2Z0c2tpbGxzLmF1ZGlvL2ZlZWQueG1s?sa=X&amp;ved=0CAMQ4aUDahgKEwiA2Mv__tL3AhUAAAAAHQAAAAAQ4xo\">Soft Skills Engineering</a></li>\n</ul>\n<p>YouTube</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=IyPJFHFUpbQ&amp;ab_channel=DanCroitor\">DanCroitor</a></li>\n</ul>\n<h2 id=\"爱尔兰-怎么样\"><a class=\"markdownIt-Anchor\" href=\"#爱尔兰-怎么样\"></a> 爱尔兰 怎么样？</h2>\n<p>我这两年也加入了一起志同道合润的微信群（V2WORLD），也认识了不少已经润，正在润和将要润的群友。说实话，2022年因为国内经济和疫情封控的原因，润的人更多了。<br />\n从这个小范围样本来看（大概2百人，大概率会有幸存者偏差），润到新加坡/欧洲（其中德国占大部分）的居多，日本、加拿大、澳洲的其次。<br />\n爱尔兰算是一个不大热门也不引人关注的国家。其实我投递的时候也是没以爱尔兰为主的，但是后来发现这里大厂很多，包括很多美企巨头的欧洲总部，如 Microsoft，Apple，Google，AWS （Amazon的欧洲总部在卢森堡）。基本上都有3千研发的办公室。比如微软这里有2栋楼，3500+个研发。工作机会很多，尤其是如果你偏爱美企大厂，或者以后想通过L1润美的话。以后跳槽和职业发展也不错，也被称为欧洲小硅谷。<br />\n除了程序员比较好找工作外，药企也是爱尔兰支柱产业。</p>\n<p>另外爱尔兰移民政策十分友好，有offer就能办工作许可，也就能办工签。程序员的话基本都是Critical Skill Work Permit。头1年不能换工作，头2年（Stamp 1）需要雇主担保Work Permit。2年后（Stamp 4）就可以自由换工作和自雇了。配偶签证也都可以学习工作。<a href=\"https://www.citizensinformation.ie/en/moving_country/irish_citizenship/becoming_an_irish_citizen_through_naturalisation.html#l9d317\">最快5年可以换护照（不过爱尔兰也有移民监，每年离境时间需要不超过6周，否则这年是不算在你的5年里的。）</a>。不像其他国家，需要语言要求和融入考试。推荐一下我微软同事的帖子: <a href=\"https://www.1point3acres.com/bbs/thread-901327-1-1.html\">爱尔兰移民签证体系讲解</a> 和 <a href=\"https://www.irishimmigration.ie/registering-your-immigration-permission/information-on-registering/immigration-permission-stamps/#5b7196a7b9ecd4ab3\">各种居留签官方说明</a>. 感觉爱尔兰其实是价值洼地。岗位多，竞争少。和不少人聊过，感觉面试都更简单。</p>\n<p>大家润出来一部分人最主要的目的是逃离国内996的卷，更好的生活。爱尔兰像其他国家一样都可以满足这样的需求，也有相对完善的福利制度，完全足以过上“老婆孩子热炕头”的生活。</p>\n<p>爱尔兰缺点的话，也有很多。</p>\n<p>都柏林基础设施极差。比大多数欧洲发达国家的首都都差，甚至比不上希腊。没有地铁，轻轨线路也只有2条，公共交通公交是主流。去不同方向的地方都需要去市中心转车。机场不通轻轨或火车，只有大巴和公交。机场设施，如安检，也都相当原始和缓慢。我分析爱尔兰基础设施比较差的主要原因有：1. 人口密度低。爱尔兰人口只有4百万，相比中国和欧洲其他地区人口少，所以基础建设性价比低，跟不上。2. 底子差。因为历史上长期是英国的殖民地，面对着长期的剥削，以发展农业为主，经济腾飞成为工业国是二战后的事儿。不像欧洲其他国家有几百年的工业历史和建设。</p>\n<p>气候谈不上恶劣，但绝对不十分宜人。这方面其实西北欧都差不多，属于温带海洋性气候。气温上还比较好，夏天不大热，低于30度，冬天不大冷，-10度以上。但每年有半年的雨季，集中在冬天，刮风下雨实在是物理加法术伤害。因为纬度比较高，冬天日照时间短，再加上雨季阴天不大能见到太阳，容易让人抑郁。建议通过补剂或食物额外补充维生素D。我在国内都是北方长大到现在，实在是顶不住。不过据南方（杭州）的朋友说，这里气候其实是比南方要好的。</p>\n<p>比较村，也被称为“爱村”。除了之前提到的基础设施差之外，商场娱乐也不像大城市的样子。不过这点对我来说也挺好，我其实就喜欢这个样子。作为一名典型的“小镇做题家”，从小在小县城长大。虽然后来通过高考来到了大城市，但头两年呆在沙河（北京昌平郊区一镇），十分荒凉。后来来到了北四环学院路，总算是城市了。但海淀相比朝阳还是破旧许多。工作后在朝阳呆了一年，总算是品尝了些大城市的灯红酒绿，但也不习惯。所以，此番来到爱尔兰都柏林郊区，也算是能接受，感觉比长大的县城还是好上不少的。</p>\n<p>高税收。爱尔兰属于高税收高福利国家，更看重公平而非效率。本身就比美国薪水低很多，再加上最高52%的各种税，到手其实和国内差不多，甚至更少。再加上高昂的房租和物价，存下来的钱必然是更少的。</p>\n<p>变态的房租。我之前在<a href=\"https://youngforest.github.io/2022/12/25/2022-summary-and-2023-resolutions/#%E7%94%9F%E6%B4%BB\">年终总结</a>里分享过，都柏林的房租直追欧洲一线城市，但享受到的基础设施、服务都是三线的。</p>\n<h2 id=\"faq\"><a class=\"markdownIt-Anchor\" href=\"#faq\"></a> FAQ</h2>\n<p>有想润的朋友经常咨询我一些问题，统一在这里整理出来。</p>\n<p>** Q: 你当时在职面海外岗位，会不会时间太紧完全没法准备啊？以及请假会不会很难？**</p>\n<p>A: 我还好。因为我本身在国内就在外企工作，工作压力小，请假也十分方便，而且还长期居家办公。另外我面的欧洲工作，我会优先选择晚上面试，最差情况是下午面试，就得请假了。准备方面的话。因为我长期刷题，这方面基本不怎么需要再花时间。英语、系统设计、Behavior questions倒是花了不少时间练习。你如果当前工作压力大，确实会顶不住。建议你慢慢来，如果真想润的话，别放弃润的目标，长期准备。正好现在大环境不好，到处裁员和缩招。另外以面代练，广撒网也很重要。不需要等准备充分了才开始投。</p>\n<p>** Q: 我想去美国。为什么大家分享从海外投美国的经验的很少呢？**</p>\n<p>A: 因为美国是计算机技术的中心，薪资、机会也很多。有不少年轻的同学可能比较向往。<br />\n不过因为美国工签（H1B）是抽签制度，十分难抽。现在从海外直接投已经几乎不可能了。<br />\n主流的方式是 1. 读美国硕士，毕业后用OPT签证（29个月）工作。2. 去美企的海外办公室，1年后 L1签证（5年） transfer到美国本土总部。<br />\n不过去了后，还是需要抽H1B才能换工作。<br />\n排绿卡又是按出生地，中国大陆和印度属于地狱级别，现在已经6年往上了。要知道，在海外工作，身份问题可是决定幸福程度的重要影响因素。</p>\n",
            "tags": [
                "life",
                "Tech"
            ]
        },
        {
            "id": "https://youngforest.github.io/2021/03/26/SSH-proxy-by-jump-server/",
            "url": "https://youngforest.github.io/2021/03/26/SSH-proxy-by-jump-server/",
            "title": "SSH 通过跳板机登陆服务器",
            "date_published": "2021-03-26T07:11:02.000Z",
            "content_html": "<h2 id=\"动机\"><a class=\"markdownIt-Anchor\" href=\"#动机\"></a> 动机</h2>\n<p>接上篇<a href=\"https://youngforest.github.io/2021/03/18/Ubuntu-vpn-cannot-access-public-resource/\">解决台式机Ubuntu VPN访问公网资源</a>的问题后，我尝试了配置跳板机访问杭研院机器。</p>\n<p>在科研工作中，MAC笔记本无法连接OpenVPN，从而访问杭研院机器。我的台式机Ubuntu已经配置好了VPN，可以访问服务器。我现在想通过台式机Ubuntu中转，从而实现MAC“直接”访问杭研院。抽象一下问题为：</p>\n<ul>\n<li>A可以访问B</li>\n<li>A不可以访问C</li>\n<li>B可以访问C</li>\n<li>我现在想A访问C</li>\n</ul>\n<p>由于工作中主要使用SSH，因此，问题简化成A通过SSH直接登陆C。<br />\n我经过不屑的网上搜索和尝试，总结了2中技术和方法实现我的目的。</p>\n<ul>\n<li>SSH 代理</li>\n<li>SSH 隧道</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"ssh-代理\"><a class=\"markdownIt-Anchor\" href=\"#ssh-代理\"></a> SSH 代理</h2>\n<p>这种方法最简单，不需要在B上进行任何操作，无缝连接C。</p>\n<p>A上执行，其中<code>rentao@10.134.150.154</code>是B，<code>ldmc@192.168.131.181</code>是C。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -o <span class=\"string\">&quot;ProxyJump rentao@10.134.150.154&quot;</span> ldmc@192.168.131.181</span><br></pre></td></tr></table></figure>\n<p>Reference: <a href=\"https://www.xiebruce.top/650.html\">穿越跳板机</a></p>\n<h2 id=\"ssh-隧道\"><a class=\"markdownIt-Anchor\" href=\"#ssh-隧道\"></a> SSH 隧道</h2>\n<p>B上执行:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -f -N -L 0.0.0.0:9906:192.168.131.181:22 ldmc@192.168.131.181</span><br></pre></td></tr></table></figure>\n<p>A上执行:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -p 9906 ldmc@10.134.150.154</span><br></pre></td></tr></table></figure>\n<p>虽然这种方法看起来更麻烦些，需要A B协作。但是相比第一种方法，其实更加灵活。可以通过SSH 隧道的方式通过B中转暴露更多C的服务（如观察训练数据的tensorboard HTTP服务也是我常需要暴露的），并不一定是SSH登陆。</p>\n<p>Reference: <a href=\"https://www.zsythink.net/archives/2450\">SSH 端口转发：SSH 隧道</a></p>\n",
            "tags": [
                "tech"
            ]
        },
        {
            "id": "https://youngforest.github.io/2018/11/05/baidu-cloud-download-speed-hack/",
            "url": "https://youngforest.github.io/2018/11/05/baidu-cloud-download-speed-hack/",
            "title": "突破百度云限速",
            "date_published": "2018-11-05T08:44:00.000Z",
            "content_html": "<p>最近因为英语学习的需要，经常到百度云上下载一些大文件。众所周知，百度云对下载进行了限速，不开他家的会员的话，下载速度只有几十k/s。实在不能忍，遂搜索了限速破解工具，下载速度达到了15M/s，哈哈。在此分享给大家。<br />\n不过需要注意的是，由于百度云也会更新限速机制，防止大家滥用。所以如果本文的方法失效的话，也不足为奇，还可以在网上寻找其他更新的方法。要相信广大程序员的力量。<br />\n截止至2018年11月5日，此方法是可行的。</p>\n<span id=\"more\"></span>\n<p><a href=\"https://github.com/gxvv/ex-baiduyunpan\">获取百度云 原始连接</a></p>\n<p>运行脚本后，百度云的下载界面会变成这个样子。</p>\n<p><img src=\"/images/ex-baiduyun.jpg\" alt=\"Ex-百度云脚本结果\" /></p>\n<p>至于为什么点压缩连接呢？因为我发现用&quot;复制链接“并不能获取文件本身的下载地址；而且下载压缩包也更快。</p>\n<p><a href=\"https://github.com/proxyee-down-org/proxyee-down\">http 多线程下载工具</a></p>\n<p><img src=\"/images/proxyee-down.png\" alt=\"下载工具效果\" /></p>\n",
            "tags": [
                "tech"
            ]
        },
        {
            "id": "https://youngforest.github.io/2018/07/03/recommender-systems-of-popular-apps/",
            "url": "https://youngforest.github.io/2018/07/03/recommender-systems-of-popular-apps/",
            "title": "论推荐系统如何改造和奴役你的思维",
            "date_published": "2018-07-03T14:55:55.000Z",
            "content_html": "<p>应园子的邀请，我撰写了一篇关于现今流行的内容app的推荐系统的研究与讨论的文章。<br />\n事情的起因是这样：<br />\n园子同学是知乎的重度用户，曾经有一段时间每天画在刷知乎的时间超过1个小时，其三观深受知乎的影响。<br />\n我提醒她：</p>\n<pre><code>不是知乎主动改造你的三观；\n而是根据知乎的推荐，你越刷只会加深自己的固有倾向。\n比如，你是一个比较右的人，推荐系统最后推的都是你愿意点进去看的。\n增加用户花在产品上的时间是推荐系统的目标，而不是解决用户的问题￼。这样想想是不是挺可怕的\n这样的推荐系统就会导致，你最后只会看到你自己想看的东西。\n</code></pre>\n<p>园子顿时对推荐系统产生了浓厚的兴趣，并“报复”我：</p>\n<pre><code>要不我给你布置个任务吧：正好你最近在研究推荐系统，要不你查查资料，看看目前各大内容APP的推荐系统都是怎么做的，有哪些思路，整理成一篇文章怎么样￼￼\n</code></pre>\n<span id=\"more\"></span>\n<p>促使我整理2个月来的实习经验，以及查阅大量公开的资料。<br />\n最后总结成为这篇对各大内容APP的推荐系统的研究文章。<br />\n本文的目标群众是每天与推荐系统打交道（使用各大内容APP）但又对推荐系统一无所知的同学。</p>\n<p>首先，根据app下载量和对园子的影响力，我认为各大内容APP有：</p>\n<ul>\n<li>知乎</li>\n<li>网易云音乐</li>\n<li>快手</li>\n<li>淘宝</li>\n</ul>\n<p>本文还用了很多来自：Netflix, Amazon, Google News, Facebook 这些国外大厂的例子对推荐系统加以说明，因为这些app虽然国内的同学不熟悉，但在推荐系统业内属于引领者。</p>\n<h2 id=\"推荐系统的2大类\"><a class=\"markdownIt-Anchor\" href=\"#推荐系统的2大类\"></a> 推荐系统的2大类</h2>\n<h3 id=\"基于内容的过滤\"><a class=\"markdownIt-Anchor\" href=\"#基于内容的过滤\"></a> 基于内容的过滤</h3>\n<p>此种过滤只依赖于item的数据。<br />\n在一个推荐系统中，被推荐和消费的就是item。如：在今日头条这样的新闻客户端中，一条新闻就是一个item，知乎 -&gt; 一个回答, 网易云音乐 -&gt; 一首歌，快手 -&gt; 一个短视频，淘宝 -&gt; 一个商品。<br />\n根据用户填的问卷信息（针对新用户。一般新用户进入一个应用时，都会选择一些自己的兴趣），或者根据用户的评分（针对老用户。老用户会产生很多评分，或其他action，体现出其兴趣），我们发现他对民谣感兴趣，我们就继续给他推荐其它他未消费过的民谣类歌曲。<br />\n这里的民谣只是一个tag，表示歌曲的类型，除此之外可能还有歌手名等tag可以利用。</p>\n<h3 id=\"协同过滤\"><a class=\"markdownIt-Anchor\" href=\"#协同过滤\"></a> 协同过滤</h3>\n<p>此种过滤依赖于其他用户的数据。<br />\n协同过滤基于这样的假设：与你类似的用户喜欢的东西，可能你也会喜欢。<br />\n这就跟你朋友推荐给你的东西与一个陌生人推荐给你的东西相比，更可能符合你的胃口。因为你的朋友在一定程度上是与你相像的，拥有一些共同的标签。而且根据心理学的研究，人们也倾向于与与自己更像的人交朋友。<br />\n协同过滤的原理简而言之就是，找到一群和你相像的用户，把他们喜欢或消费过的item推荐给你。<br />\n“相像”的定义有许多，一般会综合考虑用户的基础信息和行为信息。<br />\n比如：<br />\n如果你的基础信息中有“年龄24岁，女人”，Netflix会把24岁的女人看的多的片子也推给你。<br />\n行为信息在Amazon上的体现就是：“你买了A，大部分买了A的用户，同样也买了B，你要不要买B”。</p>\n<p>在拥有大量用户的情况下，协同过滤的效果是要好于基于内容过滤的。<br />\n其原因可以归咎为：用户自己也不能很确切地定义自己喜欢什么，然而身体是诚实的。这也说成是大数据会比你更了解你。<br />\n而且在协同过滤的帮助下，app在你的调教下会越用越好用，越用越舒心，你花在其上的时间也越来越多。<br />\n这对老用户的粘性是非常强的。不过反过来说，当你一段时间不使用该app后，你会发现其推荐的内容就不像之前那样符合你的口味了。</p>\n<p>当然基于内容的过滤也是很有用。尤其是当一个新用户刚刚登录，还未产生很多动作和基础信息来找到和他相像的人的时候。<br />\n吸引新用户是十分重要的，特别是在一个app快速成长的时期。<br />\n相对应的，业内会有1日留存率，3日留存率，7日留存率还表示推荐系统对新用户的吸引程度。</p>\n<h2 id=\"各大内容app使用的推荐系统\"><a class=\"markdownIt-Anchor\" href=\"#各大内容app使用的推荐系统\"></a> 各大内容app使用的推荐系统</h2>\n<p>各个厂用的主要推荐算法基本都属于协同过滤的那一大类，由于应用场景的不尽相同（新闻、商品、音乐、电影），使用的算法也不一样。<br />\n为了实现冷启动（新用户刚使用时获得比较好的推荐效果），各个厂也会使用基于内容的过滤和基于规则的推荐。<br />\n由于推荐系统都是基于内容的公司的核心竞争力，完全公开的是没有的。<br />\n而且据一位业界专家所说，每个厂使用的推荐算法基本相同，都是公开的那些；不一样的只是参数、数据和规则；最后推荐的结果也趋于一致。<br />\n我们只能在不同的应用场景下进行一些猜测，比如，在内容为音乐的网易云音乐会使用什么样的推荐算法。</p>\n<h3 id=\"知乎\"><a class=\"markdownIt-Anchor\" href=\"#知乎\"></a> 知乎</h3>\n<p>知乎的内容以文字为主，现在还加入了很多视频的内容。<br />\n作为一个“高素质”人群的问答社区，知乎问题的分类和描述都比较清晰，这有利于更好的推荐。<br />\n分析知乎在推荐页给我的推荐内容，知乎的推荐以回答为主，之外还有少量的live和广告。<br />\n由于我对live了解不多，这里主要猜测一下“回答”的推荐过程。<br />\n最开始知乎的首页是 推荐 和 关注 放在一起的，现在分开了，又加了热门这一页面。<br />\n通过推荐页的提示“关注话题获取精准内容推荐”，可以看出，推荐页的内容主要依据的是你关注的话题。这相当于是基于内容过滤的场景。<br />\n从结果来看，向我推荐的回答大多是我显式选择的关注话题或者是于此相关的话题（如下图2所示：话题之间有父子、相关等关系），</p>\n<p><img src=\"/assets/zhihu-recommend-page.jpg\" alt=\"推荐页\" /></p>\n<p><img src=\"/assets/zhihu-topic-page.jpg\" alt=\"相关话题页\" /></p>\n<h3 id=\"网易云音乐\"><a class=\"markdownIt-Anchor\" href=\"#网易云音乐\"></a> 网易云音乐</h3>\n<p>网易云音乐的推荐可以分为3个板块：私人FM，每日推荐，推荐歌单。</p>\n<p><img src=\"/assets/netease-music-homepage.jpg\" alt=\"网易云音乐推荐模块\" /></p>\n<p>私人FM有3个主要操作：</p>\n<ul>\n<li>喜欢</li>\n<li>删除</li>\n<li>跳过</li>\n</ul>\n<p>除此之外还有一些其他的隐式操作，如 完整听完一首歌曲，调节进度条，看评论时长等可以利用。<br />\n我们可以将这些行为分为2大类：喜欢和不喜欢。<br />\n根据程度不同，可以赋给不同操作不同的喜欢值。<br />\n如显式地点击喜欢和完整地听完这首歌都代表喜欢，不过前者更强一点，可以赋给更高的喜欢值。<br />\n用户对播放的歌曲产生的所有操作最后求和可以得到用户对这首歌的喜欢程度。<br />\n用户在听过一段时间私人FM之后，会产生一系列的操作。<br />\n我们就可以得到用户听过的所有的歌曲的喜欢程度。<br />\n利用这些信息，再通过协同过滤的一些经典算法，就可以向用户推荐他没有听过的歌曲了。<br />\n所以说，私人FM听的越多，推荐效果会越好。</p>\n<p>每日推荐一般会与你最近听过的歌曲有关。也就是说，歌曲的兴趣对今天推荐的影响随时间衰减比较快。<br />\n比如，你昨天听了电音，比较喜欢，接连听了几首，可能还“喜欢”了一些。今天的每日推荐就会推更多的电音给你。</p>\n<p>推荐歌单算是比较容易推荐的一个板块。因为歌单都是专家或是爱好者组建的，将很多歌曲按照某一标准归为一类。每个歌单还都有自己的标签可以利用。如摇滚、英伦、另类、独立。这些标签都是区分性很强的。<br />\n在向我推荐的歌单里，一般包含几首我“喜爱”的歌曲。由此可见，推荐歌单使用了“我喜欢的音乐”中的信息。如果几首你喜欢的音乐同时出现在一个歌单中，那么很大程度上可以预测，这个歌单中的其他音乐也会被你喜欢。</p>\n<h3 id=\"快手\"><a class=\"markdownIt-Anchor\" href=\"#快手\"></a> 快手</h3>\n<p>快手作为一个短视频平台，每天用户会产生大量的视频。视频相对而言是不那么好推荐的，因为</p>\n<ul>\n<li>视频内的语义现在用机器理解还是很困难的</li>\n<li>被推荐的内容几乎都是冷启动的，也就是说要争取推荐最新上传的视频</li>\n</ul>\n<p>在这种情况下，快手可能使用了标签这一信息作为推荐的主要依据。<br />\n用户上传的视频可以被用户自己打上各种标签：社会摇，炫技，教程，小吃等。<br />\n依靠这些标签把用户和视频聚成不同的类。这样新上传的视频就可以利用用户在老视频上产生的操作了。</p>\n<h3 id=\"淘宝\"><a class=\"markdownIt-Anchor\" href=\"#淘宝\"></a> 淘宝</h3>\n<p>淘宝作为一个c2c的电商平台，推荐系统的指标与其他b2c电商（如 亚马逊）有所不同。<br />\n评价一个推荐系统好坏的指标中有一个是对冷门产品的发掘能力，即对<a href=\"https://baike.baidu.com/item/%E9%95%BF%E5%B0%BE%E6%95%88%E5%BA%94\">长尾</a>的尾端进行推荐。<br />\n使用推荐系统将冷门产品的商家和顾客联系起来是淘宝的一个卖点，因为淘宝上的商品实在太多了。没有你买不到，只有你想不到。<br />\n根据亚马逊公开的一些信息，电商系统的推荐系统核心可以用一句话概括：买了商品A的人，同样也买了B，你买B呀？</p>\n<h2 id=\"为什么说推荐系统在改造和奴役你的思维\"><a class=\"markdownIt-Anchor\" href=\"#为什么说推荐系统在改造和奴役你的思维\"></a> 为什么说推荐系统在改造和奴役你的思维</h2>\n<p>对于一个内容app的推荐系统来说，推荐好不好的指标最后都会反应在用户停留在该app上的时间。<br />\n在互联网上网人数趋于饱和的情况下，整个市场用户时间数不会像之前那样快速增长，如何抢夺用户宝贵的时间就成个各个内容推荐系统的目标。<br />\n为了让你停留在本应用的时间增加，各大内容app可谓用心良苦。<br />\n如知乎现在移动端网站会向app内导流。之前即使用户不登陆、在移动端网页上也可以享受到所有的信息。<br />\n现在在移动端网页上只能看到一个回答的开始部分，想要浏览完整部分就不许下载并进入知乎的app才可以。<br />\n很大程度上降低了用户体验。比如我的朋友经常会分享一些知乎上的回答或问题给我，我必须点击多次用app打开才能看到完整信息，很是不爽。<br />\n今日头条之前也因为三俗内容被政府多次约谈。就是因为相比其他的新闻，低俗、色情的东西更容易吸引网民们的眼球。<br />\n就像本文最开始谈到的那样，推荐系统为了增加用户停留的时间。只会一味地迎合用户的喜好，无论用户的喜好是否正确。<br />\n整个过程就是一个正反馈。你思想比较右，推荐系统会推符合你口味的内容，加深你的兴趣。<br />\n对一个成年人来说，还有甄别内容和选择平台的能力。<br />\n对于广大的未成年人，无疑会是一种误导。再加上现在互联网内容的监管并不是很完善。为了利益，推荐系统推给未成年人的不会是正能量，只会是娱乐导向、甚至低俗的内容。这对未成年人的思想塑造会有很不好的影响。</p>\n<p>其实很多成年人又成熟多少呢？想想你被推荐的内容，想想你花在这些内容app上的时间。<br />\n在此引用一句古话：“良药苦口利于病，忠言逆耳利于行”。然而作为推荐系统，只会给你说好听的，你喜欢听的。<br />\n在潜移默化之中，你的思想已经被推荐系统所改造和奴役了。</p>\n<p>依赖于推荐系统的内容也是一种懒惰的表现。相比 主动去获取信息，直接接受推荐系统的内容 要容易、愉快的多。但要记住，懒惰是有代价的，你的思想将不可避免地变得狭隘。</p>\n<h2 id=\"如何避免推荐系统的恶果\"><a class=\"markdownIt-Anchor\" href=\"#如何避免推荐系统的恶果\"></a> 如何避免推荐系统的恶果</h2>\n<h3 id=\"多读书\"><a class=\"markdownIt-Anchor\" href=\"#多读书\"></a> 多读书</h3>\n<p>无论知乎给你怎样的错觉，书本上的内容在质量上还是高的多。<br />\n我最近读了一本斌卡的《一平米健身》，相比知乎上的健身类回答，内容的质量要高的多。<br />\n毕竟相比在网络上写个回答来说，出书的门槛和花费的精力要多的多。<br />\n尤其是，书本上还承载着互联网之前人们的原创思想。这是知乎上所没有的。当然，经过不断搬运，许多&quot;知乎er&quot;把书本上的知识运用在回答中。不过这些都是经过加工和断章取义的，也有不少从某本书上搬一段话就获得高赞的案例。</p>\n<h3 id=\"与优秀的人交朋友\"><a class=\"markdownIt-Anchor\" href=\"#与优秀的人交朋友\"></a> 与优秀的人交朋友</h3>\n<p>与优秀的人交朋友，聊天，比起把时间花在追随大v的言论要有用的多。<br />\n我总认为，一个人在互联网上呈现给你的是他想给你看的部分，不完全。<br />\n相比之下，虽然面对面的交流也通常是会掩盖本性的，但这种信息交互是双向的，而非通过follow关系的单向信息输出。<br />\n而且，不知道大家有没有这样的感觉。与优秀的人交流时，自己会花更多的精力去思考，而非听完就完事儿了。在知乎这些平台上，看完之后的热度保持的并不长久。</p>\n<h3 id=\"接触不同的内容才能够塑造一个完整的三观\"><a class=\"markdownIt-Anchor\" href=\"#接触不同的内容才能够塑造一个完整的三观\"></a> 接触不同的内容，才能够塑造一个完整的三观</h3>\n<p>不要只看自己喜欢的，也要听取不同的声音。党同伐异是人类的天性。如果你不刻意去避免这一人性上的缺点的话，推荐系统会像一个谄媚的奸臣一样，只说你想听的，而你可能就会想历史上的昏君一样，荒废了朝政。广开言路，逆耳忠言才是明君应有的表现。<br />\n比方说，当你听到与你不同的言论，不要先想着反驳对方，试着想想为什么对方会这样想？<br />\n每个人的想法都是其经历和体验的体现，没有相应的经历，很难会理解一些不一样的事情。这个时候不要着急去反驳对方，而是试着丰富自己的阅历。<br />\n之前说的2条“多读书、与优秀的人交朋友”都是丰富自己阅历的高效途径。</p>\n<h2 id=\"后记\"><a class=\"markdownIt-Anchor\" href=\"#后记\"></a> 后记</h2>\n<p>希望大家作为一个成年人，拥有一个独立的三观，不要被推荐系统和自己的懒惰而奴役。</p>\n",
            "tags": [
                "tech"
            ]
        },
        {
            "id": "https://youngforest.github.io/2018/05/08/ssh-login-remote-server-without-password/",
            "url": "https://youngforest.github.io/2018/05/08/ssh-login-remote-server-without-password/",
            "title": "ssh免密登陆服务器",
            "date_published": "2018-05-08T10:47:09.000Z",
            "content_html": "<p>以下命令仅针对Unix-like系统。<br />\nWindows是不需要这样的解决方法的，Windows下很多类Putty工具都可以选择&quot;记住密码&quot;来实现免密登陆。<br />\n我在Mac上没有找到类似记住密码的解决方案，但使用Key事实上是更安全的一种方式。</p>\n<span id=\"more\"></span>\n<h2 id=\"step1-生成rsa密钥对\"><a class=\"markdownIt-Anchor\" href=\"#step1-生成rsa密钥对\"></a> step1: 生成rsa密钥对</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>\n<h2 id=\"step2-上传rsa公钥到服务器\"><a class=\"markdownIt-Anchor\" href=\"#step2-上传rsa公钥到服务器\"></a> step2: 上传rsa公钥到服务器</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> id_rsa.pub | ssh -p 26757 root@138.128.193.150 <span class=\"string\">&#x27;cat &gt;&gt; .ssh/authorized_keys&#x27;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"step3-更改权限\"><a class=\"markdownIt-Anchor\" href=\"#step3-更改权限\"></a> step3: 更改权限</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -p 26757 root@138.128.193.150 <span class=\"string\">&quot;chmod 700 .ssh; chmod 640 .ssh/authorized_keys&quot;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"step4-success\"><a class=\"markdownIt-Anchor\" href=\"#step4-success\"></a> step4: success!</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -p 26757 root@138.128.193.150</span><br></pre></td></tr></table></figure>\n<p>reference:<br />\n<a href=\"https://www.tecmint.com/ssh-passwordless-login-using-ssh-keygen-in-5-easy-steps/\">ssh-passwordless-login-using-ssh-keygen-in-5-easy-steps</a></p>\n",
            "tags": [
                "tech"
            ]
        },
        {
            "id": "https://youngforest.github.io/2018/05/07/Advanced-SQL-practice/",
            "url": "https://youngforest.github.io/2018/05/07/Advanced-SQL-practice/",
            "title": "SQL实践进阶",
            "date_published": "2018-05-07T15:30:25.000Z",
            "content_html": "<p>这一周在公司写了很多很长功能很复杂的sql语句，深感自己的数据库和SQL学的还只是皮毛，完全没法满足工程上的要求。<br />\n负责带我的二mentor对SQL比较也精通，对我有很多指导和建议。<br />\n没有对比就没有伤害，自己的菜和师兄的强让我知耻而后勇，有了进阶SQL的想法和行动。</p>\n<span id=\"more\"></span>\n<p>我被推荐的2份教程（感谢快手师兄和二mentor）：</p>\n<ul>\n<li>sql必知必会</li>\n<li><a href=\"http://www.runoob.com/sql/sql-constraints.html\">runoob</a></li>\n</ul>\n<p>其中《sql必知必会》我系统的看过一遍，runoob教程只是大致浏览一遍。<br />\n我认为只看一个教程就够了。<br />\nrunoob的优点是可以在网站提供的线上数据库进行测试和练习，这一点和<a href=\"https://www.w3schools.com/sql/\">w3school的教程</a>有些像。<br />\n《sql必知必会》的优点是内容比较多，作者会传授一些写sql的经验，还会涉及到不同数据库的移植性和区别。</p>\n<p><a href=\"https://leetcode.com/problemset/database/\">leetcode上有42道Database的面试题目</a>，有时间一定要刷一刷。</p>\n<h1 id=\"实践中遇到的问题\"><a class=\"markdownIt-Anchor\" href=\"#实践中遇到的问题\"></a> 实践中遇到的问题</h1>\n<p>由于我的岗位是推荐组的算法工程师，有大量的数据挖掘的需要。<br />\n而且写的不是纯sql，而是<a href=\"https://cwiki.apache.org/confluence/display/Hive/Home\">Hive</a>-sql。<br />\nHive上存在很多限制和挑战，比如不能在select中嵌套select子句，<code>select 2 * (select 3);</code>就是不可以的（最后摸索出得解决方案是：使用聚集函数或列之间的可计算进行需要的计算，这就很考验<code>union</code>或<code>join</code>的灵活使用了。）；数据量特别大，每次查询很耗时（学会了用小的查询验证想法，从内到外层层验证，还有在‘jupyter notebook’上进行查询和计算）。</p>\n<h1 id=\"回答面试中的问题\"><a class=\"markdownIt-Anchor\" href=\"#回答面试中的问题\"></a> 回答面试中的问题</h1>\n<p>一面的小哥哥当时问我：你会SQL吗？</p>\n<p>我：会，而且我之前还有在数据库公司的实习经历。</p>\n<p>小哥哥：那你说说‘left join’，‘right join’，'inner join’的区别。</p>\n<p>我：不知道…</p>\n<p>小哥哥：那你知道partition吗？</p>\n<p>我：这个我也不知道。</p>\n<p>小哥哥：你会的SQL仅限于上过的“数据库原理”和“课程设计”课吗？</p>\n<p>我：是的，而且因为一段时间不用有些生疏了。</p>\n<p>小哥哥就没再问SQL相关的内容了。</p>\n<p>经过一周的工作和SQL的重新系统学习，我现在可以回答这两个问题了。</p>\n<h3 id=\"left-joinright-joininner-join的区别\"><a class=\"markdownIt-Anchor\" href=\"#left-joinright-joininner-join的区别\"></a> ‘left join’，‘right join’，'inner join’的区别</h3>\n<p>'inner join’即内联结，对于不匹配的项，不存在于联结结果中；‘left join’，左外联结，如果左边的项在右边的表中没有匹配项，仍存在一条记录于联结结果中，此时右边表列均为NULL；‘right join’，右联结与之类似。事实上，'left join’和’right join’可以互换，只是联结的左右两表也需要互换位置。</p>\n<h3 id=\"partition的概念\"><a class=\"markdownIt-Anchor\" href=\"#partition的概念\"></a> partition的概念</h3>\n<p>partion是为了加快查询速度，而将一个表分成不同的区。<br />\n限制是，select时，被partition的列必须写在where里作为filter。</p>\n",
            "tags": [
                "tech",
                "kuaishou"
            ]
        }
    ]
}