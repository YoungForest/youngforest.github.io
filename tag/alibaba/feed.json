{
    "version": "https://jsonfeed.org/version/1",
    "title": "YoungForest's blog • All posts by \"alibaba\" tag",
    "description": "佛系更新；生活、学习",
    "home_page_url": "https://youngforest.github.io",
    "items": [
        {
            "id": "https://youngforest.github.io/2020/03/09/Alibaba-Ant-backend-intern-interview/",
            "url": "https://youngforest.github.io/2020/03/09/Alibaba-Ant-backend-intern-interview/",
            "title": "阿里巴巴 蚂蚁金服 后端开发 暑期实习生",
            "date_published": "2020-03-09T16:45:44.000Z",
            "content_html": "<h1 id=\"一面\"><a class=\"markdownIt-Anchor\" href=\"#一面\"></a> 一面</h1>\n<p>time: 2020-03-09 16:45:44</p>\n<h2 id=\"简历经历\"><a class=\"markdownIt-Anchor\" href=\"#简历经历\"></a> 简历经历</h2>\n<p>对各段项目的介绍。根据项目随时提问，如RESTful API, SOAP之类的知识。</p>\n<h2 id=\"计算机基础\"><a class=\"markdownIt-Anchor\" href=\"#计算机基础\"></a> 计算机基础</h2>\n<p>HashMap 的实现</p>\n<ul>\n<li>Hash值如何映射到桶中？？？？</li>\n<li>hashcode和equals函数的要求（修改equals为什么必须要修改hashcode)</li>\n<li>扩容机制和均摊复杂度</li>\n</ul>\n<p>Java 开箱 和 装箱 机制。（一开始没反应过来，说不会。在面试官的提醒下，基础类型 和 对象类型 的关系，我才会了。因为之前看的都是英文材料，box和unbox，对中文不是很敏感。）</p>\n<h2 id=\"算法题\"><a class=\"markdownIt-Anchor\" href=\"#算法题\"></a> 算法题</h2>\n<p>编辑距离的递推公式</p>\n<p>K-means算法。没答好，很久之前学过机器学习。但是因为放下的时间太久了，几乎都忘记了。</p>\n<h2 id=\"对面试官的反问\"><a class=\"markdownIt-Anchor\" href=\"#对面试官的反问\"></a> 对面试官的反问</h2>\n<p>问面试官的问题：我投递的岗位是 后端开发，是否需要复习机器学习的算法？</p>\n<p>答：这和公司的产品线有关，蚂蚁金服的产品和机器学习密切相关。开发不需要对机器学习有很深的了解，但需要有基础的了解。如果会的话，有加分。</p>\n<h1 id=\"二面\"><a class=\"markdownIt-Anchor\" href=\"#二面\"></a> 二面</h1>\n<p>time: 2020-03-24 16:20:56</p>\n<p>距离一面已经2周了，昨天收到电话，约了今天下午3点的电话面试。时长半个小时。</p>\n<p>商汤实习项目。</p>\n<p>ArrayList（自增数组）实现，底层链表和数组的区别。</p>\n<p>1千万个数共10M，内存只有2M, 寻找出现次数最多的10个数字。<br />\n答：先分组，可以按照数字的个别数位来分成小组，在每个组里寻找这10个数字。在合并，寻找总的10个数字。</p>\n<p>看了哪些书？</p>\n<p>熟悉SQL是个啥意思？</p>\n<p>并发的知识:</p>\n<ul>\n<li>ConcurrencyHashMap</li>\n<li>无锁编程</li>\n</ul>\n<p>职业规划。</p>\n<p>大概回答的不是很好，面试官催促我完成笔试，要不然只能问我简历上的内容。笔试完会有人再联系我。今天下午状态不大好，没发挥好。没有手撕代码环节，差评～</p>\n<h1 id=\"笔试\"><a class=\"markdownIt-Anchor\" href=\"#笔试\"></a> 笔试</h1>\n<p>阿里笔试有多场。我做的是3.25这天的。</p>\n<p>笔试难度不大，在牛客网上完成，2道算法题，LeetCode medium难度。拿了满分，导致貌似阿里那边觉得我很优秀，后面的流程就顺风顺水，特别想我过去。好多同事和lead加我微信，打电话劝我。所以最后拒阿里offer时还挺不好意思的。</p>\n<blockquote>\n<p>给3xn的矩阵，每列选择其中的一个数, 形成最后的数组。<br />\n使得最后的</p>\n</blockquote>\n<blockquote>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></munderover><mi mathvariant=\"normal\">∣</mi><msub><mi>b</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>−</mo><msub><mi>b</mi><mi>i</mi></msub><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">\\sum_{i = 0}^{n-1} |b_{i+1} - b_i|\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:3.0787820000000004em;vertical-align:-1.277669em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8011130000000004em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.300005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">∣</span></span></span></span></span></p>\n<p>最小。<br />\n输出最小的这个值。</p>\n</blockquote>\n<p>DP求解即可。</p>\n<p>时间复杂度: O(3N),<br />\n空间复杂度: O(3).</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```cpp</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;ll&gt; <span class=\"title\">last_dp</span><span class=\"params\">(<span class=\"number\">3</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    vector&lt;vector&lt;ll&gt;&gt; <span class=\"built_in\">matrix</span>(<span class=\"number\">3</span>, <span class=\"built_in\">vector</span>&lt;ll&gt; (n));</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j) &#123;</span><br><span class=\"line\">            cin &gt;&gt; matrix[i][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;ll&gt; <span class=\"title\">dp</span><span class=\"params\">(<span class=\"number\">3</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> dp_index = <span class=\"number\">0</span>; dp_index &lt; <span class=\"number\">3</span>; ++dp_index) &#123;</span><br><span class=\"line\">            dp[dp_index] = <span class=\"built_in\">abs</span>(matrix[dp_index][i] - matrix[<span class=\"number\">0</span>][i<span class=\"number\">-1</span>]) + last_dp[<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt; <span class=\"number\">3</span>; ++j) &#123;</span><br><span class=\"line\">                ll new_value = <span class=\"built_in\">abs</span>(matrix[dp_index][i] - matrix[j][i<span class=\"number\">-1</span>]) + last_dp[j];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (new_value &lt; dp[dp_index]) &#123;</span><br><span class=\"line\">                    dp[dp_index] = new_value;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        last_dp = <span class=\"built_in\">move</span>(dp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt;  <span class=\"built_in\">min</span>(&#123;last_dp[<span class=\"number\">0</span>], last_dp[<span class=\"number\">1</span>], last_dp[<span class=\"number\">2</span>]&#125;) &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr />\n<blockquote>\n<p>一个n x m的矩阵，每列每行都是等差数列，公差为整数。<br />\n输入n x m个数，如果为0表示不知道，否则知道。<br />\nq个查询，特定位置（下标1开始）的值是否可确定。</p>\n</blockquote>\n<p>递归求解，进行推测即可。可以用一些数组维护：每行/列是否已经被推断、每行/列已知道的数的下标、行列信息。</p>\n<p>时间复杂度: O(N * M),<br />\n空间复杂度: O(N * M).</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;functional&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> INF = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, m, q;</span><br><span class=\"line\">    cin &gt;&gt;  n &gt;&gt; m &gt;&gt; q;</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">A</span>(n, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; (m, INF));</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">row</span><span class=\"params\">(n, <span class=\"number\">-1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">bool</span>&gt; <span class=\"title\">row_ok</span><span class=\"params\">(n, <span class=\"literal\">false</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">col</span><span class=\"params\">(m, <span class=\"number\">-1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">bool</span>&gt; <span class=\"title\">col_ok</span><span class=\"params\">(m, <span class=\"literal\">false</span>)</span></span>;</span><br><span class=\"line\">    function&lt;<span class=\"type\">void</span>(<span class=\"type\">int</span>, <span class=\"type\">int</span>, <span class=\"type\">int</span>)&gt; fill = [&amp;](<span class=\"type\">int</span> i, <span class=\"type\">int</span> j, <span class=\"type\">int</span> value) -&gt; <span class=\"type\">void</span> &#123;</span><br><span class=\"line\">        A[i][j] = value;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (col_ok[j] &amp;&amp; row_ok[i]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!col_ok[j]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (col[j] == <span class=\"number\">-1</span> || col[j] == i) &#123;</span><br><span class=\"line\">                    col[j] = i;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    col_ok[j] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    <span class=\"type\">int</span> diff = (A[i][j] - A[col[j]][j]) / (i - col[j]);</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> r = i - <span class=\"number\">1</span>; r &gt;= <span class=\"number\">0</span>; --r) &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">fill</span>(r, j, A[r + <span class=\"number\">1</span>][j] - diff);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> r = i + <span class=\"number\">1</span>; r &lt; n; ++r) &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">fill</span>(r, j, A[r - <span class=\"number\">1</span>][j] + diff);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!row_ok[i]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (row[i] == <span class=\"number\">-1</span> || row[i] == j) &#123;</span><br><span class=\"line\">                    row[i] = j;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    row_ok[i] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    <span class=\"type\">int</span> diff = (A[i][j] - A[i][row[i]]) / (j - row[i]);</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> c = j - <span class=\"number\">1</span>; c &gt;= <span class=\"number\">0</span>; --c) &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">fill</span>(i, c, A[i][c + <span class=\"number\">1</span>] - diff);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> c = j + <span class=\"number\">1</span>; c &lt; m; ++c) &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">fill</span>(i, c, A[i][c - <span class=\"number\">1</span>] + diff);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; m; ++j) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> v;</span><br><span class=\"line\">            cin &gt;&gt; v;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (v != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">fill</span>(i, j, v);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; q; ++i) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> r, c;</span><br><span class=\"line\">        cin &gt;&gt; r &gt;&gt; c;</span><br><span class=\"line\">        --r;</span><br><span class=\"line\">        --c;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (A[r][c] == INF) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;Unknown&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            cout &lt;&lt; A[r][c] &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"测评\"><a class=\"markdownIt-Anchor\" href=\"#测评\"></a> 测评</h1>\n<p>笔试没难倒我，测试却花了我不少时间。<br />\n主要是测试</p>\n<ul>\n<li>语文：阅读理解、成语使用、归纳和排除 10min</li>\n<li>数学：表格、图、经济用语 10min</li>\n<li>智商：看图找规律 10min</li>\n<li>性格：是否抗压、反社会 30min</li>\n</ul>\n<p>全靠高中学习到的知识和技能。智商就天生的呗。<br />\n据说和公务员的考试很像，行测。有了解的朋友可以看看。</p>\n<p>应该也不会用测评去筛人，又不是考公务员，手撕代码才是王道。</p>\n<h1 id=\"三面\"><a class=\"markdownIt-Anchor\" href=\"#三面\"></a> 三面</h1>\n<p>time: 2020-04-03 11:36:14</p>\n<p>昨天电话约了今天的电话面试，11:30，聊了40分钟。<br />\n昨天下午做了阿里的线上笔试，晚上做了测评。</p>\n<p>面试官很NICE，还加了我微信进行沟通。<br />\n主要聊了项目，还有一些数据处理的知识和Java的了解。</p>\n<ul>\n<li>数据预处理，对缺失值的处理</li>\n<li>给一个信用评估的数据，如何利用和上线</li>\n<li>Java了解程度和使用，Spring boot</li>\n</ul>\n<p>最后问了英语怎样，口语如何。可能是因为对方是 国际化事业群 吧。</p>\n<p>我最后问了面试官所在的组和业务。<br />\n面向海外的个人信贷业务，类似花呗和借呗。</p>\n<h1 id=\"四面\"><a class=\"markdownIt-Anchor\" href=\"#四面\"></a> 四面</h1>\n<p>time: 2020-04-03 15:22:02</p>\n<p>上周和HR约了这周的交叉面。本来是周一的视频面试，后来面试官出差了，换了一个面试官，改约周三（4.1）。而且新的面试官很忙，没有约具体时间，只是让我下午和晚上等电话。晚上7点半收到电话，聊了40min。</p>\n<p>面试因为只是电话面试，无法手撕代码，只问了一个简单的算法题：桶排序。<br />\n除此之外都是项目，但项目问的很深，很细节。我简历上的实习项目都是当时花了很大功夫完成的，但无奈过去的时间过于久远，很多细节和考虑一时也无法答上来。而且当时做实习的时候更多的是着眼眼前遇到的困难，而不是深入了解整个公司的架构，所以答的并不是很好。面试官问了很多BQ(Behavior Question)的问题。如：</p>\n<ul>\n<li>你之前项目上遇到的最大的困难是什么？</li>\n<li>你实习时发生的最难过的事是？</li>\n<li>你之前坚持过最久的事是？<br />\n了解的都很细，很多问题我从未遇到，也没有认真思考过。之前听说外企才有BQ，而且也大都是HR问。所以虽然不手撕代码，但全程依然很累。</li>\n</ul>\n<p>最后面试官问 我还有什么问题吗？我竟然说“没什么问题了，我家长叫我吃饭呢！”这样的大实话。哈哈～</p>\n<p>昨天接到电话，又约了下周二(4.7)的HR面。愿一切顺利。</p>\n<p>现在最担心的是因为疫情的原因，暑假都不一定有了，暑期实习恐怕也去不了。</p>\n<p>Google的面试进度也停了3周。说是因为实习生招收政策的调整，要推迟到4月中。听过美国疫情很严重，发的offer很多都鸽了。难倒谷歌中国也要减少HC，有同学知道内部消息不？我苦呀！</p>\n",
            "tags": [
                "intern",
                "Alibaba"
            ]
        },
        {
            "id": "https://youngforest.github.io/2020/03/04/Alibaba-Dingding-backend-intern-interview/",
            "url": "https://youngforest.github.io/2020/03/04/Alibaba-Dingding-backend-intern-interview/",
            "title": "阿里钉钉 服务器开发 暑期实习生 面试",
            "date_published": "2020-03-04T19:34:08.000Z",
            "content_html": "<p>通过钉钉电话视频面试，手撕代码通过阿里在线平台完成。</p>\n<p>算法题2道：</p>\n<p>1. 实现一个双向链表的数据结构。</p>\n<p>2. twoSum。寻找数组中2数和等于target的下标。</p>\n<p>难度属于LeetCode Easy吧。但是面试时，需要自己和面试官询问沟通好理解题目。并且面试官很注重代码的整洁和效率。比如 函数参数的检查，实现本身的预设。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//评测题目: 实现一个简单的双向链表，要求完成 node和list的构造函数，以及 list类的void push_back(node*), void remove(node*) 方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">node</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tnode* prev;</span><br><span class=\"line\">\tnode* next;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">node</span>() &#123;</span><br><span class=\"line\">      prev = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">      next = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">list</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tnode* head;</span><br><span class=\"line\">\tnode* tail;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">list</span>() &#123;</span><br><span class=\"line\">      head = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">      tail = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push_back</span><span class=\"params\">(node* n)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 假设n不在list中</span></span><br><span class=\"line\">    \t<span class=\"keyword\">if</span> (n) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (tail) &#123;</span><br><span class=\"line\">          \ttail-&gt;next = n;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            head = n;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          n-&gt;prev = tail;</span><br><span class=\"line\">          tail = n;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">remove</span><span class=\"params\">(node* n)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (n == <span class=\"literal\">nullptr</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"keyword\">auto</span> current = head;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (current) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (current == n) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// find</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (current-&gt;prev &amp;&amp; current-&gt;next) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> p = current-&gt;prev;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> n = current-&gt;next;</span><br><span class=\"line\">            p-&gt;next = n;</span><br><span class=\"line\">            n-&gt;prev = p;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (current-&gt;prev) &#123;</span><br><span class=\"line\">            tail = current-&gt;prev;</span><br><span class=\"line\">            tail-&gt;next = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">            current-&gt;prev = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (current-&gt;next) &#123;</span><br><span class=\"line\">            head = current-&gt;next;</span><br><span class=\"line\">            head-&gt;prev = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">            current-&gt;next = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            head = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">            tail = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        current = current-&gt;next;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//给定一个vecotr&lt;int&gt;v和一个目标target，找到v中两个数字的和等于target，返回数字在原数组中的下标（多个解的返回任意一个即可），无解返回空vector。</span></span><br><span class=\"line\"><span class=\"comment\">//Example:  v=[7,11,2,15],target=9,</span></span><br><span class=\"line\"><span class=\"comment\">//因为nums[0]+nums[2]=7+2=9, </span></span><br><span class=\"line\"><span class=\"comment\">//return[0,2].</span></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">helper</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; v,<span class=\"type\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">\tvector&lt;<span class=\"type\">int</span>&gt; copy = v;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(copy.<span class=\"built_in\">begin</span>(), copy.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    <span class=\"type\">int</span> left = <span class=\"number\">0</span>, right = v.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> current_sum = copy[left] + copy[right];</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span> (current_sum == target) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> &#123;copy[left], copy[right]&#125;;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (current_sum &lt; target) &#123;</span><br><span class=\"line\">          ++left;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          --right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">twoSum</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; v,<span class=\"type\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (v.<span class=\"built_in\">size</span>() &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> values = <span class=\"built_in\">helper</span>(v, target);</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span> (values.<span class=\"built_in\">empty</span>()) <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">ans</span><span class=\"params\">(<span class=\"number\">2</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> index =  <span class=\"number\">0</span>;</span><br><span class=\"line\">  \t</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (values[<span class=\"number\">0</span>] == values[<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; v.<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (v[i]  == values[<span class=\"number\">0</span>])  &#123;</span><br><span class=\"line\">            ans[index] = i;</span><br><span class=\"line\">            ++index;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (index == <span class=\"number\">2</span>)</span><br><span class=\"line\">              <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; v.<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (v[i] == values[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">            ans[<span class=\"number\">0</span>] = i;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (v[i] == values[<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            ans[<span class=\"number\">1</span>] = i;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我的主语言是C++，所以问了很多C++相关的题目。</p>\n<p>从我的简历里，看了我的<a href=\"https://github.com/YoungForest\">GitHub主页</a>。询问了最想介绍的项目。我介绍了自己大三时实现的<a href=\"https://github.com/YoungForest/C0Compiler\">编译器</a>。然后询问了编译的一些过程和数据结构，如 词法分析、语法分析、中间代码生成、目标代码生成、优化，符号表、DAG图优化等。</p>\n<p>C++中输入<code>&gt;&gt;</code>和模版嵌套时’&gt;&gt;<code>在编译时如何区分。我答应该是语法分析时就可以区别开。然后聊了些这个故事的历史，之前模版的</code>&gt;&gt;<code>必需写成</code>&gt; &gt;`才能编译通过。</p>\n<p>C++ HashMap容器的实现，和hash值如何映射到桶中。<br />\nSTL 中vector的扩容实现。<br />\nnew 和 malloc的区别。<br />\nmove语义和右值引用。<br />\nweak_ptr, shared_ptr, unique_ptr的区别。</p>\n<p>平时对什么感兴趣，高级的数据结构:<br />\nOrder tree, 线段树。</p>\n<p>快排和堆排的实现。最小堆的维护。</p>\n<p>进程和线程的区别。</p>\n<p>锁的种类 和 读写控制。</p>\n<p>Linux内存管理机制。</p>\n<p>常用的shell命令。文件操作、进程信息(top, ps)、堆栈信息(lldb).</p>\n<p>TCP丢包处理。这题我答的不好，大三下学的计算机网络很多知识都忘记了。</p>\n<p>24点的智力游戏，4 4 10 10， （10 * 10 - 4) / 4。<br />\n我一开始以为是编程问题，答曰回溯。后来才发现是纯考智力。</p>\n<p>职业规划。</p>\n",
            "tags": [
                "intern",
                "Alibaba"
            ]
        }
    ]
}