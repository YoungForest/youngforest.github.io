{
    "version": "https://jsonfeed.org/version/1",
    "title": "YoungForest's blog • All posts by \"tencent\" tag",
    "description": "佛系更新；生活、学习",
    "home_page_url": "https://youngforest.github.io",
    "items": [
        {
            "id": "https://youngforest.github.io/2020/03/11/Tencent-WeChat-backend-intern-interview/",
            "url": "https://youngforest.github.io/2020/03/11/Tencent-WeChat-backend-intern-interview/",
            "title": "腾讯 微信事业部 暑期实习生 面试",
            "date_published": "2020-03-11T02:28:43.000Z",
            "content_html": "<h1 id=\"一面\"><a class=\"markdownIt-Anchor\" href=\"#一面\"></a> 一面</h1>\n<p>time: 2020-03-11 10:28:43</p>\n<p>上周HR联系沟通了下意向工作城市，但是没约具体面试时间。</p>\n<p>昨晚8点半忽然接到广东深圳的电话，问是否方便，直接开始了面试（惊不惊喜，刺不刺激？）。面试官网还不太好，中间出了不少问题。比如手撕代码时，对方网站内容不能及时刷新。</p>\n<h2 id=\"计算机基础\"><a class=\"markdownIt-Anchor\" href=\"#计算机基础\"></a> 计算机基础</h2>\n<h3 id=\"分布式-深度学习\"><a class=\"markdownIt-Anchor\" href=\"#分布式-深度学习\"></a> 分布式、深度学习</h3>\n<p>BN层，dropout。如何计算？<br />\nBN: mean, valence。</p>\n<p>单机训练 和 多机训练 区别。</p>\n<p>多机训练时，如何把各个单机得到的loss reduce下。</p>\n<p>数据并行训练 和 模型并行训练。</p>\n<p>百亿级特征训练。百亿级是指？</p>\n<h3 id=\"语言基础-c\"><a class=\"markdownIt-Anchor\" href=\"#语言基础-c\"></a> 语言基础 C++</h3>\n<p>hashtable实现</p>\n<p>shared_ptr, unique_ptr, weak_ptr 区别</p>\n<p>move语义</p>\n<h2 id=\"算法题\"><a class=\"markdownIt-Anchor\" href=\"#算法题\"></a> 算法题</h2>\n<p>二叉树深度。</p>\n<p>二维数组，横竖都非递减，寻找目标值。<code>O(m + n)</code>。<a href=\"https://leetcode.com/problems/search-a-2d-matrix-ii/description/\">leetcode240</a></p>\n<h2 id=\"反问\"><a class=\"markdownIt-Anchor\" href=\"#反问\"></a> 反问</h2>\n<p>问题：贵组的工作内容，为何问如此多深度学习和分布式的问题？</p>\n<p>答：大规模分布式训练框架，技术栈：C++，Python</p>\n<h1 id=\"二面\"><a class=\"markdownIt-Anchor\" href=\"#二面\"></a> 二面</h1>\n<p>time: 2020-03-17 21:59:18</p>\n<p>等了一周，终于等来了第一个复试。和上次面我的面试官是同组的。应该是因为技术栈比较契合，所以被分布式训练框架组把简历给捞出来了。</p>\n<p>首先问了很多项目和实习经历相关的内容。比如最有挑战性的任务，遇到的困难，怎么解决的？我按照传说中的STAR方法回答了，但是面试官好像并不是很满意。我平时最不擅长讲这些，面试多了也学会一点。还是手撕代码来的干脆和直接（以Google为代表，上来就是干），就像八股文一样，也好准备。</p>\n<p>基础知识:</p>\n<ul>\n<li>shared_ptr, unique-ptr的区别</li>\n<li>死锁的必要条件和解决方法</li>\n<li>TCP，UDP的区别</li>\n<li>TCP如何保证可靠</li>\n</ul>\n<p>分布式：</p>\n<ul>\n<li>pytorch的架构、类和C++接口的封装，语言之间的调用</li>\n<li>多机多卡训练如何更新参数</li>\n</ul>\n<p>算法题：</p>\n<p>给定一个很长的有序数组，和另一个无序数组，将无序数组插入有序数组中，需要保证结果仍然有序。</p>\n<p>Given sorted vector sorted_a and unsorted vector b;   size of a is about 1G<br />\nvector<int> sorted_a;<br />\nvector<int> b;<br />\ninsert b to sorted_a as fast as possible, result sorted_a should be sorted, too.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insertSortedVector</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; sorted_a, vector&lt;<span class=\"type\">int</span>&gt;&amp; b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sorted_a.<span class=\"built_in\">emtpy</span>() || b.<span class=\"built_in\">empty</span>()) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(b.<span class=\"built_in\">begin</span>(), b.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        <span class=\"type\">int</span> a_tail = sorted_a.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> b_tail = b.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">        sorted_a.<span class=\"built_in\">resize</span>(sorted_a.<span class=\"built_in\">size</span>() + b.<span class=\"built_in\">size</span>()); <span class=\"comment\">// 可能有 sorted_a.size()</span></span><br><span class=\"line\">        <span class=\"type\">int</span> after_tail = sorted_a.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (a_tail &gt;= <span class=\"number\">0</span> &amp;&amp; b_tail &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sorted_a[a_tail] &gt; b[b_tail]) &#123;</span><br><span class=\"line\">            sorted_a[after_tail] = sorted_a[a_tail];</span><br><span class=\"line\">            --a_tail;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            sorted_a[after_tail] = b[b_tail];</span><br><span class=\"line\">            --b_tail;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        --after_tail;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (b_tail &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        sorted_a[after_tail] = b[b_tail];</span><br><span class=\"line\">        --b_tail;</span><br><span class=\"line\">        --after_tail</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time: O(a.size() + b.size() * log b.size())<br />\nSpace: O(1)</p>\n<p>写完代码后让我不停的优化，提示不是在时间复杂度级别的优化。我找了好几处（上面的代码是我的最终版本），最后才让面试官满意。</p>\n<h1 id=\"三面\"><a class=\"markdownIt-Anchor\" href=\"#三面\"></a> 三面</h1>\n<p>time: 2020-03-19 09:06:13</p>\n<p>昨天下午刚刚结束二面，今天下午接到HR的电话，约了晚上8点的面试。通过牛客网的平台，视频面试+手撕代码。共1个小时20分钟。</p>\n<p>上来简短的自我介绍之后就开始了手撕代码了，我喜欢。共4道题目,都不难，LeetCode Easy/Medium水平。就是前2题一定要用C写比较不舒服。</p>\n<p>手撕了50min代码，开始基础知识问答，包括操作系统、计算机网络、数据库、数据结构等。面试官那里估计有一个问题列表，问的很快，很多。我回答后就记下些什么。我没有准备过计算机基础的面试内容，全靠本科时认真学习残留下来的那些知识。大多数都足够了。印象深刻的只有没答上来的：</p>\n<ul>\n<li>TCP 拥塞控制 和 流量控制 的区别和实现</li>\n<li>数据库中 聚簇索引 和 普通索引的区别</li>\n<li>IO的异步、阻塞、多路复用 的区别</li>\n</ul>\n<p>接下来又问了之前的实习和项目经历。我写了5个，问了3个，问的还很细。</p>\n<p>问完之后，面试官很干脆的就结束了面试。我从高强度的面试状态中久久不能恢复。</p>\n<p>3次面试2次都是晚上进行，加班状态可以看到。只有3面的面试官开了视频，看到大佬的发际线，我感觉自己实力实在太弱了。</p>\n<h1 id=\"四面\"><a class=\"markdownIt-Anchor\" href=\"#四面\"></a> 四面</h1>\n<p>time: 2020-03-19 23:53:31</p>\n<p>昨天晚上刚刚结束了三面，今天早上收到四面的电话，约了晚上的面试。</p>\n<p>上来先刚了3道算法题，我喜欢。</p>\n<p>- 递增循环整数数组，从里面找出最小的元素</p>\n<ul>\n<li>在二叉排序树上面找出第3大的节点</li>\n<li>打印变长为n的回形矩阵</li>\n</ul>\n<p>然后就问了项目和实习经历，快手的2个项目和HAWQ修改BUG的经历。</p>\n<p>问了面试官，join.qq.com上的状态为什么只有1次面试的状态。<br />\n答曰：同一个候选人，会被不同的组挑到，然后面试。怪不得1面、2面 和 3面、4面无论是面试风格、问题、还是平台都有所区别。</p>\n<p>1、2面是明显的分布式框架组的。3、4面可能不是，忘记问了。</p>\n<p>下午还参加了微软SWE intern的面试，当时就觉得凉了，晚上果然收到Thank you Letter. 一首凉凉送给自己。秋招加油，再接再厉！</p>\n<h1 id=\"五面\"><a class=\"markdownIt-Anchor\" href=\"#五面\"></a> 五面</h1>\n<p>time: 2020-03-20 17:40:42</p>\n<p>今天面完米哈游后，正在做快手的评测，忽然收到要半个小时后5点的电话面试。</p>\n<p>说实话，面到第五面我已经心力交瘁了，想要疯狂吐槽了。不过五面十分简单，只持续了15min。</p>\n<p>自我介绍 + 项目 + 计算机基础。</p>\n<p>计算机基础问了三、四面我没答上来的问题，应该是故意的。不过好在我每次面试完都会进行总结，复习没答上来的知识。</p>\n<p>你认为你的优点和缺点是啥？</p>\n<ul>\n<li>优点：计算机基础扎实、算法没问题</li>\n<li>缺点：不适合科研，创新、创造能力不足</li>\n</ul>\n<p>之前实习换公司的原因。<br />\n可以实习的时间和方式？</p>\n<p>接下来等HR面。</p>\n<p>他是 微信搜索服务 组的。三、四面 也是。前2面是分布式框架组的，无论是面试方式还是内容都有所不同。他说应该是 分布式训练框架组 我没过，然后简历释放出来给了他们组。他只能看到三、四面的面试评价，跨组的就是不透明的。我确实对分布式训练的基础知识和经验不足。<br />\n我也能理解为啥要有5次面试了。</p>\n<h1 id=\"七面\"><a class=\"markdownIt-Anchor\" href=\"#七面\"></a> 七面</h1>\n<p>time: 2020-03-31 19:22:14</p>\n<p>上周三约了HR面试，闲聊了半天，和技术面的套路差别很大。因为我说我实习想在北京，所以又约了这周一（今天）下午的一次北京同事的技术面试。北京这边应该就只有一个技术面试，还有HR面试。</p>\n<p>视频面试采用牛客网平台，分为 项目、算法、数据结构、计算机基础。</p>\n<h2 id=\"算法题-2\"><a class=\"markdownIt-Anchor\" href=\"#算法题-2\"></a> 算法题</h2>\n<blockquote>\n<p>逛街<br />\n小Q在周末的时候和他的小伙伴来到大城市逛街，一条步行街上有很多高楼，共有n座高楼排成一行。<br />\n小Q从第一栋一直走到了最后一栋，小Q从来都没有见到这么多的楼，所以他想知道他在每栋楼的位置处能看到多少栋楼呢？（当前面的楼的高度大于等于后面的楼时，后面的楼将被挡住）<br />\n输入描述<br />\n输入第一行将包含一个数字n，代表楼的栋数，接下来的一行将包含n个数字wi(1&lt;=i&lt;=n)，代表每一栋楼的高度。<br />\n1&lt;=n&lt;=100000;<br />\n1&lt;=wi&lt;=100000;<br />\n输出描述<br />\n输出一行，包含空格分割的n个数字vi，分别代表小Q在第i栋楼时能看到的楼的数量。<br />\n示例1<br />\n输入<br />\n6<br />\n5 3 8 3 2 5<br />\n输出<br />\n3 3 5 4 4 4<br />\n说明<br />\n当小Q处于位置3时，他可以向前看到位置2,1处的楼，向后看到位置4,6处的楼，加上第3栋楼，共可看到5栋楼。当小Q处于位置4时，他可以向前看到位置3处的楼，向后看到位置5,6处的楼，加上第4栋楼，共可看到4栋楼。</p>\n</blockquote>\n<p>LeetCode medium难度，秒杀，正反使用2次单调递减栈即可。需要注意的是，看到的楼包括当前楼，所以当前楼会正反计算2次，最后需要减1。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span>  std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">height</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">        cin &gt;&gt; height[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">ans</span><span class=\"params\">(n, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    stack&lt;<span class=\"type\">int</span>&gt; s;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> process = [&amp;](<span class=\"type\">int</span> i) -&gt; <span class=\"type\">void</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!s.<span class=\"built_in\">empty</span>() &amp;&amp; height[s.<span class=\"built_in\">top</span>()] &lt;= height[i])  &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> t = s.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">            s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            ++ans[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        s.<span class=\"built_in\">push</span>(i);</span><br><span class=\"line\">        ans[i] += s.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">process</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!s.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">        s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = n - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; --i) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">process</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">        -- ans[i]; <span class=\"comment\">// delete repeated self(count twice)</span></span><br><span class=\"line\">        cout &lt;&lt; ans[i] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"数据结构\"><a class=\"markdownIt-Anchor\" href=\"#数据结构\"></a> 数据结构</h2>\n<p>设计一个支持序列化和反序列话的HashMap。我之前没有接触过类似问题，了解过一些序列化的知识。就设计了一个 线型探查版 的hashmap, 因为这样所有数据都可以存储在一个数组中，方便序列化。</p>\n<p>为了方便实现，并没有考虑泛化和扩容，虽然提前和面试官沟通过。面试官还是抨击了线型探查对空间利用有问题，说是单个bucket中有过多元素时会有问题。对此我并不苟同，然后有讨论了半天。最后他有怼我说，没别人实现的好，insert时没有考虑扩容。因为我之前已经和他沟通过不考虑扩容和泛化以简化问题。对此，面试官不免有些为了怼而怼的嫌疑，我是并不信服的。我问他别人怎么实现，主流方法如何？他只是说没有标准答案。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">HashMap</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> capity = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">7</span>;</span><br><span class=\"line\">    array&lt;<span class=\"type\">int</span>, capity&gt; data;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> NOT_EXIST = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">HashMap</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(data.<span class=\"built_in\">data</span>(), capity * <span class=\"built_in\">sizeof</span>(<span class=\"type\">int</span>), <span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">searilize</span><span class=\"params\">(<span class=\"type\">const</span> string&amp; file_name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 把data内容写到文件中</span></span><br><span class=\"line\">        <span class=\"function\">std::ofstream <span class=\"title\">fout</span> <span class=\"params\">(file_name, std::fstream::binary)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span>&amp; d = <span class=\"keyword\">static_cast</span>&lt;array&lt;<span class=\"type\">char</span>, capity*<span class=\"built_in\">sizeof</span>(<span class=\"type\">int</span>)&gt;&gt;(data)</span><br><span class=\"line\">        std::<span class=\"built_in\">copy</span>(d.<span class=\"built_in\">begin</span>(), d.<span class=\"built_in\">end</span>(), std::<span class=\"built_in\">istreambuf_iterator</span>&lt;<span class=\"type\">char</span>&gt;(fout));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">load</span><span class=\"params\">(<span class=\"type\">const</span> string&amp; file_name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 把文件内容读到data中</span></span><br><span class=\"line\">        <span class=\"function\">std::ifstream <span class=\"title\">input</span><span class=\"params\">(file_name, std::ios::binary )</span></span>;</span><br><span class=\"line\">        std::<span class=\"built_in\">copy</span>( </span><br><span class=\"line\">            std::<span class=\"built_in\">istreambuf_iterator</span>&lt;<span class=\"type\">char</span>&gt;(input), </span><br><span class=\"line\">            std::<span class=\"built_in\">istreambuf_iterator</span>&lt;<span class=\"type\">char</span>&gt;( ),</span><br><span class=\"line\">            <span class=\"keyword\">static_cast</span>&lt;array&lt;<span class=\"type\">char</span>, capity*<span class=\"built_in\">sizeof</span>(<span class=\"type\">int</span>)&gt;&gt;(data).<span class=\"built_in\">begin</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"type\">int</span> key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> hashcode = <span class=\"built_in\">hash</span>(key);</span><br><span class=\"line\">        <span class=\"type\">int</span> bucket = hashcode &amp; <span class=\"number\">6</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = bucket; i &lt; <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">6</span>; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (data[i] == key) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> data[i + (<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">6</span>)];</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (data[i] == NOT_EXIST) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> NOT_EXIST;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> NOT_EXIST;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span> <span class=\"params\">(<span class=\"type\">int</span> key, <span class=\"type\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> hashcode = <span class=\"built_in\">hash</span>(key);</span><br><span class=\"line\">        <span class=\"type\">int</span> bucket = hashcode &amp; <span class=\"number\">6</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = bucket; i &lt; <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">6</span>; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (data[i] == NOT_EXIST || data[i] == key) &#123;</span><br><span class=\"line\">                data[i] = key;</span><br><span class=\"line\">                data[i + (<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">6</span>)] = value;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"计算机基础-2\"><a class=\"markdownIt-Anchor\" href=\"#计算机基础-2\"></a> 计算机基础</h2>\n<ul>\n<li>多态。构造函数不能虚函数，析构函数可以虚函数。</li>\n<li>并发了解。</li>\n</ul>\n<h2 id=\"其他\"><a class=\"markdownIt-Anchor\" href=\"#其他\"></a> 其他</h2>\n<p>自己的优点：<br />\n我讲了 基础扎实、算法好 （刷题多）。<br />\n他讲了他对刷题的看法。虽然不排斥刷题，但说了很多ACM选手的问题，工程实现考虑不周。感觉他有很多怨言呀。</p>\n<p>他还问了为什么本科时成绩好，研究生时不那么好？<br />\n我如实说了，研究生成绩不重要。</p>\n<p>面试官小哥哥早年也在北航读过书，最后我还聊了一下我实验室的现状。</p>\n<h1 id=\"八面-又一次迷一般的面试-差评\"><a class=\"markdownIt-Anchor\" href=\"#八面-又一次迷一般的面试-差评\"></a> 八面 又一次迷一般的面试 差评</h1>\n<p>time: 2020-04-13 12:59:03</p>\n<p>今天(4.13)上午11:30接到电话，随即开展了40min的面试。根本没有提前约我的时间，让我手头的很多事情都中断了。而且他说之前他们组的同事应该已经给我一面了。但是之前腾讯的7次面试都是别的组面的。</p>\n<h2 id=\"内容\"><a class=\"markdownIt-Anchor\" href=\"#内容\"></a> 内容</h2>\n<p>自我介绍，项目介绍。</p>\n<p>各种C++的容器的API的问题，时间复杂度。</p>\n<p>竟然让我设计一个推荐系统，我内心…只是简单说了下一些常见的推荐算法的实现。</p>\n<h2 id=\"2道算法题\"><a class=\"markdownIt-Anchor\" href=\"#2道算法题\"></a> 2道算法题</h2>\n<blockquote>\n<ol>\n<li>实现 strcpy 拷贝字符串</li>\n</ol>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">strcpy</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>* source, <span class=\"type\">const</span> <span class=\"type\">char</span>* destination)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (source == <span class=\"literal\">NULL</span> || destination == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (source[i] != <span class=\"string\">&#x27;\\0&#x27;</span> &amp;&amp; source + i != destination) &#123;</span><br><span class=\"line\">        destination[i] = source[i];</span><br><span class=\"line\">        ++i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ol start=\"2\">\n<li>10亿个整型，查找其中不重复的数字</li>\n</ol>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">findUnique</span><span class=\"params\">(<span class=\"type\">const</span> vector&lt;<span class=\"type\">int</span>&gt;&amp; v)</span> </span>&#123;    <span class=\"comment\">// 4G</span></span><br><span class=\"line\">    bitset&lt;1 &lt;&lt; 32&gt; seen;    <span class=\"comment\">// 4G</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i : v) &#123;</span><br><span class=\"line\">        seen.<span class=\"built_in\">set</span>(<span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">unsigned</span> <span class=\"type\">int</span>&gt;(i));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; ans; <span class=\"comment\">// 4 G = 10亿 * 4</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; seen.<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!seen[i]) &#123;</span><br><span class=\"line\">            ans.<span class=\"built_in\">insert</span>(<span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">int</span>&gt;(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>面试官是 微信kitcup推荐系统组的。我直接提意见说下次面试提前约，这次十分仓促，状态也不好。<br />\n这个面试官的态度也是我遇到过的最差的一批，多次和他沟通时，他说“不要问我”。很多问题问的也是不明所以，给他差评。真想投诉他。</p>\n<h1 id=\"九面\"><a class=\"markdownIt-Anchor\" href=\"#九面\"></a> 九面</h1>\n<p>本次面试大概只持续了10min，问了一道“判断链表是否是回文”的算法题。要求时间复杂度O(N), 空间复杂度O(1)。LeetCode medium难度吧。</p>\n<p>之后问我，看到我之前面了腾讯很多次，都到HR面了。为什么没有签？我说是因为工作地点冲突的原因。我期望在北京，他们组都在深圳。面试官说，那我也是面深圳的岗位。你填报志愿填的服从调剂。然后也没必要继续面下去了。史上最快的面试！！😂</p>\n<p>我之后去官网看了下，还真是，重新改了下，不服从调剂了。希望北京的组能捞起我。不知道组里的工程师能不能定向捞人呀，不然可以联系一下在腾讯工作的同学和师兄。</p>\n<h1 id=\"426-笔试\"><a class=\"markdownIt-Anchor\" href=\"#426-笔试\"></a> 4.26 笔试</h1>\n<p>TX的笔试难度还是挺大的，尤其是第2题和第3题。不过TX并不生产算法题，它只是算法题的搬运工。</p>\n<h2 id=\"2-寻找2个点集中最近的对\"><a class=\"markdownIt-Anchor\" href=\"#2-寻找2个点集中最近的对\"></a> 2. 寻找2个点集中最近的对</h2>\n<p><a href=\"https://www.acwing.com/problem/content/121/\">原题链接</a><br />\n大雪菜提供了<a href=\"https://www.acwing.com/video/96/\">视频讲解</a>。简而言之，就是把2个点集的点分别做个标记，然后利用一个点集内找最近对的算法（不同标记的点，相当于无穷远）。<a href=\"https://www.geeksforgeeks.org/closest-pair-of-points-using-divide-and-conquer-algorithm/\">一个点集内找最近对</a>就是一个十分经典的问题了，采用分治可以解决。</p>\n<p>时间复杂度: O(N log N), 空间复杂度: O(N).</p>\n<h2 id=\"2-卡牌翻转\"><a class=\"markdownIt-Anchor\" href=\"#2-卡牌翻转\"></a> 2. 卡牌翻转</h2>\n<p><a href=\"https://atcoder.jp/contests/keyence2020/tasks/keyence2020_d\">原题 Swap and Flip</a></p>\n<p>动态规划。DP[mask][i]表示mask中的牌在最左边，第i个牌在这些牌中的最后，保证非降的最小操作数。<br />\n<img src=\"https://uploadfiles.nowcoder.com/images/20200428/407266647_1588073288778_01811641BAED0EC338B3EE5B829175F4\" alt=\"图片说明\" title=\"图片标题\" /><br />\n时间复杂度: O(n^2 * 2^n),<br />\n空间复杂度: O(n * 2 ^ n)</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> INF = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> N;</span><br><span class=\"line\">    cin &gt;&gt; N;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">A</span><span class=\"params\">(N)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">B</span><span class=\"params\">(N)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; N; ++i) &#123;</span><br><span class=\"line\">        cin &gt;&gt; A[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; N; ++i) &#123;</span><br><span class=\"line\">        cin &gt;&gt; B[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">dp</span>((<span class=\"number\">1</span> &lt;&lt; N), <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(N, INF));</span><br><span class=\"line\">    <span class=\"comment\">// dp[mask][i]: the minimum operation when cards in mask are in leftmost and the ith card is in the end</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; N; ++i) &#123;</span><br><span class=\"line\">        dp[<span class=\"number\">1</span> &lt;&lt; i][i] = <span class=\"number\">0</span>;  <span class=\"comment\">// there is no card in leftmost whose id larger than i</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> s = <span class=\"number\">0</span>; s &lt; (<span class=\"number\">1</span> &lt;&lt; N); ++s) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; N; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (((s &gt;&gt; i) &amp; <span class=\"number\">1</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;                  <span class=\"comment\">// i is not in state</span></span><br><span class=\"line\">            <span class=\"type\">int</span> c = __builtin_popcount(s); <span class=\"comment\">// card number in s</span></span><br><span class=\"line\">            <span class=\"type\">int</span> value_i = (c % <span class=\"number\">2</span>) == (i % <span class=\"number\">2</span>) ? B[i] : A[i];</span><br><span class=\"line\">            <span class=\"type\">int</span> cost = c; <span class=\"comment\">// the number of card in s, whose id is larger than j</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; N; ++j) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (((s &gt;&gt; j) &amp; <span class=\"number\">1</span>) == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    --cost;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>; <span class=\"comment\">// j is in state already</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"type\">int</span> value_j = (j % <span class=\"number\">2</span>) == (c % <span class=\"number\">2</span>) ? A[j] : B[j];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (value_j &gt;= value_i) &#123;</span><br><span class=\"line\">                    dp[s | (<span class=\"number\">1</span> &lt;&lt; j)][j] =</span><br><span class=\"line\">                        <span class=\"built_in\">min</span>(dp[s | (<span class=\"number\">1</span> &lt;&lt; j)][j], dp[s][i] + cost);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = INF;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; N; ++i) &#123;</span><br><span class=\"line\">        ans = <span class=\"built_in\">min</span>(ans, dp[(<span class=\"number\">1</span> &lt;&lt; N) - <span class=\"number\">1</span>][i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ans = ans &gt;= INF ? <span class=\"number\">-1</span> : ans;</span><br><span class=\"line\">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "intern",
                "Tencent"
            ]
        }
    ]
}