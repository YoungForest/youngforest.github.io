<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://youngforest.github.io</id>
    <title>YoungForest&#39;s blog • Posts by &#34;english&#34; tag</title>
    <link href="https://youngforest.github.io" />
    <updated>2020-05-27T04:29:34.000Z</updated>
    <category term="tech" />
    <category term="life" />
    <category term="年终总结" />
    <category term="intern" />
    <category term="Reading" />
    <category term="3 body" />
    <category term="全球通史" />
    <category term="迷人的温度" />
    <category term="kuaishou" />
    <category term="Alibaba" />
    <category term="travel" />
    <category term="游记" />
    <category term="反脆弱" />
    <category term="你的灯亮着吗" />
    <category term="北京" />
    <category term="户口" />
    <category term="Business cycles history theory and investment reality" />
    <category term="Economics" />
    <category term="ByteDance" />
    <category term="interview" />
    <category term="New Graduate" />
    <category term="深奥的简洁" />
    <category term="codeforces" />
    <category term="contest" />
    <category term="Weride" />
    <category term="C++" />
    <category term="Database" />
    <category term="Django" />
    <category term="C++11" />
    <category term="埃隆·马斯克传" />
    <category term="bank" />
    <category term="money" />
    <category term="Europe" />
    <category term="Tech" />
    <category term="Hexo" />
    <category term="枪炮、病菌与钢铁" />
    <category term="厚黑学" />
    <category term="Ireland" />
    <category term="Life" />
    <category term="法国签证" />
    <category term="法签" />
    <category term="申根签证" />
    <category term="Side Project" />
    <category term="持续买进" />
    <category term="Competitive Programming" />
    <category term="Algorithm" />
    <category term="LeetCode" />
    <category term="六神磊磊读金庸" />
    <category term="六神磊磊读唐诗" />
    <category term="Mihayo" />
    <category term="键盘" />
    <category term="穷查理宝典" />
    <category term="编程珠玑" />
    <category term="投资" />
    <category term="QDII" />
    <category term="套利" />
    <category term="场外转场内" />
    <category term="Investment" />
    <category term="现实不似你所见-量子引力之旅" />
    <category term="食南之徒" />
    <category term="马伯庸" />
    <category term="太白金星有点烦" />
    <category term="Tencent" />
    <category term="纳瓦尔宝典" />
    <category term="孙子兵法" />
    <category term="历代经济变革得失" />
    <category term="Linux" />
    <category term="国家为什么失败" />
    <category term="时势" />
    <category term="小Lin说" />
    <category term="碧血剑" />
    <category term="atom" />
    <category term="hash" />
    <category term="unordered_map" />
    <category term="English" />
    <category term="折腾" />
    <category term="旷视" />
    <category term="Amazon" />
    <category term="Microsoft" />
    <category term="China" />
    <category term="vim" />
    <category term="WeRide" />
    <category term="tex" />
    <category term="生死疲劳" />
    <category term="Mac" />
    <category term="Windows" />
    <category term="Ubuntu" />
    <category term="Owncloud" />
    <category term="benchmark" />
    <category term="RIP" />
    <category term="sensetime" />
    <category term="sublime" />
    <category term="vscode" />
    <category term="gcc" />
    <category term="git" />
    <entry>
        <id>https://youngforest.github.io/2020/05/27/best-implement-to-use-pair-as-key-to-std-unordered-map-in-C/</id>
        <title>Best implement to use pair as key to std::unordered_map in C++</title>
        <link rel="alternate" href="https://youngforest.github.io/2020/05/27/best-implement-to-use-pair-as-key-to-std-unordered-map-in-C/"/>
        <content type="html">&lt;p&gt;Reference: &lt;a href=&#34;https://www.mica.edu.vn/perso/Vu-Hai/EE3490/Ref/The%20C++Standard%20Library%20-%202nd%20Edition.pdf&#34;&gt;C++ Standard Library: A tutorial and reference, Second version&lt;/a&gt; Chapter 7.9.2: Creating and Controlling unordered Container&lt;/p&gt;
&lt;p&gt;All solutions I found in Google use &lt;code&gt;XOR&lt;/code&gt; to generate hashcode of &lt;code&gt;pair&lt;/code&gt;, which is totally bad. see &lt;a href=&#34;https://stackoverflow.com/questions/5889238/why-is-xor-the-default-way-to-combine-hashes&#34;&gt;why-is-xor-the-default-way-to-combine-hashes&lt;/a&gt;. However, the book has given us the best solution, using &lt;code&gt;hash_combine&lt;/code&gt;, which is taken from &lt;code&gt;Boost&lt;/code&gt;. The solution is much better than XOR when I tested it in Online Judge(&lt;a href=&#34;https://atcoder.jp/contests/abc168/tasks/abc168_e&#34;&gt;Atcoder&lt;/a&gt;). I organized the code as a template as follow. You can copy and paste it as much as you can. And it is convenient to change it to fit any custom struct/class.&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;functional&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// from boost (functional/hash):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// see http://www.boost.org/doc/libs/1_35_0/doc/html/hash/combine.html template&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&#34;keyword&#34;&gt;typename&lt;/span&gt; T&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;hash_combine&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(std::&lt;span class=&#34;type&#34;&gt;size_t&lt;/span&gt; &amp;amp;seed, &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; T &amp;amp;val)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    seed ^= std::&lt;span class=&#34;built_in&#34;&gt;hash&lt;/span&gt;&amp;lt;T&amp;gt;()(val) + &lt;span class=&#34;number&#34;&gt;0x9e3779b9&lt;/span&gt; + (seed &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;) + (seed &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// auxiliary generic functions to create a hash value using a seed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&#34;keyword&#34;&gt;typename&lt;/span&gt; T&amp;gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;hash_val&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(std::&lt;span class=&#34;type&#34;&gt;size_t&lt;/span&gt; &amp;amp;seed, &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; T &amp;amp;val)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;hash_combine&lt;/span&gt;(seed, val);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&#34;keyword&#34;&gt;typename&lt;/span&gt; T, &lt;span class=&#34;keyword&#34;&gt;typename&lt;/span&gt;... Types&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;hash_val&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(std::&lt;span class=&#34;type&#34;&gt;size_t&lt;/span&gt; &amp;amp;seed, &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; T &amp;amp;val, &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; Types &amp;amp;... args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;hash_combine&lt;/span&gt;(seed, val);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;hash_val&lt;/span&gt;(seed, args...);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&#34;keyword&#34;&gt;typename&lt;/span&gt;... Types&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;inline&lt;/span&gt; std::&lt;span class=&#34;type&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;hash_val&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; Types &amp;amp;... args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    std::&lt;span class=&#34;type&#34;&gt;size_t&lt;/span&gt; seed = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;hash_val&lt;/span&gt;(seed, args...);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; seed;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;pair_hash&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;T1&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;T2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;std::&lt;span class=&#34;type&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; std::pair&amp;lt;T1, T2&amp;gt; &amp;amp;p)&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;hash_val&lt;/span&gt;(p.first, p.second);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; std;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; ll = &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    unordered_map&amp;lt;pair&amp;lt;ll, ll&amp;gt;, ll, pair_hash&amp;gt; slopeCount;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    unordered_set&amp;lt;pair&amp;lt;ll, ll&amp;gt;, pair_hash&amp;gt; seen;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;There is a hash implementation for &lt;code&gt;Tuple&lt;/code&gt;. I updated the answer in&lt;a href=&#34;https://stackoverflow.com/a/62035742/6393787&#34;&gt;StackOverflow&lt;/a&gt;。Please go there if you need hash tuple.&lt;/p&gt;
</content>
        <category term="C++" />
        <category term="hash" />
        <category term="unordered_map" />
        <category term="English" />
        <updated>2020-05-27T04:29:34.000Z</updated>
    </entry>
</feed>
