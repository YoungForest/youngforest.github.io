{
    "version": "https://jsonfeed.org/version/1",
    "title": "YoungForest's blog • All posts by \"competitive programming\" tag",
    "description": "佛系更新；生活、学习",
    "home_page_url": "https://youngforest.github.io",
    "items": [
        {
            "id": "https://youngforest.github.io/2021/09/25/LCCUP-21-Fall-Team/",
            "url": "https://youngforest.github.io/2021/09/25/LCCUP-21-Fall-Team/",
            "title": "LCCUP 21 Fall Team",
            "date_published": "2021-09-25T19:28:48.000Z",
            "content_html": "<table>\n<thead>\n<tr>\n<th>Rank</th>\n<th>Name</th>\n<th>Score</th>\n<th>Finish Time</th>\n<th>Q1 (2)</th>\n<th>Q2 (4)</th>\n<th>Q3 (6)</th>\n<th>Q4 (7)</th>\n<th>Q5 (8)</th>\n<th>Q6(9)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>81 / 1363</td>\n<td>爸爸去哪儿</td>\n<td>19/37</td>\n<td>1:07:44</td>\n<td>0:03:40 by 爸</td>\n<td>0:21:39 by 爸</td>\n<td>0:53:13 by 宝</td>\n<td>1:02:44 🐞 1 by 爸</td>\n<td>null</td>\n<td>null</td>\n</tr>\n</tbody>\n</table>\n<p>今年秋季赛只参加了团队赛，没有参加个人赛。春季赛和赖叔以及羡慕哥组队，效果不是很理想。秋季赛和宝宝二人组队，效果反而不错。尤其是宝宝不仅没有拖慢我的速度，还给团队做出了重要的贡献。没有她顺利地做出Q3，我们队排名绝对没有现在这么好看。<br />\n一个小时做了4题后，后两题只有5人AC。看了半天后并没有任何符合时间复杂度的思路。果断放弃了，后2个小时就节约下来干别的去了。</p>\n<p>虽然我现在用<a href=\"https://youngforest.github.io/en/\">英文博客</a>写周赛总结了。但因为春季赛和秋季赛都是国区力扣的活动，只有中国人能参加和看到，因此考虑到受众，本次比赛总结还是用中文吧。</p>\n<h2 id=\"lcp-44-开幕式焰火\"><a class=\"markdownIt-Anchor\" href=\"#lcp-44-开幕式焰火\"></a> <a href=\"https://leetcode-cn.com/problems/sZ59z6/\">LCP 44. 开幕式焰火</a></h2>\n<p>签到题。DFS，用set记录不同color.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * struct TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode *left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode *right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">numColor</span><span class=\"params\">(TreeNode* root)</span> </span>&#123;</span><br><span class=\"line\">        set&lt;<span class=\"type\">int</span>&gt; colors;</span><br><span class=\"line\">        function&lt;<span class=\"type\">void</span>(TreeNode*)&gt; dfs = [&amp;](TreeNode* root) -&gt; <span class=\"type\">void</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (root) &#123;</span><br><span class=\"line\">                colors.<span class=\"built_in\">insert</span>(root-&gt;val);</span><br><span class=\"line\">                <span class=\"built_in\">dfs</span>(root-&gt;left);</span><br><span class=\"line\">                <span class=\"built_in\">dfs</span>(root-&gt;right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(root);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> colors.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(N),<br />\n空间复杂度: O(N).<br />\n其中，<code>N</code>为节点数。</p>\n<h2 id=\"lcp-45-自行车炫技赛场\"><a class=\"markdownIt-Anchor\" href=\"#lcp-45-自行车炫技赛场\"></a> <a href=\"https://leetcode-cn.com/problems/kplEvH/\">LCP 45. 自行车炫技赛场</a></h2>\n<p>DFS. 因为需要关注高度，因此把高度也当作参数传入。<br />\n需要用seen/visit记录访问过的状态。<br />\n因为速度变化的机制<code>h1-h2-o2</code>，显然速度不可能超过<code>最大高度+1</code>，因此状态数也是有限的，大概是<code>n\\*m\\*最大高度 = 10^6</code>.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">bicycleYard</span>(<span class=\"params\">self, position: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], terrain: <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]], obstacle: <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]</span>) -&gt; <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]:</span><br><span class=\"line\">        n = <span class=\"built_in\">len</span>(terrain)</span><br><span class=\"line\">        m = <span class=\"built_in\">len</span>(terrain[<span class=\"number\">0</span>])</span><br><span class=\"line\">        minSpeed = [[<span class=\"built_in\">float</span>(<span class=\"string\">&#x27;inf&#x27;</span>)] * m <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]</span><br><span class=\"line\">        direction = ((<span class=\"number\">1</span>, <span class=\"number\">0</span>), (<span class=\"number\">0</span>, <span class=\"number\">1</span>), (<span class=\"number\">0</span>, -<span class=\"number\">1</span>), (-<span class=\"number\">1</span>, <span class=\"number\">0</span>))</span><br><span class=\"line\">        seen = <span class=\"built_in\">set</span>()</span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">dfs</span>(<span class=\"params\">i, j, speed</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> speed &lt;= <span class=\"number\">0</span>: <span class=\"keyword\">return</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i, j, speed) <span class=\"keyword\">in</span> seen: <span class=\"keyword\">return</span></span><br><span class=\"line\">            seen.add((i, j, speed))</span><br><span class=\"line\">            minSpeed[i][j] = <span class=\"built_in\">min</span>(minSpeed[i][j], speed)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> di, dj <span class=\"keyword\">in</span> direction:</span><br><span class=\"line\">                ni = i + di</span><br><span class=\"line\">                nj = j + dj</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ni &lt; n <span class=\"keyword\">and</span> ni &gt;= <span class=\"number\">0</span> <span class=\"keyword\">and</span> nj &gt;= <span class=\"number\">0</span> <span class=\"keyword\">and</span> nj &lt; m:</span><br><span class=\"line\">                    newSpeed = speed + terrain[i][j] - terrain[ni][nj] - obstacle[ni][nj]</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (ni, nj, newSpeed) <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> seen:</span><br><span class=\"line\">                        dfs(ni, nj, newSpeed)</span><br><span class=\"line\">        </span><br><span class=\"line\">        dfs(position[<span class=\"number\">0</span>], position[<span class=\"number\">1</span>], <span class=\"number\">1</span>)</span><br><span class=\"line\">        minSpeed[position[<span class=\"number\">0</span>]][position[<span class=\"number\">1</span>]] = <span class=\"built_in\">float</span>(<span class=\"string\">&#x27;inf&#x27;</span>)</span><br><span class=\"line\">        ans = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(m):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> minSpeed[i][j] == <span class=\"number\">1</span>:</span><br><span class=\"line\">                    ans.append([i, j])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(m * n * maxTerrain),<br />\n空间复杂度: O(m * n * maxTerrain).</p>\n<h2 id=\"lcp-46-志愿者调配\"><a class=\"markdownIt-Anchor\" href=\"#lcp-46-志愿者调配\"></a> LCP 46. 志愿者调配</h2>\n<p>本题是宝宝独立想出解法并实现的。虽然实现之前我们有交流过解法，确定没问题她才开始实现的。</p>\n<p>列方程。每天每个场馆用(系数,常数)表示。比如最后一天0场馆就是(1, 0), 其他就是(0, 人数).然后往前推，更新场馆人数。到第一天再解方程。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">volunteerDeployment</span>(<span class=\"params\">self, finalCnt: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], totalNum: <span class=\"built_in\">int</span>, edges: <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]], plans: <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]</span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">        neighbour = collections.defaultdict(<span class=\"built_in\">list</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> a,b <span class=\"keyword\">in</span> edges:</span><br><span class=\"line\">            neighbour[a].append(b)</span><br><span class=\"line\">            neighbour[b].append(a)</span><br><span class=\"line\">        coef = [[<span class=\"number\">1</span>,<span class=\"number\">0</span>]]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> finalCnt:</span><br><span class=\"line\">            coef.append([<span class=\"number\">0</span>,c])</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(plans)-<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>):</span><br><span class=\"line\">            num, idx = plans[i]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> num == <span class=\"number\">1</span>:</span><br><span class=\"line\">                coef[idx] = [coef[idx][<span class=\"number\">0</span>]*<span class=\"number\">2</span>, coef[idx][<span class=\"number\">1</span>]*<span class=\"number\">2</span>]</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> num == <span class=\"number\">2</span>:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> nei <span class=\"keyword\">in</span> neighbour[idx]:</span><br><span class=\"line\">                    coef[nei] = [coef[nei][<span class=\"number\">0</span>]-coef[idx][<span class=\"number\">0</span>], coef[nei][<span class=\"number\">1</span>]-coef[idx][<span class=\"number\">1</span>]]</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> nei <span class=\"keyword\">in</span> neighbour[idx]:</span><br><span class=\"line\">                    coef[nei] = [coef[nei][<span class=\"number\">0</span>]+coef[idx][<span class=\"number\">0</span>], coef[nei][<span class=\"number\">1</span>]+coef[idx][<span class=\"number\">1</span>]]</span><br><span class=\"line\">        divide = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> a,b <span class=\"keyword\">in</span> coef:</span><br><span class=\"line\">            totalNum -= b</span><br><span class=\"line\">            divide += a</span><br><span class=\"line\">        x = totalNum//divide</span><br><span class=\"line\">        ans = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> a,b <span class=\"keyword\">in</span> coef:</span><br><span class=\"line\">            ans.append(a*x+b)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(m * n * avg(edges)),<br />\n空间复杂度: O(edges + n).</p>\n<h2 id=\"lcp-47-入场安检\"><a class=\"markdownIt-Anchor\" href=\"#lcp-47-入场安检\"></a> LCP 47. 入场安检</h2>\n<p>一看到最后答案很大，需要取模。就基本不可能枚举所有的情况了，大概率是用<code>DP</code>。<br />\n接下来就是像状态转移方程长什么样了。<br />\n此题挺像约瑟夫杀人问题的，关注的是使用 栈/队 数字下标的变化。</p>\n<p>涉及到自顶向下的DP 和 大数取模运算，<code>Python</code>优势明显。<br />\n虽然用<code>@cache</code>很方便，但经常忘记<code>dp.cache_clear()</code>, 导致一次TLE罚时。<br />\n以后需要注意。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">securityCheck</span>(<span class=\"params\">self, capacities: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], k: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        MOD = <span class=\"number\">1000000007</span></span><br><span class=\"line\">        n = <span class=\"built_in\">len</span>(capacities)</span><br><span class=\"line\"><span class=\"meta\">        @cache</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">dp</span>(<span class=\"params\">i, k</span>):</span><br><span class=\"line\">            <span class=\"comment\"># the current first capcities index, k is the number we want to pop first</span></span><br><span class=\"line\">            <span class=\"comment\"># print(i,k)</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> i == n - <span class=\"number\">1</span>:</span><br><span class=\"line\">                ans = <span class=\"number\">0</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> k == <span class=\"number\">0</span>: <span class=\"comment\"># queue</span></span><br><span class=\"line\">                    ans += <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> k == capacities[n-<span class=\"number\">1</span>] - <span class=\"number\">1</span>:</span><br><span class=\"line\">                    ans += <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> ans</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                ans = <span class=\"number\">0</span></span><br><span class=\"line\">                c = capacities[i]</span><br><span class=\"line\">                <span class=\"keyword\">if</span> k &gt;= c - <span class=\"number\">1</span>:</span><br><span class=\"line\">                    ans += dp(i+<span class=\"number\">1</span>, k - (c - <span class=\"number\">1</span>)) <span class=\"comment\"># stack</span></span><br><span class=\"line\">                </span><br><span class=\"line\">                ans += dp(i+<span class=\"number\">1</span>, k) <span class=\"comment\"># queue</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> (ans) % MOD</span><br><span class=\"line\">        </span><br><span class=\"line\">        ans = dp(<span class=\"number\">0</span>, k)</span><br><span class=\"line\">        dp.cache_clear()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(n * k),<br />\n空间复杂度: O(n * k).</p>\n<h2 id=\"lcp-48-无限棋局\"><a class=\"markdownIt-Anchor\" href=\"#lcp-48-无限棋局\"></a> LCP 48. 无限棋局</h2>\n<h2 id=\"lcp-49-环形闯关游戏\"><a class=\"markdownIt-Anchor\" href=\"#lcp-49-环形闯关游戏\"></a> LCP 49. 环形闯关游戏</h2>\n",
            "tags": [
                "Competitive Programming"
            ]
        },
        {
            "id": "https://youngforest.github.io/2021/09/07/LeetCode-biweekly-contest-60/",
            "url": "https://youngforest.github.io/2021/09/07/LeetCode-biweekly-contest-60/",
            "title": "LeetCode biweekly contest 60",
            "date_published": "2021-09-07T13:16:17.000Z",
            "content_html": "<table>\n<thead>\n<tr>\n<th>Rank</th>\n<th>Name</th>\n<th>Score</th>\n<th>Finish Time</th>\n<th>Q1 (3)</th>\n<th>Q2 (5)</th>\n<th>Q3 (5)</th>\n<th>Q4 (6)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>998 / 10896</td>\n<td>YoungForest</td>\n<td>18</td>\n<td>1:27:14</td>\n<td>0:02:33</td>\n<td>0:13:25</td>\n<td>1:17:14  🐞2</td>\n<td>null</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "Competitive Programming"
            ]
        },
        {
            "id": "https://youngforest.github.io/2021/09/06/LeetCode-weekly-contest-257/",
            "url": "https://youngforest.github.io/2021/09/06/LeetCode-weekly-contest-257/",
            "title": "LeetCode weekly contest 257",
            "date_published": "2021-09-06T22:15:10.000Z",
            "content_html": "<table>\n<thead>\n<tr>\n<th>Rank</th>\n<th>Name</th>\n<th>Score</th>\n<th>Finish Time</th>\n<th>Q1 (3)</th>\n<th>Q2 (4)</th>\n<th>Q3 (5)</th>\n<th>Q4 (6)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>222 / 12542</td>\n<td>YoungForest</td>\n<td>18</td>\n<td>1:32:31</td>\n<td>0:06:21  🐞1</td>\n<td>0:12:18</td>\n<td>0:24:28</td>\n<td>1:17:31  🐞2</td>\n</tr>\n</tbody>\n</table>\n<p>久违的不用打卡了。之前打了3周卡，实在是遭不住了呀。工作之后，花在刷题上的精力和时间都少了很多。很多卡都是让npy打的，或者干脆抄一份。一份付出一份回报。学如逆水行舟，不进则退。我周赛成绩下降确实是自己实力下降了。虽然我并不打算改变，并且慢慢接受了这个事实。但是我会坚持打周赛和呆在残酷群里，保持基本的做题手感即可，不需要对自己有太高要求。</p>\n<p>最近除了工作，花了很多时间在投资理财上。</p>\n<p>一方面学习相关知识。比如 关注了 喜欢玩基金的小瑜哥 的B站和微信公众号，还有 <strong>认真的天马</strong> 的B站和微信公众号。<br />\n关注了有大半年时间了。小瑜哥妥妥的韭菜一枚，关注他有3点原因：他每日更新复盘视频，十分坚持和勤劳；视频内容很开心（准确地说，看他亏钱很开心），可以当作娱乐区UP看；他犯了很多韭菜的误区和大忌，我们可以从他的失败中学习教训，而不需要自己去失败。<br />\n天马 是妥妥的知识型和保守型UP主，比较符合我的需求和观点。他微信公众号也是日更，每天早上8点准时更新。更新文章末尾有估值表，通过其可以买低估、卖高估。他的文章和视频也是以干货为主，值得反复学习和观看。<br />\n同时关注了 YouTube 的 “NaNa说美股“。主要讲的都是美股大盘的变动。我之前买过200元 纳指100 和 标普500. 涨了一些就卖了。错过了后面的行情。美股确实是长牛，和 A股没法比。现在虽然继续涨，但已经历史新高了，我也不敢再买了。<br />\n同时阅读投资书籍。之前读了<a href=\"https://book.douban.com/subject/3576486/\">《小狗钱钱》</a>，最近读完了<a href=\"https://book.douban.com/subject/26948036/\">《小乌龟的投资智慧》</a>和<a href=\"https://book.douban.com/subject/5382213/\">《股票大作手回忆录》</a>。我在<a href=\"https://www.douban.com/people/141835199/\">豆瓣</a>均写简短的书评。<br />\n其中《小乌龟》是我觉得最有用的一本书，尤其是对于长期（10年以上）的投资。打算以后准备退休钱的时候按照其投资。现在因为要准备买房出国的事儿，暂时还没有足够的长期资金。短期基本都要用。</p>\n<p>另一方面进行实践。把自己的资产分为4个部分 灵活取用（现金，货币基金）、保守的债卷基金 和 固收（定期）、偏风险的股票基金（以宽基指数 和 行业指数 为主）。<br />\n半年前写过一个<a href=\"https://youngforest.github.io/2021/03/22/investment/\">自己的投资故事</a>，现在，我可以大胆的说我的知识和经验更加丰富和专业了。虽然并没有收益多少，但工作之后随着本金的增加，投资理财变得更加重要了。<br />\n现在我总的股票仓位较低，大概不到 1/3，以其他3种保守投资为主。</p>\n<h2 id=\"1995-count-special-quadruplets\"><a class=\"markdownIt-Anchor\" href=\"#1995-count-special-quadruplets\"></a> 1995. Count Special Quadruplets</h2>\n<p>签到题。暴力枚举即可。不过因为着急，没仔细看题，忽略了index 递增的要求，擅自加了排序，导致WA一发。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">countQuadruplets</span>(<span class=\"params\">self, nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        seen = <span class=\"built_in\">set</span>()</span><br><span class=\"line\">        n = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">        <span class=\"comment\"># print(nums)</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i + <span class=\"number\">1</span>, n):</span><br><span class=\"line\">                <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(j + <span class=\"number\">1</span>, n):</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> l <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(k + <span class=\"number\">1</span>, n):</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> nums[i] + nums[j] + nums[k] == nums[l]:</span><br><span class=\"line\">                            <span class=\"comment\"># print((i, j, k, l))</span></span><br><span class=\"line\">                            seen.add((i, j, k, l))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(seen)</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(n^4),<br />\n空间复杂度: O(n)。</p>\n<h2 id=\"1996-the-number-of-weak-characters-in-the-game\"><a class=\"markdownIt-Anchor\" href=\"#1996-the-number-of-weak-characters-in-the-game\"></a> 1996. The Number of Weak Characters in the Game</h2>\n<p>做这题的时候，我就觉的它有些像<a href=\"https://leetcode.com/problems/russian-doll-envelopes/\">354. Russian Doll Envelopes</a>。<br />\n先排序，按照一维递减，另一维递增的方式。<br />\n然后遍历，因为前面的都保证第一维大于等于当前了，只需要看前面第二维最大的就可以了。这也是为什么第二维排序要递增的原因，在第一维相等的时候，第二位大的要排后面，才不会影响遍历时的比较过程。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">numberOfWeakCharacters</span><span class=\"params\">(vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt;&amp; p)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(p.<span class=\"built_in\">begin</span>(), p.<span class=\"built_in\">end</span>(), [](<span class=\"type\">const</span> <span class=\"keyword\">auto</span>&amp; lhs, <span class=\"type\">const</span> <span class=\"keyword\">auto</span>&amp; rhs) -&gt; <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lhs[<span class=\"number\">0</span>] != rhs[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> lhs[<span class=\"number\">0</span>] &gt; rhs[<span class=\"number\">0</span>];</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> lhs[<span class=\"number\">1</span>] &lt; rhs[<span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> maxDefense = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">const</span> <span class=\"keyword\">auto</span>&amp; c : p) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (maxDefense &gt; c[<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                ++ans;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            maxDefense = <span class=\"built_in\">max</span>(maxDefense, c[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(nlogn),<br />\n空间复杂度: O(log n).</p>\n<h2 id=\"1997-first-day-where-you-have-been-in-all-the-rooms\"><a class=\"markdownIt-Anchor\" href=\"#1997-first-day-where-you-have-been-in-all-the-rooms\"></a> 1997. First Day Where You Have Been in All the Rooms</h2>\n<p>本题幸运的发现了问题的本质，很快并且代码行数很少地解决了问题。<br />\n否则最后一题可能没时间Debug了。</p>\n<p>注意到<code>0 &lt;= nextVisit[i] &lt;= i</code>，因此奇数次的时候必然是要往回走/呆在原地。<br />\n偶数次只能向前走一步。意味着当我们第一次（其实可以扩展到奇数次）走到位置<code>i</code>时，之前的所有格子都必然走过偶数次。<br />\n因此状态转移方程是：<br />\n<code>dp(i) = dp(i - 1) + 1 + (dp(i - 1) - dp(nextVisit[i-1])) + 1</code>,<br />\n即 第一次走到前一个位置，走一步，退回到nextVisit[i-1]，再次走到前一个位置，再多走一步到当前位置。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">firstDayBeenInAllRooms</span>(<span class=\"params\">self, nextVisit: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        MOD = <span class=\"number\">10</span>**<span class=\"number\">9</span> + <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"meta\">        @cache</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">dp</span>(<span class=\"params\">i</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i == <span class=\"number\">0</span>: <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> (dp(i-<span class=\"number\">1</span>) * <span class=\"number\">2</span> + <span class=\"number\">2</span> - dp(nextVisit[i-<span class=\"number\">1</span>])) % MOD</span><br><span class=\"line\">        n = <span class=\"built_in\">len</span>(nextVisit)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp(n-<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(N),<br />\n空间复杂度: O(N).</p>\n<h2 id=\"1998-gcd-sort-of-an-array\"><a class=\"markdownIt-Anchor\" href=\"#1998-gcd-sort-of-an-array\"></a> 1998. GCD Sort of an Array</h2>\n<p>观察交换规则，可以发现交换的位置其实是一个并查集，2个元素可以通过第3个元素互换。<br />\n问题转换成，原始位置要换到排序后的位置，需要经过一系列元素的交换，这些元素必须在同一个集（component）里。<br />\n在同一个集的充分必要条件是 gcd 大于 1。</p>\n<p>因此，一个直接的想法（但是显然会TLE）是：</p>\n<ol>\n<li>两两算gcd, 更新union-find；</li>\n<li>排序原始数组，找到对应的排序后的位置；</li>\n<li>根据dfs原则，判断哪些元素必须在同一集，然后用之前算好的union-find去验证。</li>\n</ol>\n<p>时间复杂度为: O(N^2 + N log N + N).</p>\n<p>复杂度瓶颈在第一步的计算union-find这里。我们尝试优化它。<br />\n观察数据规模：<code>2 &lt;= nums[i] &lt;= 10^5</code>，意味着我们可以计算每个元素的因子，然后把相同因子的元素通过因子unite起来。这里有个坑，我们不仅需要连接小因子，还需要把相应的大因子连接起来。可以把并查集的数组扩大，扩大后的位置用来表示因子，用一个+n偏移表示。<br />\n时间复杂度降为 O(N * sqrt(num)), 这里大概是<code>10^7</code>, 其实还是可能会超时的。这也是我本题7次罚时的原因，在TLE的边缘疯狂试探。<br />\n残酷群友提示：第四题和952. Largest Component Size by Common Factor 很像，要按因数去优化，不然会tle到死。不过我通过把局部数组移到类变量，这种常数优化AC了。<br />\n不过这种按因数优化的方式还是很值得学习的，可以把获得因数的复杂度从O(sqrt(num))降为O(log num)：<a href=\"https://leetcode.com/problems/gcd-sort-of-an-array/discuss/1445180/C%2B%2BPython-Union-Find-and-Sieve-and-Sorting-Clean-and-Concise\">https://leetcode.com/problems/gcd-sort-of-an-array/discuss/1445180/C%2B%2BPython-Union-Find-and-Sieve-and-Sorting-Clean-and-Concise</a></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">UF</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; sz;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    <span class=\"type\">int</span> comp_cnt;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; fa;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">UF</span>(<span class=\"type\">int</span> _n): <span class=\"built_in\">n</span>(_n), <span class=\"built_in\">comp_cnt</span>(_n), <span class=\"built_in\">fa</span>(_n), <span class=\"built_in\">sz</span>(_n, <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">iota</span>(fa.<span class=\"built_in\">begin</span>(), fa.<span class=\"built_in\">end</span>(), <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">findset</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fa[x] == x ? x : fa[x] = <span class=\"built_in\">findset</span>(fa[x]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">unite</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">        x = <span class=\"built_in\">findset</span>(x);</span><br><span class=\"line\">        y = <span class=\"built_in\">findset</span>(y);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x != y) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sz[x] &lt; sz[y]) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">swap</span>(x, y);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            fa[y] = x;</span><br><span class=\"line\">            sz[x] += sz[y];</span><br><span class=\"line\">            --comp_cnt;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">connected</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">        x = <span class=\"built_in\">findset</span>(x);</span><br><span class=\"line\">        y = <span class=\"built_in\">findset</span>(y);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x == y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> pii = pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;;</span><br><span class=\"line\">    array&lt;pii, 50000&gt; index;</span><br><span class=\"line\">    array&lt;<span class=\"type\">int</span>, 50000&gt; reverseIndex;</span><br><span class=\"line\">    array&lt;<span class=\"type\">bool</span>, 50000&gt; visited;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">gcdSort</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// time: n log n + n ^ 2</span></span><br><span class=\"line\">        <span class=\"comment\">// (10**5)**0.5</span></span><br><span class=\"line\">        <span class=\"comment\">// = 316.22776601683796</span></span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> n = nums.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            index[i] = &#123;nums[i], i&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(index.<span class=\"built_in\">begin</span>(), index.<span class=\"built_in\">begin</span>() + n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            reverseIndex[index[i].second] = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> maxX = *<span class=\"built_in\">max_element</span>(nums.<span class=\"built_in\">begin</span>(), nums.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        <span class=\"function\">UF <span class=\"title\">uf</span><span class=\"params\">(n + maxX + <span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> a = <span class=\"number\">0</span>; a &lt; n; ++a) &#123;</span><br><span class=\"line\">            uf.<span class=\"built_in\">unite</span>(a, n + nums[a]);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> b = <span class=\"number\">2</span>; b * b &lt;= nums[a]; ++b) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nums[a] % b == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    uf.<span class=\"built_in\">unite</span>(a, n + b);</span><br><span class=\"line\">                    <span class=\"comment\">// 有可能是倍数</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> ((nums[a] / b) &gt; <span class=\"number\">1</span>) uf.<span class=\"built_in\">unite</span>(a, n + (nums[a] / b)); </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// N ^ 2, TLE</span></span><br><span class=\"line\">        <span class=\"comment\">// for (int a = 0; a &lt; n; ++a) &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//     for (int b = a + 1; b &lt; n; ++b) &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//         if (gcd(nums[a], nums[b]) &gt; 1) &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//             uf.unite(a, b);</span></span><br><span class=\"line\">        <span class=\"comment\">//         &#125;</span></span><br><span class=\"line\">        <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            visited[i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!visited[i]) &#123;</span><br><span class=\"line\">                vector&lt;<span class=\"type\">int</span>&gt; group;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (!visited[i]) &#123;</span><br><span class=\"line\">                    visited[i] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    group.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">                    i = reverseIndex[i];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"type\">const</span> <span class=\"type\">int</span> root = uf.<span class=\"built_in\">findset</span>(group[<span class=\"number\">0</span>]);</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; group.<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (root != uf.<span class=\"built_in\">findset</span>(group[i])) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(N * sqrt(N) + N log N),<br />\n空间复杂度: O(N + max(nums[i])).</p>\n",
            "tags": [
                "Competitive Programming"
            ]
        },
        {
            "id": "https://youngforest.github.io/2021/08/23/LeetCode-weekly-contest-255/",
            "url": "https://youngforest.github.io/2021/08/23/LeetCode-weekly-contest-255/",
            "title": "LeetCode weekly contest 255",
            "date_published": "2021-08-23T10:39:46.000Z",
            "content_html": "<table>\n<thead>\n<tr>\n<th>Rank</th>\n<th>Name</th>\n<th>Score</th>\n<th>Finish Time</th>\n<th>Q1 (3)</th>\n<th>Q2 (4)</th>\n<th>Q3 (6)</th>\n<th>Q4 (6)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>406 / 11837</td>\n<td>YoungForest</td>\n<td>12</td>\n<td>0:36:07</td>\n<td>0:01:21</td>\n<td>0:09:54</td>\n<td>0:26:07  🐞2</td>\n<td>null</td>\n</tr>\n</tbody>\n</table>\n<p>本周Q4极其难，思考了半个小时果断放弃，陪npy做可乐鸡翅去了。<br />\n有趣的是，LC国服赛后挂了。取不到成绩，残酷榜默认0分。心疼国服的同学们。<br />\n虽然之后恢复了，我上面的成绩就是恢复之后，加上国服的同学后的排名。<br />\n因为今天其实有Google Kickstart比赛，因此参赛人数有所减少。</p>\n<h2 id=\"1979-find-greatest-common-divisor-of-array\"><a class=\"markdownIt-Anchor\" href=\"#1979-find-greatest-common-divisor-of-array\"></a> 1979. Find Greatest Common Divisor of Array</h2>\n<p>签到题。用C<ins>简直作弊，有自带的gcd函数，虽然是C</ins> 17才支持的，不过LeetCode恰好支持17.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">findGCD</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(nums.<span class=\"built_in\">begin</span>(), nums.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> smallest = *nums.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> largest = *nums.<span class=\"built_in\">rbegin</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">gcd</span>(largest, smallest);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(n log n + log max(nums)),<br />\n空间复杂度: O(1).</p>\n<p>gcd 的时间复杂度: <a href=\"https://www.quora.com/What-is-the-time-complexity-of-Euclids-GCD-algorithm\">link</a>.</p>\n<h2 id=\"1980-find-unique-binary-string\"><a class=\"markdownIt-Anchor\" href=\"#1980-find-unique-binary-string\"></a> 1980. Find Unique Binary String</h2>\n<p>由于<code>n</code>的大小很小，因此直接暴力即可。<br />\n数字转二进制字符串，和 二进制字符串转数字 都是网上现搜的。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">string <span class=\"title\">findDifferentBinaryString</span><span class=\"params\">(vector&lt;string&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// total number: 2 ^ n,</span></span><br><span class=\"line\">        <span class=\"comment\">// 2 ^ 16 = 65536</span></span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> n = nums.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        unordered_set&lt;<span class=\"type\">int</span>&gt; seen;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">const</span> <span class=\"keyword\">auto</span>&amp; i : nums) &#123;</span><br><span class=\"line\">            seen.<span class=\"built_in\">insert</span>(<span class=\"built_in\">stoi</span>(i, <span class=\"number\">0</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; (<span class=\"number\">1</span> &lt;&lt; n); ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (seen.<span class=\"built_in\">find</span>(i) == seen.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> std::<span class=\"built_in\">bitset</span>&lt;<span class=\"number\">16</span>&gt;(i).<span class=\"built_in\">to_string</span>().<span class=\"built_in\">substr</span>(<span class=\"number\">16</span> - n);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(sum(nums[i].length) + 2 ^ n),<br />\n空间复杂度: O(n).</p>\n<h2 id=\"1981-minimize-the-difference-between-target-and-chosen-elements\"><a class=\"markdownIt-Anchor\" href=\"#1981-minimize-the-difference-between-target-and-chosen-elements\"></a> 1981. Minimize the Difference Between Target and Chosen Elements</h2>\n<p>使用DP枚举所有可能的和，然后找最近的。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">minimizeTheDifference</span><span class=\"params\">(vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt;&amp; mat, <span class=\"type\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1 * m ~ 70 * m = 4900</span></span><br><span class=\"line\">        <span class=\"comment\">// 4900 * n * m = 24,010,000</span></span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> MAXNUMBER = <span class=\"number\">70</span>;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> m = mat.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">bool</span>&gt; <span class=\"title\">dp</span><span class=\"params\">(MAXNUMBER * m + <span class=\"number\">1</span>, <span class=\"literal\">false</span>)</span></span>;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i) &#123;</span><br><span class=\"line\">            <span class=\"function\">vector&lt;<span class=\"type\">bool</span>&gt; <span class=\"title\">newdp</span><span class=\"params\">(MAXNUMBER * m + <span class=\"number\">1</span>, <span class=\"literal\">false</span>)</span></span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = MAXNUMBER * m; j &gt;= <span class=\"number\">0</span>; --j) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (dp[j]) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k : mat[i]) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (j + k &lt;= MAXNUMBER * m) newdp[j + k] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            dp = <span class=\"built_in\">move</span>(newdp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; target + i &lt;= MAXNUMBER * m || target - i &gt;= <span class=\"number\">0</span>; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((target + i &lt;= MAXNUMBER * m &amp;&amp; dp[target + i]) || (target - i &gt;= <span class=\"number\">0</span> &amp;&amp; target - i &lt;= MAXNUMBER * m &amp;&amp; dp[target - i])) <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(m * max(mat[i][j]) * m * n) = 24,010,000,<br />\n空间复杂度: O(max(mat[i][j]) * m).</p>\n<p>WA 一次：因为每行必须选一个数，不能不选。因此dp需要新开一个数组，不能复用原来的。<br />\nRuntime Error 一次：<code>target</code>有可能大于<code>MAXNUMBER * m</code>，因此必须加判断。</p>\n<h2 id=\"1982-find-array-given-subset-sums\"><a class=\"markdownIt-Anchor\" href=\"#1982-find-array-given-subset-sums\"></a> 1982. Find Array Given Subset Sums</h2>\n<p>全球只有50人做出来。我思索了半个小时，仍然没有头绪。果断放弃帮npy做可乐鸡翅。虽然没有AK，但吃上了可口的鸡。</p>\n<p>赛后果然参考了<a href=\"https://leetcode-cn.com/problems/find-array-given-subset-sums/solution/cong-zi-ji-de-he-huan-yuan-shu-zu-by-lee-aj8o/\">零神的题解</a>, yyds.</p>\n",
            "tags": [
                "Competitive Programming"
            ]
        },
        {
            "id": "https://youngforest.github.io/2021/08/15/LeetCode-weekly-contest-254/",
            "url": "https://youngforest.github.io/2021/08/15/LeetCode-weekly-contest-254/",
            "title": "LeetCode weekly contest 254",
            "date_published": "2021-08-15T10:40:36.000Z",
            "content_html": "<table>\n<thead>\n<tr>\n<th>Rank</th>\n<th>Name</th>\n<th>Score</th>\n<th>Finish Time</th>\n<th>Q1 (3)</th>\n<th>Q2 (4)</th>\n<th>Q3 (6)</th>\n<th>Q4 (6)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>616 / 13755</td>\n<td>YoungForest</td>\n<td>18</td>\n<td>1:28:25</td>\n<td>0:03:14</td>\n<td>0:08:43</td>\n<td>0:37:17  🐞4</td>\n<td>1:03:25  🐞1</td>\n</tr>\n</tbody>\n</table>\n<p>一不小心，周赛博客又鸽了3周。虽然我一直在参加周赛，但赛后经常忘记总结和复盘。平日里对刷题也放松了练习。平时打卡不是让npy刷，就是抄之前的提交。毕竟自己做了1300+的题，经常出的题都是我做过的。<br />\n主要还是工作后生活丰富了许多，刷题和周赛的优先级降低不少。多场双周赛我都鸽了，快活的诱惑太大了。</p>\n<h2 id=\"1967-number-of-strings-that-appear-as-substrings-in-word\"><a class=\"markdownIt-Anchor\" href=\"#1967-number-of-strings-that-appear-as-substrings-in-word\"></a> 1967. Number of Strings That Appear as Substrings in Word</h2>\n<p>签到题。字符串问题用<code>Python</code> So easy。可惜我Q3没有坚持用<code>Python</code>，否则这周免打卡也是极有可能的。距500名差10min。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">numOfStrings</span>(<span class=\"params\">self, patterns: <span class=\"type\">List</span>[<span class=\"built_in\">str</span>], word: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        ans = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> patterns:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> s <span class=\"keyword\">in</span> word:</span><br><span class=\"line\">                ans += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(sum(patterns[i].length * word.length)),<br />\n空间复杂度: O(1).</p>\n<h2 id=\"1968-array-with-elements-not-equal-to-average-of-neighbors\"><a class=\"markdownIt-Anchor\" href=\"#1968-array-with-elements-not-equal-to-average-of-neighbors\"></a> 1968. Array With Elements Not Equal to Average of Neighbors</h2>\n<p>贪心。这道题答案并不唯一，但我看到大多数人的思路和我一样。<br />\n即 大 小 间隔插，保证2侧的数都大于/小于中间的数。自然可以保证平均数也大于/小于中间的数。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">rearrangeArray</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(nums.<span class=\"built_in\">begin</span>(), nums.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> n = nums.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> l = <span class=\"number\">0</span>, r = n - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">ans</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; l &lt;= r; i += <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            ans[i] = nums[l++];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (l &lt;= r)</span><br><span class=\"line\">                ans[i+<span class=\"number\">1</span>] = nums[r--];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(n log n),<br />\n空间复杂度: O(n).</p>\n<h2 id=\"1969-minimum-non-zero-product-of-the-array-elements\"><a class=\"markdownIt-Anchor\" href=\"#1969-minimum-non-zero-product-of-the-array-elements\"></a> 1969. Minimum Non-Zero Product of the Array Elements</h2>\n<p>贪心，尽量分成大的数和小的数, 即 1 * (2^p - 2) * 1 * (2^p - 2) * … * (2^p - 1).<br />\n前面共<code>(2^p - 2) / 2</code>组数。</p>\n<p>证明见<a href=\"https://leetcode-cn.com/problems/minimum-non-zero-product-of-the-array-elements/solution/tan-xin-ji-qi-shu-xue-zheng-ming-by-endl-uumv/\">link</a></p>\n<p>WA 3 + Runtime Error 1 发。</p>\n<p>WA 1: 计算<code>2^p</code>不应加MOD，应直接计算。<br />\nWA 2: 不加MOD的pow写错了，因为直接复制的加MOD函数，因此调用的是原函数，忘记更新成新函数。<br />\nRuntime Error: 乘法越界。超过long long, 出现在base过大的情况下。（事实上可以先将base取模克服这种情况，无奈比赛时我心态已崩。直接转了python，没有细追究原因和解决方案。<br />\nWA 3: 无奈转成Python, 但是因为又是复制原来的代码再改，在整除的地方有个地方忘改了又WA一发。而且python自带 带模的快速幂，其他语言都需要自欺实现。</p>\n<p>教训：比赛时复制粘贴再改代码要小心，可能疏漏一些地方没改。如果方便的话，不如重写一边。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">minNonZeroProduct</span>(<span class=\"params\">self, p: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        MOD = <span class=\"number\">10</span>**<span class=\"number\">9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\">        x = (<span class=\"number\">2</span>**p)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ((x - <span class=\"number\">1</span>) * <span class=\"built_in\">pow</span>(x - <span class=\"number\">2</span>, ((x - <span class=\"number\">2</span>) // <span class=\"number\">2</span>), MOD)) % MOD</span><br></pre></td></tr></table></figure>\n<h2 id=\"1970-last-day-where-you-can-still-cross\"><a class=\"markdownIt-Anchor\" href=\"#1970-last-day-where-you-can-still-cross\"></a> 1970. Last Day Where You Can Still Cross</h2>\n<p>并查集。Penetration，Princeton CS226讲Union-Find的练习题。<br />\n不同的是，如果正向填水的话，unite的操作要向8个方向尝试。<br />\n当然也可以反向扣水，这时连陆地是4个方向。<br />\n注意需要采用dummy node连接边缘的层。</p>\n<p>另外一种常见的做法是，BFS + Binary search，有些暴力。虽然也能过，但时间复杂度会差很多。<br />\nO(log(rows * cols) * rows * cols).</p>\n<p>Runtime Error 1发。</p>\n<p>居然把行列坐标转换成一维坐标写错了，导致数组越界，debug了好久。<br />\n理应是<code>r*col+c</code>, 写成了<code>r*row+c</code></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">UF</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        vector&lt;<span class=\"type\">int</span>&gt; fa;</span><br><span class=\"line\">        vector&lt;<span class=\"type\">int</span>&gt; sz;</span><br><span class=\"line\">        <span class=\"type\">int</span> n;</span><br><span class=\"line\">        <span class=\"type\">int</span> comp_cnt;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        <span class=\"built_in\">UF</span>(<span class=\"type\">int</span> _n): <span class=\"built_in\">n</span>(_n), <span class=\"built_in\">comp_cnt</span>(_n), <span class=\"built_in\">fa</span>(_n), <span class=\"built_in\">sz</span>(_n, <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">iota</span>(fa.<span class=\"built_in\">begin</span>(), fa.<span class=\"built_in\">end</span>(), <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">findset</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> fa[x] == x ? x : fa[x] = <span class=\"built_in\">findset</span>(fa[x]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">unite</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">            x = <span class=\"built_in\">findset</span>(x);</span><br><span class=\"line\">            y = <span class=\"built_in\">findset</span>(y);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x != y) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (sz[x] &lt; sz[y]) &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">swap</span>(x, y);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                fa[y] = x;</span><br><span class=\"line\">                sz[x] += sz[y];</span><br><span class=\"line\">                --comp_cnt;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">connected</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">            x = <span class=\"built_in\">findset</span>(x);</span><br><span class=\"line\">            y = <span class=\"built_in\">findset</span>(y);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x == y;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">latestDayToCross</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span> row, <span class=\"type\">const</span> <span class=\"type\">int</span> col, vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt;&amp; cells)</span> </span>&#123;</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">nums</span>(row, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(col, <span class=\"number\">0</span>));</span><br><span class=\"line\">        <span class=\"function\">UF <span class=\"title\">uf</span><span class=\"params\">(row * col + <span class=\"number\">2</span>)</span></span>;</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; direcionts = &#123;</span><br><span class=\"line\">            &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>&#125;, </span><br><span class=\"line\">            &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;,</span><br><span class=\"line\">            &#123;<span class=\"number\">-1</span>, <span class=\"number\">0</span>&#125;,</span><br><span class=\"line\">            &#123;<span class=\"number\">0</span>, <span class=\"number\">-1</span>&#125;,</span><br><span class=\"line\">            &#123;<span class=\"number\">1</span>, <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">            &#123;<span class=\"number\">1</span>, <span class=\"number\">-1</span>&#125;,</span><br><span class=\"line\">            &#123;<span class=\"number\">-1</span>, <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">            &#123;<span class=\"number\">-1</span>, <span class=\"number\">-1</span>&#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> L = row * col;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> R = row * col + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; cells.<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">            <span class=\"type\">const</span> <span class=\"type\">int</span> r = cells[i][<span class=\"number\">0</span>] - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"type\">const</span> <span class=\"type\">int</span> c = cells[i][<span class=\"number\">1</span>] - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"comment\">// cout &lt;&lt; r &lt;&lt; &quot;, &quot; &lt;&lt; c &lt;&lt; endl;</span></span><br><span class=\"line\">            nums[r][c] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"comment\">// cout &lt;&lt; r &lt;&lt; &quot;, &quot; &lt;&lt; c &lt;&lt; endl;</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                uf.<span class=\"built_in\">unite</span>(r * col + c, L);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// cout &lt;&lt; r &lt;&lt; &quot;, &quot; &lt;&lt; c &lt;&lt; endl;</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c == col - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                uf.<span class=\"built_in\">unite</span>(r * col + c, R);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// cout &lt;&lt; r &lt;&lt; &quot;, &quot; &lt;&lt; c &lt;&lt; endl;</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">const</span> <span class=\"keyword\">auto</span>&amp; d : direcionts) &#123;</span><br><span class=\"line\">                <span class=\"type\">const</span> <span class=\"type\">int</span> dr = d[<span class=\"number\">0</span>];</span><br><span class=\"line\">                <span class=\"type\">const</span> <span class=\"type\">int</span> dc = d[<span class=\"number\">1</span>];</span><br><span class=\"line\">                <span class=\"type\">const</span> <span class=\"type\">int</span> nr = dr + r;</span><br><span class=\"line\">                <span class=\"type\">const</span> <span class=\"type\">int</span> nc = dc + c;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nr &gt;= <span class=\"number\">0</span> &amp;&amp; nr &lt; row &amp;&amp; nc &gt;= <span class=\"number\">0</span> &amp;&amp; nc &lt; col) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// cout &lt;&lt; &quot;xx: &quot; &lt;&lt; nr &lt;&lt; &quot;, &quot; &lt;&lt; nc &lt;&lt; endl;</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (nums[nr][nc] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                        uf.<span class=\"built_in\">unite</span>(r * col + c, nr * col + nc);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (uf.<span class=\"built_in\">connected</span>(L, R)) <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(rows * cols),<br />\n空间复杂度: O(rows * cols).</p>\n",
            "tags": [
                "Competitive Programming"
            ]
        },
        {
            "id": "https://youngforest.github.io/2021/07/19/LeetCode-weekly-contest-250/",
            "url": "https://youngforest.github.io/2021/07/19/LeetCode-weekly-contest-250/",
            "title": "LeetCode weekly contest 250",
            "date_published": "2021-07-19T08:20:38.000Z",
            "content_html": "<table>\n<thead>\n<tr>\n<th>Rank</th>\n<th>Name</th>\n<th>Score</th>\n<th>Finish Time</th>\n<th>Q1 (3)</th>\n<th>Q2 (4)</th>\n<th>Q3 (6)</th>\n<th>Q4 (6)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>192 / 13694</td>\n<td>YoungForest</td>\n<td>18</td>\n<td>1:22:27</td>\n<td>0:03:20</td>\n<td>0:09:15  🐞1</td>\n<td>0:28:08</td>\n<td>1:07:27  🐞2</td>\n</tr>\n</tbody>\n</table>\n<p>连续2周成绩还不错，前200。导致美服小号rating都要上2400了，以后打起来会更加需要小心翼翼。</p>\n<h2 id=\"1935-maximum-number-of-words-you-can-type\"><a class=\"markdownIt-Anchor\" href=\"#1935-maximum-number-of-words-you-can-type\"></a> 1935. Maximum Number of Words You Can Type</h2>\n<p>签到题。字符串问题用Python果然没错。光<code>split</code>这一项就值得。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">canBeTypedWords</span>(<span class=\"params\">self, text: <span class=\"built_in\">str</span>, brokenLetters: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        ans = <span class=\"number\">0</span></span><br><span class=\"line\">        broken = <span class=\"built_in\">set</span>()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> brokenLetters:</span><br><span class=\"line\">            broken.add(i)</span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">ok</span>(<span class=\"params\">word</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> word:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> c <span class=\"keyword\">in</span> broken:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> text.split(<span class=\"string\">&#x27; &#x27;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ok(word):</span><br><span class=\"line\">                ans += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(text.length),<br />\n空间复杂度: O(text.length + 26).</p>\n<h2 id=\"1936-add-minimum-number-of-rungs\"><a class=\"markdownIt-Anchor\" href=\"#1936-add-minimum-number-of-rungs\"></a> 1936. Add Minimum Number of Rungs</h2>\n<p>贪心，如果够不到下一级，就在最远的距离上加一个。<br />\n需要注意，不能一级一级加，而是用除法一次加完中间缺少的。否则，会TLE（我也因此罚时5min）。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">addRungs</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; rungs, <span class=\"type\">int</span> dist)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"type\">int</span> last = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> idx = <span class=\"number\">0</span>; idx &lt; rungs.<span class=\"built_in\">size</span>(); ++idx) &#123;</span><br><span class=\"line\">            <span class=\"type\">const</span> <span class=\"type\">int</span> i = rungs[idx];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i - last &lt;= dist) &#123;</span><br><span class=\"line\">                last = i;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                ans += (i - last - <span class=\"number\">1</span>) / dist;</span><br><span class=\"line\">                last = i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(rungs.length),<br />\n空间复杂度: O(1).</p>\n<h2 id=\"1937-maximum-number-of-points-with-cost\"><a class=\"markdownIt-Anchor\" href=\"#1937-maximum-number-of-points-with-cost\"></a> 1937. Maximum Number of Points with Cost</h2>\n<p>很明显的一道动态规划题目。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dp[i][j] = points[i][j] + max(dp[i-1][k] - abs(k-j) for k in range(n))</span><br></pre></td></tr></table></figure>\n<p>然而直接莽的话，时间复杂度是 O(m * n ^ 2). 显然会TLE。需要优化。<br />\n上一行根据 abs的正负，可以分为<br />\n前面的 dp[i-1] - (j - k) = dp[i-1] + k - j,<br />\n后面的 dp[i-1] - (k - j) = dp[i-1] - k + j.<br />\n可以使用2个TreeSet记录前后的 dp + k 和 dp - k，并在j更新的时候，更新这2个TreeSet.<br />\n这样时间复杂度降为: O(m * n).</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">maxPoints</span><span class=\"params\">(vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt;&amp; points)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> m = points.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> n = points[<span class=\"number\">0</span>].<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        vector&lt;vector&lt;ll&gt;&gt; <span class=\"built_in\">dp</span>(m, <span class=\"built_in\">vector</span>&lt;ll&gt; (n, <span class=\"number\">0</span>));</span><br><span class=\"line\">        <span class=\"comment\">// i == 0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j) &#123;</span><br><span class=\"line\">            dp[<span class=\"number\">0</span>][j] = points[<span class=\"number\">0</span>][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; m; ++i) &#123;</span><br><span class=\"line\">            multiset&lt;ll&gt; before, after;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; n; ++k) &#123;</span><br><span class=\"line\">                after.<span class=\"built_in\">insert</span>(dp[i<span class=\"number\">-1</span>][k] - k);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j) &#123;</span><br><span class=\"line\">                ll add = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (before.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">                    add = *after.<span class=\"built_in\">rbegin</span>() + j;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (after.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">                    add = *before.<span class=\"built_in\">rbegin</span>() - j;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    add = <span class=\"built_in\">max</span>(*before.<span class=\"built_in\">rbegin</span>() - j, *after.<span class=\"built_in\">rbegin</span>() + j);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                dp[i][j] = <span class=\"built_in\">max</span>(dp[i][j], points[i][j] + add);</span><br><span class=\"line\">                <span class=\"keyword\">auto</span> it = after.<span class=\"built_in\">find</span>(dp[i<span class=\"number\">-1</span>][j] - j);</span><br><span class=\"line\">                after.<span class=\"built_in\">erase</span>(it);</span><br><span class=\"line\">                before.<span class=\"built_in\">insert</span>(dp[i<span class=\"number\">-1</span>][j] + j);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"built_in\">max_element</span>(dp.<span class=\"built_in\">back</span>().<span class=\"built_in\">begin</span>(), dp.<span class=\"built_in\">back</span>().<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(m * n)，<br />\n空间复杂度: O(m * n). 其实也可以降为O(n), 但写起来稍微麻烦些，对AC也没必要.</p>\n<h2 id=\"1938-maximum-genetic-difference-query\"><a class=\"markdownIt-Anchor\" href=\"#1938-maximum-genetic-difference-query\"></a> 1938. Maximum Genetic Difference Query</h2>\n<p>Trie + backtracking + 离线计算。<br />\nTrie用来快速计算最大XOR，backtracking用来维护从根到当前节点的路径和更新Trie，离线计算用以得到query的答案。</p>\n<p>使用cpp需要注意Trie的实现方式。<br />\n本题用<code>shared_ptr</code>会TLE，raw pointer + delete也会TLE。<br />\n删了delete才AC，这是逼我内存泄漏呀。<br />\n不过本题因为可以使用<code>cnt</code>表示节点状态，实际上也并不需要真正删除节点。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> MAX_BIT = <span class=\"number\">17</span>;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">TrieNode</span> &#123;</span><br><span class=\"line\">        array&lt;TrieNode*, 2&gt; children;</span><br><span class=\"line\">        <span class=\"type\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">buildTrie</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span> num, TrieNode* root, <span class=\"type\">const</span> <span class=\"type\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> b = (num &gt;&gt; index) &amp; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root-&gt;children[b] == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            root-&gt;children[b] = <span class=\"keyword\">new</span> <span class=\"built_in\">TrieNode</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        root-&gt;children[b]-&gt;cnt++;</span><br><span class=\"line\">        <span class=\"built_in\">buildTrie</span>(num, root-&gt;children[b], index - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">eraseTrie</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span> num, TrieNode* root, <span class=\"type\">const</span> <span class=\"type\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> b = (num &gt;&gt; index) &amp; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">// if (root-&gt;children[b] == nullptr) &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//     cout &lt;&lt; num &lt;&lt; &quot;:&quot; &lt;&lt; index &lt;&lt; &quot; &quot; &lt;&lt; endl;</span></span><br><span class=\"line\">        <span class=\"comment\">//     root-&gt;children[b] = make_shared&lt;TrieNode&gt;();</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">        <span class=\"built_in\">eraseTrie</span>(num, root-&gt;children[b], index - <span class=\"number\">1</span>);</span><br><span class=\"line\">        root-&gt;children[b]-&gt;cnt--;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root-&gt;children[b]-&gt;cnt == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// delete root-&gt;children[b];</span></span><br><span class=\"line\">            root-&gt;children[b] = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">maxGeneticDifference</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; parents, vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt;&amp; queries)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> n = parents.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> m = queries.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">children</span>(n);</span><br><span class=\"line\">        <span class=\"type\">int</span> rootNode = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (parents[i] == <span class=\"number\">-1</span>) rootNode = i;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> children[parents[i]].<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">ans</span><span class=\"params\">(m)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">using</span> pii = pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;;</span><br><span class=\"line\">        vector&lt;vector&lt;pii&gt;&gt; <span class=\"built_in\">offQueies</span>(n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> index = <span class=\"number\">0</span>; index &lt; m; ++index) &#123;</span><br><span class=\"line\">            offQueies[queries[index][<span class=\"number\">0</span>]].<span class=\"built_in\">push_back</span>(&#123;queries[index][<span class=\"number\">1</span>], index&#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// shared_ptr&lt;TrieNode&gt; root = make_shared&lt;TrieNode&gt;();</span></span><br><span class=\"line\">        <span class=\"keyword\">auto</span> root = <span class=\"keyword\">new</span> <span class=\"built_in\">TrieNode</span>();</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> maxXOR = [&amp;](<span class=\"type\">const</span> <span class=\"type\">int</span> val) -&gt; <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> current = root;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = MAX_BIT; i &gt;= <span class=\"number\">0</span>; --i) &#123;</span><br><span class=\"line\">                <span class=\"type\">const</span> <span class=\"type\">int</span> b = (val &gt;&gt; i) &amp; <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (current-&gt;children[<span class=\"number\">1</span> - b]) &#123;</span><br><span class=\"line\">                    ans += (<span class=\"number\">1</span> &lt;&lt; i);</span><br><span class=\"line\">                    current = current-&gt;children[<span class=\"number\">1</span> - b];</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    current = current-&gt;children[b];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        function&lt;<span class=\"type\">void</span>(<span class=\"type\">const</span> <span class=\"type\">int</span>, vector&lt;<span class=\"type\">int</span>&gt;&amp;)&gt; dfs = [&amp;](<span class=\"type\">const</span> <span class=\"type\">int</span> current, vector&lt;<span class=\"type\">int</span>&gt;&amp; path) -&gt; <span class=\"type\">void</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> p : offQueies[current]) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> val = <span class=\"built_in\">get</span>&lt;<span class=\"number\">0</span>&gt;(p);</span><br><span class=\"line\">                <span class=\"type\">int</span> index = <span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(p);</span><br><span class=\"line\">                ans[index] = <span class=\"built_in\">maxXOR</span>(val);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// cout &lt;&lt; current &lt;&lt; &quot; &quot;;</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> child : children[current]) &#123;</span><br><span class=\"line\">                path.<span class=\"built_in\">push_back</span>(child);</span><br><span class=\"line\">                <span class=\"built_in\">buildTrie</span>(child, root, MAX_BIT);</span><br><span class=\"line\">                <span class=\"built_in\">dfs</span>(child, path);</span><br><span class=\"line\">                <span class=\"built_in\">eraseTrie</span>(path.<span class=\"built_in\">back</span>(), root, MAX_BIT);</span><br><span class=\"line\">                path.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        vector&lt;<span class=\"type\">int</span>&gt; path;</span><br><span class=\"line\">        path.<span class=\"built_in\">push_back</span>(rootNode);</span><br><span class=\"line\">        <span class=\"built_in\">buildTrie</span>(rootNode, root, MAX_BIT);</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(rootNode, path);</span><br><span class=\"line\">        <span class=\"built_in\">eraseTrie</span>(path.<span class=\"built_in\">back</span>(), root, MAX_BIT);</span><br><span class=\"line\">        path.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(log (max(val_i)) * (parents.length + queries.length)),<br />\n空间复杂度: O(parents.length), Trie的空间消耗其实是个等比数列求和。</p>\n",
            "tags": [
                "Competitive Programming"
            ]
        },
        {
            "id": "https://youngforest.github.io/2021/07/12/LeetCode-biweekly-contest-56/",
            "url": "https://youngforest.github.io/2021/07/12/LeetCode-biweekly-contest-56/",
            "title": "LeetCode biweekly contest 56",
            "date_published": "2021-07-12T17:20:27.000Z",
            "content_html": "<table>\n<thead>\n<tr>\n<th>Rank</th>\n<th>Name</th>\n<th>Score</th>\n<th>Finish Time</th>\n<th>Q1 (3)</th>\n<th>Q2 (5)</th>\n<th>Q3 (5)</th>\n<th>Q4 (6)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>998 / 10896</td>\n<td>YoungForest</td>\n<td>18</td>\n<td>1:27:14</td>\n<td>0:02:33</td>\n<td>0:13:25</td>\n<td>1:17:14  🐞2</td>\n<td>null</td>\n</tr>\n</tbody>\n</table>\n<p>现在双周赛的参赛人数都快赶上周赛了。</p>\n<h2 id=\"1925-count-square-sum-triples\"><a class=\"markdownIt-Anchor\" href=\"#1925-count-square-sum-triples\"></a> 1925. Count Square Sum Triples</h2>\n<p>签到题，暴力枚举所有的组合。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">countTriples</span>(<span class=\"params\">self, n: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        ans = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, n+<span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, c+<span class=\"number\">1</span>):</span><br><span class=\"line\">                <span class=\"keyword\">for</span> a <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, b+<span class=\"number\">1</span>):</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> a * a + b * b == c * c:</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> a == b: ans += <span class=\"number\">1</span></span><br><span class=\"line\">                        <span class=\"keyword\">else</span>: ans += <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(N^3),<br />\n空间复杂度: O(1).</p>\n<h2 id=\"1926-nearest-exit-from-entrance-in-maze\"><a class=\"markdownIt-Anchor\" href=\"#1926-nearest-exit-from-entrance-in-maze\"></a> 1926. Nearest Exit from Entrance in Maze</h2>\n<p>寻找最近的出口。标准的BFS。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">nearestExit</span>(<span class=\"params\">self, maze: <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">str</span>]], entrance: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        visited = <span class=\"built_in\">set</span>()</span><br><span class=\"line\">        q = deque()</span><br><span class=\"line\">        start = (entrance[<span class=\"number\">0</span>], entrance[<span class=\"number\">1</span>])</span><br><span class=\"line\">        visited.add(start)</span><br><span class=\"line\">        q.append(start)</span><br><span class=\"line\">        step = <span class=\"number\">0</span></span><br><span class=\"line\">        directions = [(<span class=\"number\">1</span>, <span class=\"number\">0</span>), (<span class=\"number\">0</span>, <span class=\"number\">1</span>), (-<span class=\"number\">1</span>, <span class=\"number\">0</span>), (<span class=\"number\">0</span>, -<span class=\"number\">1</span>)]</span><br><span class=\"line\">        rows = <span class=\"built_in\">len</span>(maze)</span><br><span class=\"line\">        cols = <span class=\"built_in\">len</span>(maze[<span class=\"number\">0</span>])</span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">exitCell</span>(<span class=\"params\">cell</span>):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (cell[<span class=\"number\">0</span>] == <span class=\"number\">0</span> <span class=\"keyword\">or</span> cell[<span class=\"number\">0</span>] == rows - <span class=\"number\">1</span> <span class=\"keyword\">or</span> cell[<span class=\"number\">1</span>] == <span class=\"number\">0</span> <span class=\"keyword\">or</span> cell[<span class=\"number\">1</span>] == cols - <span class=\"number\">1</span>) <span class=\"keyword\">and</span> maze[cell[<span class=\"number\">0</span>]][cell[<span class=\"number\">1</span>]] == <span class=\"string\">&#x27;.&#x27;</span> <span class=\"keyword\">and</span> cell != start </span><br><span class=\"line\">        <span class=\"keyword\">while</span> q:</span><br><span class=\"line\">            s = <span class=\"built_in\">len</span>(q)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(s):</span><br><span class=\"line\">                current = q.popleft()</span><br><span class=\"line\">                <span class=\"keyword\">if</span> exitCell(current): <span class=\"keyword\">return</span> step</span><br><span class=\"line\">                <span class=\"keyword\">for</span> di, dj <span class=\"keyword\">in</span> directions:</span><br><span class=\"line\">                    ni = di + current[<span class=\"number\">0</span>]</span><br><span class=\"line\">                    nj = dj + current[<span class=\"number\">1</span>]</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> ni &gt;= <span class=\"number\">0</span> <span class=\"keyword\">and</span> ni &lt; rows <span class=\"keyword\">and</span> nj &gt;= <span class=\"number\">0</span> <span class=\"keyword\">and</span> nj &lt; cols <span class=\"keyword\">and</span> maze[ni][nj] == <span class=\"string\">&#x27;.&#x27;</span> <span class=\"keyword\">and</span> (ni, nj) <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> visited:</span><br><span class=\"line\">                        visited.add((ni, nj))</span><br><span class=\"line\">                        q.append((ni,nj))</span><br><span class=\"line\">            step += <span class=\"number\">1</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(m * n),<br />\n空间复杂度: O(m * n).</p>\n<h2 id=\"1927-sum-game\"><a class=\"markdownIt-Anchor\" href=\"#1927-sum-game\"></a> 1927. Sum Game</h2>\n<p>贪心。<br />\n尽量先取问好少的那边（直到取完），Alice尽量让差变大，Bob尽量让差变小。</p>\n<p>想法是好的，但我最后写的又臭又长，在比赛结束前13分钟才Accept。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">sumGame</span>(<span class=\"params\">self, num: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">        n = <span class=\"built_in\">len</span>(num)</span><br><span class=\"line\">        leftSum = <span class=\"number\">0</span></span><br><span class=\"line\">        rightSum = <span class=\"number\">0</span></span><br><span class=\"line\">        left = <span class=\"number\">0</span></span><br><span class=\"line\">        right = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> num[i] == <span class=\"string\">&#x27;?&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> i &gt;= n // <span class=\"number\">2</span>: right += <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>: left += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> i &gt;= n // <span class=\"number\">2</span>: rightSum += <span class=\"built_in\">ord</span>(num[i]) - <span class=\"built_in\">ord</span>(<span class=\"string\">&#x27;0&#x27;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">else</span>: leftSum += <span class=\"built_in\">ord</span>(num[i]) - <span class=\"built_in\">ord</span>(<span class=\"string\">&#x27;0&#x27;</span>)</span><br><span class=\"line\">        total = right + left</span><br><span class=\"line\">        <span class=\"comment\"># print (&#x27;total: &#x27;, total)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> total % <span class=\"number\">2</span> == <span class=\"number\">1</span>: <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        alice = <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(total):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> alice:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> left == <span class=\"number\">0</span> <span class=\"keyword\">or</span> (right != <span class=\"number\">0</span> <span class=\"keyword\">and</span> left &gt; right): <span class=\"comment\"># pick right</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> leftSum &lt;= rightSum <span class=\"keyword\">or</span> rightSum + <span class=\"number\">9</span> &gt; leftSum:</span><br><span class=\"line\">                        rightSum += <span class=\"number\">9</span></span><br><span class=\"line\">                    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                        rightSum += <span class=\"number\">0</span></span><br><span class=\"line\">                    right -= <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">elif</span> right == <span class=\"number\">0</span> <span class=\"keyword\">or</span> left &lt; right: <span class=\"comment\"># pick left</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> leftSum &gt;= rightSum <span class=\"keyword\">or</span> leftSum + <span class=\"number\">9</span> &gt; rightSum:</span><br><span class=\"line\">                        leftSum += <span class=\"number\">9</span></span><br><span class=\"line\">                    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                        leftSum += <span class=\"number\">0</span></span><br><span class=\"line\">                    left -= <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> leftSum == rightSum:</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">                    <span class=\"keyword\">elif</span> leftSum &gt; rightSum:</span><br><span class=\"line\">                        leftSum += <span class=\"number\">9</span></span><br><span class=\"line\">                        left -= <span class=\"number\">1</span></span><br><span class=\"line\">                    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                        rightSum += <span class=\"number\">9</span></span><br><span class=\"line\">                        right -= <span class=\"number\">1</span></span><br><span class=\"line\">                        </span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> left == <span class=\"number\">0</span> <span class=\"keyword\">or</span> (right != <span class=\"number\">0</span> <span class=\"keyword\">and</span> left &gt; right): <span class=\"comment\"># pick right</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> leftSum &gt; rightSum:</span><br><span class=\"line\">                        rightSum +=  <span class=\"number\">9</span> <span class=\"keyword\">if</span> (leftSum - rightSum &gt; <span class=\"number\">9</span>) <span class=\"keyword\">else</span> leftSum - rightSum</span><br><span class=\"line\">                    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                        rightSum += <span class=\"number\">0</span></span><br><span class=\"line\">                    right -= <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">elif</span> right == <span class=\"number\">0</span> <span class=\"keyword\">or</span> left &lt; right: <span class=\"comment\"># pick left</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> leftSum &lt; rightSum:</span><br><span class=\"line\">                        leftSum += <span class=\"number\">9</span> <span class=\"keyword\">if</span> (rightSum - leftSum &gt; <span class=\"number\">9</span>) <span class=\"keyword\">else</span> rightSum - leftSum</span><br><span class=\"line\">                    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                        leftSum += <span class=\"number\">0</span></span><br><span class=\"line\">                    left -= <span class=\"number\">1</span></span><br><span class=\"line\">                    </span><br><span class=\"line\">            <span class=\"comment\"># print (left, leftSum, rightSum, right)</span></span><br><span class=\"line\">                </span><br><span class=\"line\">            alice = <span class=\"keyword\">not</span> alice</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">return</span> leftSum != rightSum</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(num.length),<br />\n空间复杂度: O(num.length).</p>\n<h2 id=\"1928-minimum-cost-to-reach-destination-in-time\"><a class=\"markdownIt-Anchor\" href=\"#1928-minimum-cost-to-reach-destination-in-time\"></a> 1928. Minimum Cost to Reach Destination in Time</h2>\n<p>也是一道经典的题目。在限制时间的情况下，花费最小。</p>\n<p><a href=\"https://leetcode-cn.com/problems/minimum-cost-to-reach-destination-in-time/solution/gui-ding-shi-jian-nei-dao-da-zhong-dian-n3ews/\">国服官方的DP解</a></p>\n",
            "tags": [
                "Competitive Programming"
            ]
        },
        {
            "id": "https://youngforest.github.io/2021/07/11/LeetCode-weekly-contest-249/",
            "url": "https://youngforest.github.io/2021/07/11/LeetCode-weekly-contest-249/",
            "title": "LeetCode weekly contest 249",
            "date_published": "2021-07-11T16:54:25.000Z",
            "content_html": "<table>\n<thead>\n<tr>\n<th>Rank</th>\n<th>Name</th>\n<th>Score</th>\n<th>Finish Time</th>\n<th>Q1 (3)</th>\n<th>Q2 (4)</th>\n<th>Q3 (6)</th>\n<th>Q4 (6)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>74 / 12832</td>\n<td>YoungForest</td>\n<td>19</td>\n<td>1:06:48</td>\n<td>0:02:44</td>\n<td>0:07:11</td>\n<td>0:37:44</td>\n<td>1:01:48 🐞1</td>\n</tr>\n</tbody>\n</table>\n<p>周赛博客更新一不小心就鸽了3周。因为最近毕业+入职，确实比较忙。中间因为毕业旅行，甚至罕见地鸽了一次周赛和双周赛。<br />\n本周算是入职亚马逊之后的第一周，全球排名也惊喜地达到了74名。仔细算算，自己上次周赛进前100名还是243场，也就是大概一个半月前的时间了。<br />\n本周后2题都是hard，确实容易拉开距离。</p>\n<p>因为我国服rating达到了2460，我担心掉分，因此最近基本都在美服玩耍。美服是个2330的“小号”，基本很难掉分。</p>\n<h2 id=\"1929-concatenation-of-array\"><a class=\"markdownIt-Anchor\" href=\"#1929-concatenation-of-array\"></a> 1929. Concatenation of Array</h2>\n<p>签到题。Straight forward。Python竟然可以一行<code>return nums + nums</code>。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">getConcatenation</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> n = nums.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">ans</span><span class=\"params\">(<span class=\"number\">2</span> * n)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            ans[i] = ans[i+n] = nums[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(n),<br />\n空间复杂度: O(n).</p>\n<h2 id=\"1930-unique-length-3-palindromic-subsequences\"><a class=\"markdownIt-Anchor\" href=\"#1930-unique-length-3-palindromic-subsequences\"></a> 1930. Unique Length-3 Palindromic Subsequences</h2>\n<p>因为回文串的长度比较短，只有3. 因此，最多有26*26种回文串。可以用中间和两侧的字符表示这个回文串。<br />\n因为是subsequence，需要用<code>cntLeft</code>和<code>cntRight</code>维护两侧字符是否满足要求。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">countPalindromicSubsequence</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">bool</span>&gt;&gt; <span class=\"built_in\">seen</span>(<span class=\"number\">26</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">bool</span>&gt;(<span class=\"number\">26</span>, <span class=\"literal\">false</span>));</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">cntRight</span><span class=\"params\">(<span class=\"number\">26</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">char</span> c : s) &#123;</span><br><span class=\"line\">            ++cntRight[c - <span class=\"string\">&#x27;a&#x27;</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">cntLeft</span><span class=\"params\">(<span class=\"number\">26</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">char</span> c : s) &#123;</span><br><span class=\"line\">            --cntRight[c - <span class=\"string\">&#x27;a&#x27;</span>];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">char</span> i = <span class=\"string\">&#x27;a&#x27;</span>; i &lt;= <span class=\"string\">&#x27;z&#x27;</span>; ++i) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (cntRight[i - <span class=\"string\">&#x27;a&#x27;</span>] &gt; <span class=\"number\">0</span> &amp;&amp; cntLeft[i - <span class=\"string\">&#x27;a&#x27;</span>] &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!seen[c - <span class=\"string\">&#x27;a&#x27;</span>][i - <span class=\"string\">&#x27;a&#x27;</span>]) &#123;</span><br><span class=\"line\">                        ++ans;</span><br><span class=\"line\">                        seen[c - <span class=\"string\">&#x27;a&#x27;</span>][i - <span class=\"string\">&#x27;a&#x27;</span>] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ++cntLeft[c - <span class=\"string\">&#x27;a&#x27;</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(26*s.length),<br />\n空间复杂度: O(26 * 26).</p>\n<h2 id=\"1931-painting-a-grid-with-three-different-colors\"><a class=\"markdownIt-Anchor\" href=\"#1931-painting-a-grid-with-three-different-colors\"></a> 1931. Painting a Grid With Three Different Colors</h2>\n<p>算是<a href=\"https://leetcode.com/problems/number-of-ways-to-paint-n-3-grid/\">1411. Number of Ways to Paint N × 3 Grid</a>的升级版。<br />\n行数从3变成了1-5，但思想不变，仍然是 3进制的bit_mask + dp。</p>\n<p>用3进制bit_mask表示每一列的颜色状态，从上一列的颜色排列数量得到新的一列的数量。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> MOD = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">colorTheGrid</span><span class=\"params\">(<span class=\"type\">int</span> m, <span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> pow3m = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> x = <span class=\"number\">0</span>; x &lt; m; ++x) &#123;</span><br><span class=\"line\">            pow3m *= <span class=\"number\">3</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> ok = [&amp;](<span class=\"type\">int</span> i, <span class=\"type\">int</span> j) -&gt; <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> x = <span class=\"number\">0</span>; x &lt; m; ++x) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((i % <span class=\"number\">3</span>) == (j % <span class=\"number\">3</span>)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                i /= <span class=\"number\">3</span>;</span><br><span class=\"line\">                j /= <span class=\"number\">3</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> isLegal = [&amp;](<span class=\"type\">int</span> i) -&gt; <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> last = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> x = <span class=\"number\">0</span>; x &lt; m; ++x) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i % <span class=\"number\">3</span> == last) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                last = i % <span class=\"number\">3</span>;</span><br><span class=\"line\">                i /= <span class=\"number\">3</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        </span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">match</span>(pow3m);</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">bool</span>&gt; <span class=\"title\">legal</span><span class=\"params\">(pow3m)</span></span>;</span><br><span class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; (pow3m); ++i) &#123;</span><br><span class=\"line\">              legal[i] = <span class=\"built_in\">isLegal</span>(i);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; (pow3m); ++i) &#123;</span><br><span class=\"line\">              <span class=\"comment\">// cout &lt;&lt; legal[i] &lt;&lt; &quot; &quot; &lt;&lt; endl;</span></span><br><span class=\"line\">              <span class=\"keyword\">if</span> (!legal[i]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">              <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; (pow3m); ++j) &#123;</span><br><span class=\"line\">                  <span class=\"comment\">// cout &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; j &lt;&lt; &quot;....&quot;;</span></span><br><span class=\"line\">                  <span class=\"keyword\">if</span> (!legal[j]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                  <span class=\"comment\">// cout &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; j &lt;&lt; &quot;****&quot;;</span></span><br><span class=\"line\">                  <span class=\"keyword\">if</span> (<span class=\"built_in\">ok</span>(i, j)) &#123;</span><br><span class=\"line\">                      match[i].<span class=\"built_in\">push_back</span>(j);</span><br><span class=\"line\">                      <span class=\"comment\">// cout &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; j &lt;&lt; &quot;;&quot;;</span></span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">dp</span>(pow3m, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; (n, <span class=\"number\">0</span>));</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> mask = <span class=\"number\">0</span>; mask &lt; (pow3m); ++mask) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (legal[mask])</span><br><span class=\"line\">                dp[mask][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"comment\">// cout &lt;&lt; dp[mask][0] &lt;&lt; &quot; &quot;;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// cout &lt;&lt; endl;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> mask = <span class=\"number\">0</span>; mask &lt; (pow3m); ++mask) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!legal[mask]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> left : match[mask]) &#123;</span><br><span class=\"line\">                    dp[mask][i] = (dp[mask][i] + dp[left][i<span class=\"number\">-1</span>]) % MOD;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// cout &lt;&lt; dp[mask][i] &lt;&lt; &quot; &quot;;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// cout &lt;&lt; endl;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> mask = <span class=\"number\">0</span>; mask &lt; (pow3m); ++mask) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (legal[mask])</span><br><span class=\"line\">                ans = (ans + dp[mask][n<span class=\"number\">-1</span>]) % MOD;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans % MOD;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(3<sup>m</sup>2 + n*3^m),<br />\n空间复杂度: O(n * 3^m).</p>\n<h2 id=\"1932-merge-bsts-to-create-single-bst\"><a class=\"markdownIt-Anchor\" href=\"#1932-merge-bsts-to-create-single-bst\"></a> 1932. Merge BSTs to Create Single BST</h2>\n<p>算法不难，但是实现起来比较复杂，corner case也容易fail。<br />\n根据题目描述，找到每个根和叶子的对应，进行合并操作。<br />\n最后还得检查是否是BST。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * struct TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode *left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode *right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"function\">tuple&lt;<span class=\"type\">bool</span>, <span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; <span class=\"title\">solve</span><span class=\"params\">(TreeNode* root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// is BST, max value, min value</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!root) <span class=\"keyword\">return</span> &#123;<span class=\"literal\">true</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        tuple&lt;<span class=\"type\">bool</span>, <span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; ret = &#123;<span class=\"literal\">true</span>, root-&gt;val, root-&gt;val&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root-&gt;left) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> l = <span class=\"built_in\">solve</span>(root-&gt;left);</span><br><span class=\"line\">            <span class=\"built_in\">get</span>&lt;<span class=\"number\">0</span>&gt;(ret) = <span class=\"built_in\">get</span>&lt;<span class=\"number\">0</span>&gt;(ret) &amp;&amp; <span class=\"built_in\">get</span>&lt;<span class=\"number\">0</span>&gt;(l) &amp;&amp; root-&gt;val &gt; <span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(l);</span><br><span class=\"line\">            <span class=\"built_in\">get</span>&lt;<span class=\"number\">2</span>&gt;(ret) = <span class=\"built_in\">min</span>(<span class=\"built_in\">get</span>&lt;<span class=\"number\">2</span>&gt;(ret), <span class=\"built_in\">get</span>&lt;<span class=\"number\">2</span>&gt;(l));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root-&gt;right) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> r = <span class=\"built_in\">solve</span>(root-&gt;right);</span><br><span class=\"line\">            <span class=\"built_in\">get</span>&lt;<span class=\"number\">0</span>&gt;(ret) = <span class=\"built_in\">get</span>&lt;<span class=\"number\">0</span>&gt;(ret) &amp;&amp; <span class=\"built_in\">get</span>&lt;<span class=\"number\">0</span>&gt;(r) &amp;&amp; root-&gt;val &lt; <span class=\"built_in\">get</span>&lt;<span class=\"number\">2</span>&gt;(r);</span><br><span class=\"line\">            <span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(ret) = <span class=\"built_in\">max</span>(<span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(ret), <span class=\"built_in\">get</span>&lt;<span class=\"number\">1</span>&gt;(r));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isValidBST</span><span class=\"params\">(TreeNode* root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">get</span>&lt;<span class=\"number\">0</span>&gt;(<span class=\"built_in\">solve</span>(root));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">count</span><span class=\"params\">(TreeNode* root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!root) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">count</span>(root-&gt;left) + <span class=\"built_in\">count</span>(root-&gt;right) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">TreeNode* <span class=\"title\">canMerge</span><span class=\"params\">(vector&lt;TreeNode*&gt;&amp; trees)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> n = trees.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        unordered_map&lt;TreeNode*, TreeNode*&gt; leaves;</span><br><span class=\"line\">        unordered_map&lt;<span class=\"type\">int</span>, TreeNode*&gt; value2leaf;</span><br><span class=\"line\">        vector&lt;TreeNode*&gt; equalLeaves;</span><br><span class=\"line\">        <span class=\"type\">bool</span> bad = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        unordered_set&lt;<span class=\"type\">int</span>&gt; seen;</span><br><span class=\"line\">        function&lt;<span class=\"type\">void</span>(TreeNode*, TreeNode*)&gt; dfs = [&amp;](TreeNode* root, TreeNode* parent) -&gt; <span class=\"type\">void</span> &#123;</span><br><span class=\"line\">            seen.<span class=\"built_in\">insert</span>(root-&gt;val);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (parent) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (value2leaf.<span class=\"built_in\">find</span>(root-&gt;val) != value2leaf.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">                    bad = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                leaves[root] = parent;</span><br><span class=\"line\">                value2leaf[root-&gt;val] = root;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (root-&gt;left) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">dfs</span>(root-&gt;left, root);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (root-&gt;right) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">dfs</span>(root-&gt;right, root);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> root : trees) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">dfs</span>(root, <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (bad) <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        TreeNode* ans = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> root : trees) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> it = value2leaf.<span class=\"built_in\">find</span>(root-&gt;val);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (it == value2leaf.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ans != <span class=\"literal\">nullptr</span>) <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">                ans = root;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">auto</span> leaf = it-&gt;second;</span><br><span class=\"line\">                <span class=\"keyword\">auto</span> parent = leaves[leaf];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (parent-&gt;left &amp;&amp; parent-&gt;left-&gt;val == root-&gt;val) &#123;</span><br><span class=\"line\">                    parent-&gt;left = root;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (parent-&gt;right &amp;&amp; parent-&gt;right-&gt;val == root-&gt;val) &#123;</span><br><span class=\"line\">                    parent-&gt;right = root;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ans) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"built_in\">isValidBST</span>(ans)) <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">count</span>(ans) != seen.<span class=\"built_in\">size</span>()) <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(trees.length),<br />\n空间复杂度: O(trees.length).</p>\n",
            "tags": [
                "Competitive Programming"
            ]
        },
        {
            "id": "https://youngforest.github.io/2021/06/16/LeetCode-biweekly-contest-54/",
            "url": "https://youngforest.github.io/2021/06/16/LeetCode-biweekly-contest-54/",
            "title": "LeetCode biweekly contest 54",
            "date_published": "2021-06-16T00:36:43.000Z",
            "content_html": "<table>\n<thead>\n<tr>\n<th>Rank</th>\n<th>Name</th>\n<th>Score</th>\n<th>Finish Time</th>\n<th>Q1 (3)</th>\n<th>Q2 (5)</th>\n<th>Q3 (5)</th>\n<th>Q4 (6)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>120 / 12076</td>\n<td>YoungForest</td>\n<td>18</td>\n<td>1:19:33</td>\n<td>0:03:17</td>\n<td>0:09:23 🐞1</td>\n<td>0:26:15</td>\n<td>1:04:33 🐞2</td>\n</tr>\n</tbody>\n</table>\n<p>继续保持好成绩，尤其是最后一题，还是挺难的。刚开始没有思路甚至想放弃，但最后还是靠自己的思考解决了难题。</p>\n<h2 id=\"1893-check-if-all-the-integers-in-a-range-are-covered\"><a class=\"markdownIt-Anchor\" href=\"#1893-check-if-all-the-integers-in-a-range-are-covered\"></a> 1893. Check if All the Integers in a Range Are Covered</h2>\n<p>签到题。对于<code>[right, right]</code>中每一个数，判断是否被<code>ranges</code>中的某个区间包含。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isCovered</span><span class=\"params\">(vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt;&amp; ranges, <span class=\"type\">int</span> left, <span class=\"type\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> cover = [&amp;](<span class=\"type\">const</span> <span class=\"type\">int</span> i) -&gt; <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">const</span> <span class=\"keyword\">auto</span>&amp; range : ranges) &#123;</span><br><span class=\"line\">                <span class=\"type\">const</span> <span class=\"type\">int</span> l = range[<span class=\"number\">0</span>], r = range[<span class=\"number\">1</span>];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (l &lt;= i &amp;&amp; i &lt;= r) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = left; i &lt;= right; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"built_in\">cover</span>(i)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O((right - left) * ranges.length),<br />\n空间复杂度: O(1).</p>\n<h2 id=\"1894-find-the-student-that-will-replace-the-chalk\"><a class=\"markdownIt-Anchor\" href=\"#1894-find-the-student-that-will-replace-the-chalk\"></a> 1894. Find the Student that Will Replace the Chalk</h2>\n<p>先求前缀和，把k和和取余数，可以定位到最后一轮的遍历。然后用二分搜索寻找恰好大于k的位置，即为需要更换粉笔的学生。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">chalkReplacer</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; chalk, <span class=\"type\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> n = chalk.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"function\">vector&lt;ll&gt; <span class=\"title\">presum</span><span class=\"params\">(n + <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">        presum[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            presum[i+<span class=\"number\">1</span>] = presum[i] + chalk[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k &gt;= presum.<span class=\"built_in\">back</span>()) &#123;</span><br><span class=\"line\">            k = k % presum.<span class=\"built_in\">back</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// the first index, presum[i] &gt; k</span></span><br><span class=\"line\">        <span class=\"keyword\">auto</span> it = <span class=\"built_in\">upper_bound</span>(presum.<span class=\"built_in\">begin</span>(), presum.<span class=\"built_in\">end</span>(), k);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">distance</span>(presum.<span class=\"built_in\">begin</span>(), it) - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(N + log N), N = chalk.length,<br />\n空间复杂度: O(chalk.length).</p>\n<p>需要注意数据范围，计算前缀和时可能会<code>int</code>溢出。我也因此Runtime Error一次。换成<code>long long</code>就好了。LeetCode最近坑溢出的case越来越多了，以后遇到需要先预估一下最大的值，该用<code>long long</code>用<code>long long</code>.</p>\n<h2 id=\"1895-largest-magic-square\"><a class=\"markdownIt-Anchor\" href=\"#1895-largest-magic-square\"></a> 1895. Largest Magic Square</h2>\n<p>暴力法：从大到小枚举所有的正方形，计算所有行、列、对角的和，判断是否相等。唯一的优化是采用前缀和，快速计算行列和。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">largestMagicSquare</span><span class=\"params\">(vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> m = grid.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> n = grid[<span class=\"number\">0</span>].<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">presumLeft</span>(m, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(n + <span class=\"number\">1</span>));</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i) &#123;</span><br><span class=\"line\">            presumLeft[i][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j) &#123;</span><br><span class=\"line\">                presumLeft[i][j+<span class=\"number\">1</span>] = presumLeft[i][j] + grid[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">presumUp</span>(m + <span class=\"number\">1</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(n));</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j) &#123;</span><br><span class=\"line\">            presumUp[<span class=\"number\">0</span>][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i) &#123;</span><br><span class=\"line\">                presumUp[i+<span class=\"number\">1</span>][j] = presumUp[i][j] + grid[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">auto</span> check = [&amp;](<span class=\"type\">const</span> <span class=\"type\">int</span> i, <span class=\"type\">const</span> <span class=\"type\">int</span> j, <span class=\"type\">const</span> <span class=\"type\">int</span> k) -&gt; <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> target = presumLeft[i][j+k] - presumLeft[i][j];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> row = <span class=\"number\">1</span>; row &lt; k; ++row) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (target != presumLeft[i+row][j+k] - presumLeft[i+row][j]) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> col = <span class=\"number\">0</span>; col &lt; k; ++col) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (target != presumUp[i+k][j+col] - presumUp[i][j+col]) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> diagonal = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> row = <span class=\"number\">0</span>; row &lt; k; ++row) &#123;</span><br><span class=\"line\">                    diagonal += grid[i+row][j+row];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (diagonal != target) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> diagonal = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> row = <span class=\"number\">0</span>; row &lt; k; ++row) &#123;</span><br><span class=\"line\">                    diagonal += grid[i+row][j+k<span class=\"number\">-1</span>-row];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (diagonal != target) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"built_in\">min</span>(n, m); k &gt; <span class=\"number\">0</span>; --k) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (i + k &lt;= m &amp;&amp; j + k &lt;= n &amp;&amp; <span class=\"built_in\">check</span>(i, j, k)) <span class=\"keyword\">return</span> k;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(N^4),<br />\n空间复杂度: O(N^2).</p>\n<h2 id=\"1896-minimum-cost-to-change-the-final-value-of-expression\"><a class=\"markdownIt-Anchor\" href=\"#1896-minimum-cost-to-change-the-final-value-of-expression\"></a> 1896. Minimum Cost to Change the Final Value of Expression</h2>\n<p>递归，根据 &amp; | 和 子表达式的值 进行分类，寻找最小cost。<br />\n括号的处理需要提前用栈，找到所有的配对。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">minOperationsToFlip</span>(<span class=\"params\">self, expression: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        n = <span class=\"built_in\">len</span>(expression)</span><br><span class=\"line\">        leftPair = &#123;&#125;</span><br><span class=\"line\">        left = <span class=\"number\">0</span></span><br><span class=\"line\">        leftStack = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> expression[i] == <span class=\"string\">&#x27;)&#x27;</span>:</span><br><span class=\"line\">                left -= <span class=\"number\">1</span></span><br><span class=\"line\">                leftPair[i] = leftStack.pop()</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> expression[i] == <span class=\"string\">&#x27;(&#x27;</span>:</span><br><span class=\"line\">                left += <span class=\"number\">1</span></span><br><span class=\"line\">                leftStack.append(i)</span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">dp</span>(<span class=\"params\">i, j</span>):</span><br><span class=\"line\">            <span class=\"comment\"># [i, j)</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> i + <span class=\"number\">1</span> == j: <span class=\"comment\"># 0, 1</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> expression[i] == <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> expression[j-<span class=\"number\">1</span>] == <span class=\"string\">&#x27;)&#x27;</span>:</span><br><span class=\"line\">                    leftIndex = leftPair[j-<span class=\"number\">1</span>]</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> leftIndex == i: <span class=\"keyword\">return</span> dp(i+<span class=\"number\">1</span>,j-<span class=\"number\">1</span>)</span><br><span class=\"line\">                    pivot = leftIndex - <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    <span class=\"comment\"># 0, 1</span></span><br><span class=\"line\">                    pivot = j - <span class=\"number\">2</span></span><br><span class=\"line\">                    </span><br><span class=\"line\">                <span class=\"keyword\">if</span> expression[pivot] == <span class=\"string\">&#x27;0&#x27;</span> <span class=\"keyword\">or</span> expression[pivot] == <span class=\"string\">&#x27;1&#x27;</span>: pivot -= <span class=\"number\">1</span></span><br><span class=\"line\">                leftResult, leftCost = dp(i, pivot)</span><br><span class=\"line\">                rightResult, rightCost = dp(pivot+<span class=\"number\">1</span>, j)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> expression[pivot] == <span class=\"string\">&#x27;|&#x27;</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> leftResult == <span class=\"literal\">False</span> <span class=\"keyword\">and</span> rightResult == <span class=\"literal\">False</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"literal\">False</span>, <span class=\"built_in\">min</span>(leftCost, rightCost)</span><br><span class=\"line\">                    <span class=\"keyword\">elif</span> leftResult == <span class=\"literal\">True</span> <span class=\"keyword\">and</span> rightResult == <span class=\"literal\">False</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"literal\">True</span>, <span class=\"number\">1</span></span><br><span class=\"line\">                    <span class=\"keyword\">elif</span> leftResult == <span class=\"literal\">False</span> <span class=\"keyword\">and</span> rightResult == <span class=\"literal\">True</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"literal\">True</span>, <span class=\"number\">1</span></span><br><span class=\"line\">                    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"literal\">True</span>, <span class=\"built_in\">min</span>(leftCost + <span class=\"number\">1</span>, rightCost + <span class=\"number\">1</span>)</span><br><span class=\"line\">                <span class=\"keyword\">elif</span> expression[pivot] == <span class=\"string\">&#x27;&amp;&#x27;</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> leftResult == <span class=\"literal\">False</span> <span class=\"keyword\">and</span> rightResult == <span class=\"literal\">False</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"literal\">False</span>, <span class=\"built_in\">min</span>(leftCost + <span class=\"number\">1</span>, rightCost + <span class=\"number\">1</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">elif</span> leftResult == <span class=\"literal\">True</span> <span class=\"keyword\">and</span> rightResult == <span class=\"literal\">False</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"literal\">False</span>, <span class=\"number\">1</span></span><br><span class=\"line\">                    <span class=\"keyword\">elif</span> leftResult == <span class=\"literal\">False</span> <span class=\"keyword\">and</span> rightResult == <span class=\"literal\">True</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"literal\">False</span>, <span class=\"number\">1</span></span><br><span class=\"line\">                    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"literal\">True</span>, <span class=\"built_in\">min</span>(leftCost, rightCost)</span><br><span class=\"line\">                </span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp(<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(expression))[<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(N),<br />\n空间复杂度: O(N).</p>\n",
            "tags": [
                "Competitive Programming"
            ]
        },
        {
            "id": "https://youngforest.github.io/2021/06/13/LeetCode-weekly-contest-245/",
            "url": "https://youngforest.github.io/2021/06/13/LeetCode-weekly-contest-245/",
            "title": "LeetCode weekly contest 245",
            "date_published": "2021-06-13T16:28:42.000Z",
            "content_html": "<table>\n<thead>\n<tr>\n<th>Rank</th>\n<th>Name</th>\n<th>Score</th>\n<th>Finish Time</th>\n<th>Q1 (3)</th>\n<th>Q2 (5)</th>\n<th>Q3 (5)</th>\n<th>Q4 (6)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1904 / 12724</td>\n<td>YoungForest</td>\n<td>12</td>\n<td>1:39:20</td>\n<td>0:02:52</td>\n<td>1:24:20 🐞 3</td>\n<td>0:21:30</td>\n<td>null</td>\n</tr>\n</tbody>\n</table>\n<p>零神大数据：<br />\n1897,Redistribute Characters to Make All Strings Equal,redistribute-characters-to-make-all-strings-equal,1309.1422268153<br />\n1898,Maximum Number of Removable Characters,maximum-number-of-removable-characters,1912.8440554296<br />\n1899,Merge Triplets to Form Target Triplet,merge-triplets-to-form-target-triplet,1635.6879273926<br />\n1900,The Earliest and Latest Rounds Where Players Compete,the-earliest-and-latest-rounds-where-players-compete,2454.7653333657</p>\n<p>今天的周赛翻车了。第二题一开始算错时间复杂度了，一直妄图找到更优算法。之后看到80人提交才重新审视二分暴力的时间复杂度，竟然是没问题的。实现过程中又遇到1次WA（判断子序列时，相等字符忘记更新<code>s</code>的下标了），2次TLE（标记remove下标不能用<code>unordered_set</code>, 而要用<code>vector</code>。算是被卡常数了)。这周又要残酷打卡了，幸运的是，因为前2周的成绩比较好，本周残酷榜更新后我的排名不降反升。</p>\n<h2 id=\"1897-redistribute-characters-to-make-all-strings-equal\"><a class=\"markdownIt-Anchor\" href=\"#1897-redistribute-characters-to-make-all-strings-equal\"></a> 1897. Redistribute Characters to Make All Strings Equal</h2>\n<p>签到题。本质是判断所有的字符是否可以平均分配到n个单词中。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">makeEqual</span><span class=\"params\">(vector&lt;string&gt;&amp; words)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> n = words.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">cnt</span><span class=\"params\">(<span class=\"number\">26</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">const</span> <span class=\"keyword\">auto</span>&amp; word : words) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">char</span> c : word) &#123;</span><br><span class=\"line\">                ++cnt[c - <span class=\"string\">&#x27;a&#x27;</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i : cnt) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i % n != <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(sum(words[i].length)),<br />\n空间复杂度: O(1).</p>\n<h2 id=\"1898-maximum-number-of-removable-characters\"><a class=\"markdownIt-Anchor\" href=\"#1898-maximum-number-of-removable-characters\"></a> 1898. Maximum Number of Removable Characters</h2>\n<p>最优化问题转判定问题（双指针判断是否是子序列），二分搜索。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> ll = <span class=\"type\">int</span>;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">bool</span>&gt; mark = <span class=\"built_in\">vector</span>&lt;<span class=\"type\">bool</span>&gt;(<span class=\"number\">1e5</span>);</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">maximumRemovals</span><span class=\"params\">(string s, string p, vector&lt;<span class=\"type\">int</span>&gt;&amp; removable)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> n = removable.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> binary = [&amp;](ll lo, ll hi, function&lt;<span class=\"built_in\">bool</span>(<span class=\"type\">const</span> ll)&gt; predicate) -&gt; <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (lo &lt; hi) &#123;</span><br><span class=\"line\">                ll mid = lo + (hi - lo) / <span class=\"number\">2</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!<span class=\"built_in\">predicate</span>(mid)) &#123;</span><br><span class=\"line\">                    hi = mid;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    lo = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> lo;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"comment\">// cout &lt;&lt; s.size() &lt;&lt; endl;</span></span><br><span class=\"line\">        <span class=\"comment\">// cout &lt;&lt; n &lt;&lt; endl;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">binary</span>(<span class=\"number\">0</span>, n + <span class=\"number\">1</span>, [&amp;](<span class=\"type\">const</span> ll x) -&gt; <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; s.<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">                mark[i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; x; ++i) &#123;</span><br><span class=\"line\">                mark[removable[i]] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"type\">int</span> pi = <span class=\"number\">0</span>, si = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (pi &lt; p.<span class=\"built_in\">size</span>()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (si &lt; s.<span class=\"built_in\">size</span>() &amp;&amp; (mark[si] || s[si] != p[pi])) ++si;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (si == s.<span class=\"built_in\">size</span>()) </span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// cout &lt;&lt; x &lt;&lt; &quot;:false&quot;  &lt;&lt; endl;</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// if (s[si] != p[pi]) cout &lt;&lt; &quot;impossible&quot; &lt;&lt; endl;</span></span><br><span class=\"line\">                ++si;</span><br><span class=\"line\">                ++pi;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// cout &lt;&lt; x &lt;&lt; &quot;:true &quot;&lt;&lt; si   &lt;&lt; endl;</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;) - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(log removable.length * (s.length + p.length)),<br />\n空间复杂度: O(s.length).</p>\n<p>本题有个坑是说，标记<code>s</code>中哪些位置被标记时，不能用<code>unordered_set</code>（即使加<code>reserve</code>)，会超时。可以用<code>vector&lt;bool&gt;</code>。算是被卡常数了。</p>\n<h2 id=\"1899-merge-triplets-to-form-target-triplet\"><a class=\"markdownIt-Anchor\" href=\"#1899-merge-triplets-to-form-target-triplet\"></a> 1899. Merge Triplets to Form Target Triplet</h2>\n<p>因为每次合并操作是去最大值，因此，只要有一个数大于<code>target</code>的<code>triplet</code>不能用。<br />\n所以把剩下可以用的都合并了，看能不能达到<code>target</code>。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">mergeTriplets</span><span class=\"params\">(vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt;&amp; triplets, vector&lt;<span class=\"type\">int</span>&gt;&amp; target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">cnt</span><span class=\"params\">(<span class=\"number\">3</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">const</span> <span class=\"keyword\">auto</span>&amp; v : triplets) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (v[i] == target[i] &amp;&amp; v[(i + <span class=\"number\">1</span>) % <span class=\"number\">3</span>] &lt;= target[(i + <span class=\"number\">1</span>) % <span class=\"number\">3</span>] &amp;&amp; v[(i + <span class=\"number\">2</span>) % <span class=\"number\">3</span>] &lt;= target[(i + <span class=\"number\">2</span>) % <span class=\"number\">3</span>]) &#123;</span><br><span class=\"line\">                    ++cnt[i];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cnt[i] == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(triplets.length),<br />\n空间复杂度: O(1).</p>\n<h2 id=\"1900-the-earliest-and-latest-rounds-where-players-compete\"><a class=\"markdownIt-Anchor\" href=\"#1900-the-earliest-and-latest-rounds-where-players-compete\"></a> 1900. The Earliest and Latest Rounds Where Players Compete</h2>\n<p>TNL~</p>\n",
            "tags": [
                "Competitive Programming"
            ]
        },
        {
            "id": "https://youngforest.github.io/2021/06/06/LeetCode-weekly-contest-244/",
            "url": "https://youngforest.github.io/2021/06/06/LeetCode-weekly-contest-244/",
            "title": "LeetCode weekly contest 244",
            "date_published": "2021-06-06T14:37:26.000Z",
            "content_html": "<table>\n<thead>\n<tr>\n<th>Rank</th>\n<th>Name</th>\n<th>Score</th>\n<th>Finish Time</th>\n<th>Q1 (3)</th>\n<th>Q2 (5)</th>\n<th>Q3 (5)</th>\n<th>Q4 (6)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>142 / 14467</td>\n<td>YoungForest</td>\n<td>18</td>\n<td>0:51:13</td>\n<td>0:05:21</td>\n<td>0:09:54</td>\n<td>0:30:19</td>\n<td>0:46:13 🐞1</td>\n</tr>\n</tbody>\n</table>\n<p>下午约了 <a href=\"http://leetcode.com/ddoudle\">残酷东神</a> 吃饭，一个rating 2700+的大佬。他本科浙大，在加拿大读研。这个暑假来北京旷视实习。因此我们有机会线下面基。</p>\n<span id=\"more\"></span>\n<h2 id=\"1886-determine-whether-matrix-can-be-obtained-by-rotation\"><a class=\"markdownIt-Anchor\" href=\"#1886-determine-whether-matrix-can-be-obtained-by-rotation\"></a> 1886. Determine Whether Matrix Can Be Obtained By Rotation</h2>\n<p>签到题。旋转3次 加上 原始 共4种状态，分别比较。旋转的话就是另外的一个LeetCode经典题目了，in-place还是实现起来比较复杂的。但因为n比较小，而且是签到题，我直接用了辅助数组。虽然时间复杂度上去了，但实现起来简单多了。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt;&amp; mat)</span> </span>&#123;</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; cp = mat;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> n = mat.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j) &#123;</span><br><span class=\"line\">                cp[j][n<span class=\"number\">-1</span>-i] = mat[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mat = <span class=\"built_in\">move</span>(cp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">findRotation</span><span class=\"params\">(vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt;&amp; mat, vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt;&amp; target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mat == target) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; ++i) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">rotate</span>(mat);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mat == target) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(4 * n * n),<br />\n空间复杂度: O(n * n).</p>\n<h2 id=\"1887-reduction-operations-to-make-the-array-elements-equal\"><a class=\"markdownIt-Anchor\" href=\"#1887-reduction-operations-to-make-the-array-elements-equal\"></a> 1887. Reduction Operations to Make the Array Elements Equal</h2>\n<p>理解整个减小的过程可以发现，每个数减到最小的操作数目其实等于小于他的元素（去除重复元素）的数目。<br />\n因此，先排序，再One pass 统计“小于他的元素”数目之和。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">reductionOperations</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> n = nums.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(nums.<span class=\"built_in\">begin</span>(), nums.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> add = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] &gt; nums[i<span class=\"number\">-1</span>]) &#123;</span><br><span class=\"line\">                ++add;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ans += add;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(N log N),<br />\n空间复杂度: O(1).</p>\n<h2 id=\"1888-minimum-number-of-flips-to-make-the-binary-string-alternating\"><a class=\"markdownIt-Anchor\" href=\"#1888-minimum-number-of-flips-to-make-the-binary-string-alternating\"></a> 1888. Minimum Number of Flips to Make the Binary String Alternating</h2>\n<p>观察有：<br />\n操作1的数目不限。也就是说 我们可以遍历所有位置，假设它是开头，枚举开头分别是0/1的2种情况，然后统计之后和之前的不符合预期的数量。<br />\n统计“之前和之后不符合预期的数量” 这个操作可以通过维护之前/之后 奇偶位置 0/1 的数量 O(1)实现。</p>\n<p>因为奇偶问题，“之前不符合预期的数量”需要分开讨论。<br />\n发现在偶数长度下，开头位置其实是无所谓的。这时可以进一步简化问题。<br />\n奇数长度下，还是需要枚举每个开头位置才行。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">minFlips</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> n = s.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n % <span class=\"number\">2</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">cnt</span><span class=\"params\">(<span class=\"number\">2</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">                cnt[i % <span class=\"number\">2</span>] += (s[i] - <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"type\">const</span> <span class=\"type\">int</span> half = n / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">min</span>(half - cnt[<span class=\"number\">0</span>] + cnt[<span class=\"number\">1</span>], cnt[<span class=\"number\">0</span>] + half - cnt[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            vector&lt;<span class=\"type\">int</span>&gt; <span class=\"built_in\">after</span>(<span class=\"number\">2</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">                after[i % <span class=\"number\">2</span>] += (s[i] - <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">before</span><span class=\"params\">(<span class=\"number\">2</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> ans = numeric_limits&lt;<span class=\"type\">int</span>&gt;::<span class=\"built_in\">max</span>();</span><br><span class=\"line\">            <span class=\"type\">const</span> <span class=\"type\">int</span> half = n / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">                <span class=\"type\">const</span> <span class=\"type\">int</span> now = i % <span class=\"number\">2</span>;</span><br><span class=\"line\">                ans = <span class=\"built_in\">min</span>(ans, half + <span class=\"number\">1</span> - after[now] - before[<span class=\"number\">1</span>-now] + after[<span class=\"number\">1</span>-now] + before[now]); <span class=\"comment\">// 1 begin</span></span><br><span class=\"line\">                ans = <span class=\"built_in\">min</span>(ans, after[now] + before[<span class=\"number\">1</span>-now] + half - after[<span class=\"number\">1</span>-now] - before[now]); <span class=\"comment\">// 0 begin</span></span><br><span class=\"line\">                after[i % <span class=\"number\">2</span>] -= (s[i] - <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">                before[i % <span class=\"number\">2</span>] += (s[i] - <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(N),<br />\n空间复杂度: O(1).</p>\n<h2 id=\"1889-minimum-space-wasted-from-packaging\"><a class=\"markdownIt-Anchor\" href=\"#1889-minimum-space-wasted-from-packaging\"></a> 1889. Minimum Space Wasted From Packaging</h2>\n<p>本题的暴力解法很容易想：<br />\n遍历所有的<code>boxes</code>； 对于每一个供应商，再遍历所有的包裹；对于每一个包裹，找到仅大于它的盒子做包装。时间复杂度为：O(m * n * log m). 显然会TLE。</p>\n<p>题目中给了数据范围，其中一个值得我们特别关注: <code>sum(boxes[j].length) &lt;= 10^5</code>。<br />\n也就是说，我们完全可以枚举每一个盒子，找到用它的包裹（可以通过二分搜索，找到它能装的最大包裹的位置。除了比它小的盒子装的，剩下就是它装的。）。然后通过前缀和快速计算空余空间。<br />\n时间复杂度为：`O(sum(boxes[j].length) * log n + n log n)，恰好符合要求。</p>\n<p>因为最大空余空间是<code>max(boxes[i][j]) * packges.length = 10 ^ 10</code>, 因此<code>int</code>会溢出，需要使用<code>long long</code>.</p>\n<p>最后，千万不要忘记MOD。我因此WA一次。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\">    <span class=\"type\">const</span> ll MOD = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">minWastedSpace</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; packages, vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt;&amp; boxes)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(packages.<span class=\"built_in\">begin</span>(), packages.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> n = packages.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"function\">vector&lt;ll&gt; <span class=\"title\">presum</span><span class=\"params\">(n+<span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">        presum[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            presum[i+<span class=\"number\">1</span>] = presum[i] + packages[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ll ans = numeric_limits&lt;ll&gt;::<span class=\"built_in\">max</span>();</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> m = boxes.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span>&amp; b : boxes) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">sort</span>(b.<span class=\"built_in\">begin</span>(), b.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">            <span class=\"type\">int</span> lastIdx = <span class=\"number\">0</span>;</span><br><span class=\"line\">            ll current = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j : b) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">auto</span> it = <span class=\"built_in\">upper_bound</span>(packages.<span class=\"built_in\">begin</span>(), packages.<span class=\"built_in\">end</span>(), j);</span><br><span class=\"line\">                <span class=\"type\">const</span> ll d = <span class=\"built_in\">distance</span>(packages.<span class=\"built_in\">begin</span>(), it);</span><br><span class=\"line\">                <span class=\"type\">const</span> ll width = d - lastIdx;</span><br><span class=\"line\">                current += width * j - (presum[d] - presum[lastIdx]);</span><br><span class=\"line\">                lastIdx = d;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (b.<span class=\"built_in\">back</span>() &lt; packages.<span class=\"built_in\">back</span>()) &#123; <span class=\"comment\">// can not fit</span></span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                ans = <span class=\"built_in\">min</span>(ans, current);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ans == numeric_limits&lt;ll&gt;::<span class=\"built_in\">max</span>()) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> ans % MOD;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(sum(boxes[j].length) * log n + n log n),<br />\n空间复杂度: O(n).</p>\n",
            "tags": [
                "Competitive Programming"
            ]
        },
        {
            "id": "https://youngforest.github.io/2021/05/30/LeetCode-weekly-contest-243/",
            "url": "https://youngforest.github.io/2021/05/30/LeetCode-weekly-contest-243/",
            "title": "LeetCode weekly contest 243",
            "date_published": "2021-05-30T16:22:10.000Z",
            "content_html": "<table>\n<thead>\n<tr>\n<th>Rank</th>\n<th>Name</th>\n<th>Score</th>\n<th>Finish Time</th>\n<th>Q1 (3)</th>\n<th>Q2 (5)</th>\n<th>Q3 (5)</th>\n<th>Q4 (6)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>95 / 12835</td>\n<td>YoungForest</td>\n<td>18</td>\n<td>1:19:18</td>\n<td>0:02:50</td>\n<td>0:11:21</td>\n<td>0:36:27  🐞1</td>\n<td>1:04:18 🐞2</td>\n</tr>\n</tbody>\n</table>\n<p>零神大数据：<br />\n1880,Check if Word Equals Summation of Two Words,check-if-word-equals-summation-of-two-words,1187.1641565458<br />\n1881,Maximum Value after Insertion,maximum-value-after-insertion,1381.2168789318<br />\n1882,Process Tasks Using Servers,process-tasks-using-servers,1979.1112273597<br />\n1883,Minimum Skips to Arrive at Meeting On Time,minimum-skips-to-arrive-at-meeting-on-time,2587.8725248485</p>\n<span id=\"more\"></span>\n<h2 id=\"1880-check-if-word-equals-summation-of-two-words\"><a class=\"markdownIt-Anchor\" href=\"#1880-check-if-word-equals-summation-of-two-words\"></a> 1880. Check if Word Equals Summation of Two Words</h2>\n<p>签到题。按题目要求转换字符串到数字，再进行判断。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">isSumEqual</span>(<span class=\"params\">self, firstWord: <span class=\"built_in\">str</span>, secondWord: <span class=\"built_in\">str</span>, targetWord: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">toDigit</span>(<span class=\"params\">w</span>):</span><br><span class=\"line\">            ans = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> w:</span><br><span class=\"line\">                ans = ans * <span class=\"number\">10</span> + <span class=\"built_in\">ord</span>(i) - <span class=\"built_in\">ord</span>(<span class=\"string\">&#x27;a&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ans</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> toDigit(firstWord) + toDigit(secondWord) == toDigit(targetWord)</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(N),<br />\n空间复杂度: O(N).</p>\n<h2 id=\"1881-maximum-value-after-insertion\"><a class=\"markdownIt-Anchor\" href=\"#1881-maximum-value-after-insertion\"></a> 1881. Maximum Value after Insertion</h2>\n<p>贪心。正数时插入到第一个比x小的数，负数时插入到第一个比x大的数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">maxValue</span>(<span class=\"params\">self, n: <span class=\"built_in\">str</span>, x: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">        <span class=\"comment\"># insert into the position where the first digit &lt; x</span></span><br><span class=\"line\">        <span class=\"comment\"># negative first &gt; x</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> n[<span class=\"number\">0</span>] == <span class=\"string\">&#x27;-&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(n)):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"built_in\">ord</span>(n[i]) - <span class=\"built_in\">ord</span>(<span class=\"string\">&#x27;0&#x27;</span>) &gt; x:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> n[:i] + <span class=\"built_in\">str</span>(x) + n[i:]</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n + <span class=\"built_in\">str</span>(x)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(n)):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"built_in\">ord</span>(n[i]) - <span class=\"built_in\">ord</span>(<span class=\"string\">&#x27;0&#x27;</span>) &lt; x:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> n[:i] + <span class=\"built_in\">str</span>(x) + n[i:]</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n + <span class=\"built_in\">str</span>(x)</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(N),<br />\n空间复杂度: O(N).</p>\n<h2 id=\"1882-process-tasks-using-servers\"><a class=\"markdownIt-Anchor\" href=\"#1882-process-tasks-using-servers\"></a> 1882. Process Tasks Using Servers</h2>\n<p>直接暴力模拟即可。使用优先队列维护空闲服务器，等待任务和释放时间。<br />\n模拟时需要注意时间不能1单位1单位地进行，而是只进行那些有事件发生的时刻。<br />\n即任务开始等待，服务器释放。<br />\n需要注意时间的大小可能会超过<code>int</code>, 用<code>long long</code>更保险些。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> pii = pair&lt;ll, ll&gt;;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">assignTasks</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; servers, vector&lt;<span class=\"type\">int</span>&gt;&amp; tasks)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// brute-force: (m + n) * log n</span></span><br><span class=\"line\">        priority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;&gt;&gt; freeServers, releaseTime;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; servers.<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">            freeServers.<span class=\"built_in\">emplace</span>(servers[i], i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        priority_queue&lt;<span class=\"type\">int</span>, vector&lt;<span class=\"type\">int</span>&gt;, greater&lt;&gt;&gt; waitTasks;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> m = tasks.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">ans</span><span class=\"params\">(m)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i) &#123;</span><br><span class=\"line\">            waitTasks.<span class=\"built_in\">push</span>(i);</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!releaseTime.<span class=\"built_in\">empty</span>() &amp;&amp; releaseTime.<span class=\"built_in\">top</span>().first &lt;= i) &#123;</span><br><span class=\"line\">                <span class=\"type\">const</span> <span class=\"type\">int</span> idx = releaseTime.<span class=\"built_in\">top</span>().second;</span><br><span class=\"line\">                freeServers.<span class=\"built_in\">emplace</span>(servers[idx], idx);</span><br><span class=\"line\">                releaseTime.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!freeServers.<span class=\"built_in\">empty</span>() &amp;&amp; !waitTasks.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">                <span class=\"type\">const</span> <span class=\"type\">int</span> idx = waitTasks.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                waitTasks.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                <span class=\"keyword\">auto</span> [weight, serverIdx] = freeServers.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                freeServers.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                ans[idx] = serverIdx;</span><br><span class=\"line\">                releaseTime.<span class=\"built_in\">emplace</span>(i + tasks[idx], serverIdx);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ll current = m - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!releaseTime.<span class=\"built_in\">empty</span>() &amp;&amp; !waitTasks.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">            <span class=\"type\">const</span> <span class=\"type\">int</span> idx = releaseTime.<span class=\"built_in\">top</span>().second;</span><br><span class=\"line\">            current = releaseTime.<span class=\"built_in\">top</span>().first;</span><br><span class=\"line\">            freeServers.<span class=\"built_in\">emplace</span>(servers[idx], idx);</span><br><span class=\"line\">            releaseTime.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!releaseTime.<span class=\"built_in\">empty</span>() &amp;&amp; releaseTime.<span class=\"built_in\">top</span>().first &lt;= current) &#123;</span><br><span class=\"line\">                <span class=\"type\">const</span> <span class=\"type\">int</span> idx = releaseTime.<span class=\"built_in\">top</span>().second;</span><br><span class=\"line\">                current = releaseTime.<span class=\"built_in\">top</span>().first;</span><br><span class=\"line\">                freeServers.<span class=\"built_in\">emplace</span>(servers[idx], idx);</span><br><span class=\"line\">                releaseTime.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!freeServers.<span class=\"built_in\">empty</span>() &amp;&amp; !waitTasks.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">                <span class=\"type\">const</span> <span class=\"type\">int</span> idx = waitTasks.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                waitTasks.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                <span class=\"keyword\">auto</span> [weight, serverIdx] = freeServers.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">                freeServers.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                ans[idx] = serverIdx;</span><br><span class=\"line\">                releaseTime.<span class=\"built_in\">emplace</span>(current + tasks[idx], serverIdx);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O((m + n) * log n),<br />\n空间复杂度: O(m + n).</p>\n<h2 id=\"1883-minimum-skips-to-arrive-at-meeting-on-time\"><a class=\"markdownIt-Anchor\" href=\"#1883-minimum-skips-to-arrive-at-meeting-on-time\"></a> 1883. Minimum Skips to Arrive at Meeting On Time</h2>\n<p>动态规划。<br />\ndp(i, k)表示，从dist0到i（inclusive），k次休息，结束的最早时间。<br />\n状态转移方程为<br />\ndp(i, k) = min(<br />\ndp(i-1, k) + … 最后一站不休息<br />\ndp(i-1, k-1) + … 最后一站休息<br />\n)，<br />\n然后使用二分搜索找到最小的k使得 dp(n-1, k) &lt;= hoursBefore.<br />\n（其实不用二分也行，从小到大遍历寻找也行。因为时间复杂度瓶颈不在这里，而在计算dp那里）。</p>\n<p>最近经常遇到动态规划的题目，之前在找状态转移方程时，时间复杂度总是超。试图利用枚举最后一个休息位置发生在何处。正确的做法应该是，只枚举最后一站是否休息。可以将时间复杂度降一个n.</p>\n<p>本题有个坑是浮点数精度，我因此WA了2次。<br />\n解决方法有二:</p>\n<ol>\n<li>增加err, 我这里用了10^-9, 在大多数情况下都是够了。</li>\n<li>转换成整型。可能需要用<code>long long</code>。在本题中就是把所有的 时间 * speed 用来表示距离，这种解决方案不存在精度丢失。</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">minSkips</span>(<span class=\"params\">self, dist: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], speed: <span class=\"built_in\">int</span>, hoursBefore: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        n = <span class=\"built_in\">len</span>(dist)</span><br><span class=\"line\">        err = <span class=\"number\">10</span>**-<span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"meta\">        @cache</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">dp</span>(<span class=\"params\">i, k</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i == <span class=\"number\">0</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> dist[<span class=\"number\">0</span>] / speed</span><br><span class=\"line\">            <span class=\"keyword\">if</span> k == <span class=\"number\">0</span>:</span><br><span class=\"line\">                <span class=\"comment\"># no relax</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> ceil(dp(i-<span class=\"number\">1</span>, <span class=\"number\">0</span>) - err) + dist[i] / speed</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i == k:</span><br><span class=\"line\">                <span class=\"comment\"># relax all</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> dp(i-<span class=\"number\">1</span>, k-<span class=\"number\">1</span>) + dist[i] / speed</span><br><span class=\"line\">            <span class=\"comment\"># not relax + relax</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">min</span>(ceil(dp(i-<span class=\"number\">1</span>, k) - err) + dist[i] / speed, dp(i-<span class=\"number\">1</span>, k-<span class=\"number\">1</span>) + dist[i] / speed)</span><br><span class=\"line\">                       </span><br><span class=\"line\">        lo = <span class=\"number\">0</span></span><br><span class=\"line\">        hi = n</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> dp(n-<span class=\"number\">1</span>, n-<span class=\"number\">1</span>) &gt; hoursBefore + err: <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span> lo &lt; hi:</span><br><span class=\"line\">            mid = lo + (hi - lo) // <span class=\"number\">2</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> dp(n-<span class=\"number\">1</span>, mid) &lt;= hoursBefore + err: <span class=\"comment\"># -err?</span></span><br><span class=\"line\">                hi = mid</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                lo = mid + <span class=\"number\">1</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> lo == n: <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>: <span class=\"keyword\">return</span> lo</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(n ^ 2),<br />\n空间复杂度: O(m ^ 2).</p>\n",
            "tags": [
                "Competitive Programming"
            ]
        },
        {
            "id": "https://youngforest.github.io/2021/05/30/LeetCode-biweekly-contest-53/",
            "url": "https://youngforest.github.io/2021/05/30/LeetCode-biweekly-contest-53/",
            "title": "LeetCode biweekly contest 53",
            "date_published": "2021-05-30T10:44:44.000Z",
            "content_html": "<table>\n<thead>\n<tr>\n<th>Rank</th>\n<th>Name</th>\n<th>Score</th>\n<th>Finish Time</th>\n<th>Q1 (3)</th>\n<th>Q2 (5)</th>\n<th>Q3 (5)</th>\n<th>Q4 (6)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>219 / 12291</td>\n<td>YoungForest</td>\n<td>18</td>\n<td>0:57:45</td>\n<td>0:19:12</td>\n<td>0:22:21</td>\n<td>0:46:08</td>\n<td>0:57:45</td>\n</tr>\n</tbody>\n</table>\n<p>因为今天陪npy去参加斯巴达比赛，早上不到6点就起了，在外奔波了一天。<br />\n比赛前想着休息一下子，就打算睡20min。没想到太累了，闹铃响了自己给关了。因此迟到了10+min，否则我排名还可以更高些。题目不难，也不简单，属于出的比较好的。</p>\n<p>零神大数据<br />\n1876,Substrings of Size Three with Distinct Characters,substrings-of-size-three-with-distinct-characters,1248.7224675206<br />\n1877,Minimize Maximum Pair Sum in Array,minimize-maximum-pair-sum-in-array,1301.3817574010<br />\n1878,Get Biggest Three Rhombus Sums in a Grid,get-biggest-three-rhombus-sums-in-a-grid,1897.5516652727<br />\n1879,Minimum XOR Sum of Two Arrays,minimum-xor-sum-of-two-arrays,2145.1839952670</p>\n<span id=\"more\"></span>\n<h2 id=\"1876-substrings-of-size-three-with-distinct-characters\"><a class=\"markdownIt-Anchor\" href=\"#1876-substrings-of-size-three-with-distinct-characters\"></a> 1876. Substrings of Size Three with Distinct Characters</h2>\n<p>签到题。因为子字符串长度是确定长度（3）。因此可以用一个滑动窗口枚举所有的长度为3的子串，判断是否每个字符都只出现一次。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">countGoodSubstrings</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> n = s.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">cnt</span><span class=\"params\">(<span class=\"number\">26</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> ok = [&amp;]() -&gt; <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i : cnt) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">3</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        ++cnt[s[<span class=\"number\">0</span>] - <span class=\"string\">&#x27;a&#x27;</span>];</span><br><span class=\"line\">        ++cnt[s[<span class=\"number\">1</span>] - <span class=\"string\">&#x27;a&#x27;</span>];</span><br><span class=\"line\">        ++cnt[s[<span class=\"number\">2</span>] - <span class=\"string\">&#x27;a&#x27;</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">ok</span>()) ++ans;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">3</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            ++cnt[s[i] - <span class=\"string\">&#x27;a&#x27;</span>];</span><br><span class=\"line\">            --cnt[s[i - <span class=\"number\">3</span>] - <span class=\"string\">&#x27;a&#x27;</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">ok</span>()) ++ans;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(n),<br />\n空间复杂度: O(1).</p>\n<h2 id=\"1877-minimize-maximum-pair-sum-in-array\"><a class=\"markdownIt-Anchor\" href=\"#1877-minimize-maximum-pair-sum-in-array\"></a> 1877. Minimize Maximum Pair Sum in Array</h2>\n<p>贪心，让大的和小的组合。<br />\n可以让最大和最小，同时让最小和最大。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">minPairSum</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// greedy: match largest and smallest</span></span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(nums.<span class=\"built_in\">begin</span>(), nums.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> n = nums.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> l = <span class=\"number\">0</span>, r = n - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l &lt; r) &#123;</span><br><span class=\"line\">            ans = <span class=\"built_in\">max</span>(ans, nums[l++] + nums[r--]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(N log N),<br />\n空间复杂度: O(1).</p>\n<h2 id=\"1878-get-biggest-three-rhombus-sums-in-a-grid\"><a class=\"markdownIt-Anchor\" href=\"#1878-get-biggest-three-rhombus-sums-in-a-grid\"></a> 1878. Get Biggest Three Rhombus Sums in a Grid</h2>\n<p>枚举所有的菱形，然后维护最大的3个菱形和即可。<br />\n我的枚举方式是，枚举菱形的中心和4个顶点到中心的距离。<br />\n计算菱形和可以通过前缀和presum O(1)计算。因此总的时间复杂度是 O(N^3). N最大值是100，恰好满足条件。</p>\n<p>后来发现LeetCode把题目的数据范围从100改到了50.之前听说比赛时有人用N^4的暴力方法过了，我以为会赛后rejudge 的，没想到人家直接改体面。让所有人都过了。可能是懒得rejudge了，还得加数据量大的case。改数据范围多省事儿。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">getBiggestThree</span><span class=\"params\">(vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// x := Rhombus number: m * n * m</span></span><br><span class=\"line\">        <span class=\"comment\">// time: x log x</span></span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> m = grid.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> n = grid[<span class=\"number\">0</span>].<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        </span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">presum</span>(m + <span class=\"number\">1</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(n + <span class=\"number\">1</span>, <span class=\"number\">0</span>));</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">presum2</span>(m + <span class=\"number\">1</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(n + <span class=\"number\">1</span>, <span class=\"number\">0</span>));</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j) &#123;</span><br><span class=\"line\">                presum[i+<span class=\"number\">1</span>][j+<span class=\"number\">1</span>] = presum[i][j] + grid[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j) &#123;</span><br><span class=\"line\">                presum2[i+<span class=\"number\">1</span>][j] = presum2[i][j+<span class=\"number\">1</span>] + grid[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        set&lt;<span class=\"type\">int</span>&gt; s;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j) &#123;</span><br><span class=\"line\">                s.<span class=\"built_in\">insert</span>(grid[i][j]);</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> len = <span class=\"number\">1</span>; i - len &gt;= <span class=\"number\">0</span> &amp;&amp; j - len &gt;= <span class=\"number\">0</span> &amp;&amp; i + len &lt; m &amp;&amp; j + len &lt; n; ++len) &#123;</span><br><span class=\"line\">                    <span class=\"type\">const</span> <span class=\"type\">int</span> rhombus = presum[i+<span class=\"number\">1</span>][j+len+<span class=\"number\">1</span>] - presum[i-len][j]</span><br><span class=\"line\">                        + presum[i+len+<span class=\"number\">1</span>][j+<span class=\"number\">1</span>] - presum[i][j-len]</span><br><span class=\"line\">                        + presum2[i+len+<span class=\"number\">1</span>][j] - presum2[i][j+len+<span class=\"number\">1</span>]</span><br><span class=\"line\">                        + presum2[i+<span class=\"number\">1</span>][j-len] - presum2[i-len][j+<span class=\"number\">1</span>]</span><br><span class=\"line\">                        - grid[i-len][j] - grid[i][j+len] - grid[i][j-len] - grid[i+len][j];</span><br><span class=\"line\">                    s.<span class=\"built_in\">insert</span>(rhombus);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        vector&lt;<span class=\"type\">int</span>&gt; ans;</span><br><span class=\"line\">        <span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> it = s.<span class=\"built_in\">rbegin</span>(); it != s.<span class=\"built_in\">rend</span>() &amp;&amp; i &lt; <span class=\"number\">3</span>; ++it, ++i) &#123;</span><br><span class=\"line\">            ans.<span class=\"built_in\">push_back</span>(*it);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>菱形数目<code>x = m * n * min(m,n)</code>,<br />\n时间复杂度: O(x log x),<br />\n空间复杂度: O(x + m * n)。因为只需要维护最大的3个菱形和，可优化到 -&gt; O(m*n).</p>\n<h2 id=\"1879-minimum-xor-sum-of-two-arrays\"><a class=\"markdownIt-Anchor\" href=\"#1879-minimum-xor-sum-of-two-arrays\"></a> 1879. Minimum XOR Sum of Two Arrays</h2>\n<p>经典 DP + Bitmask.</p>\n<p>一开始想到暴力的枚举所有排列，时间复杂度是 排列数 n! = 14!。一定会超时。<br />\n根据数据规模<code>n = 14</code>可以推测 需要使用bitmask.</p>\n<p>定义dp(i, mask) 表示 nums1[i:] 和 nums2 中的子集mask 的最小异或和。<br />\n状态转移方程为：暴力尝试 nums[i]与mask中每一个可以的取值进行组合，取最小的。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">minimumXORSum</span>(<span class=\"params\">self, nums1: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], nums2: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        <span class=\"comment\"># time: n * n * 2 ^ n</span></span><br><span class=\"line\">        n = <span class=\"built_in\">len</span>(nums2)</span><br><span class=\"line\"><span class=\"meta\">        @cache</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">dp</span>(<span class=\"params\">i, mask</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i &gt;= <span class=\"built_in\">len</span>(nums1): <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">            ans = <span class=\"built_in\">float</span>(<span class=\"string\">&#x27;inf&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((<span class=\"number\">1</span> &lt;&lt; j) &amp; mask) == <span class=\"number\">0</span>: <span class=\"keyword\">continue</span></span><br><span class=\"line\">                ans = <span class=\"built_in\">min</span>(ans, (nums1[i] ^ nums2[j]) + dp(i+<span class=\"number\">1</span>, mask ^ (<span class=\"number\">1</span> &lt;&lt; j)))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ans</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp(<span class=\"number\">0</span>, (<span class=\"number\">1</span> &lt;&lt; n) - <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(n * n * 2 ^ n)  = 14 * 14 * 2^14 = 3211264,<br />\n空间复杂度: O(n * 2^ n).</p>\n",
            "tags": [
                "Competitive Programming"
            ]
        },
        {
            "id": "https://youngforest.github.io/2021/05/23/LeetCode-weekly-contest-242/",
            "url": "https://youngforest.github.io/2021/05/23/LeetCode-weekly-contest-242/",
            "title": "LeetCode weekly contest 242",
            "date_published": "2021-05-23T09:30:24.000Z",
            "content_html": "<table>\n<thead>\n<tr>\n<th>Rank</th>\n<th>Name</th>\n<th>Score</th>\n<th>Finish Time</th>\n<th>Q1 (3)</th>\n<th>Q2 (5)</th>\n<th>Q3 (5)</th>\n<th>Q4 (6)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>165 / 12400</td>\n<td>YoungForest</td>\n<td>18</td>\n<td>1:07:14</td>\n<td>0:03:22 🐞1</td>\n<td>0:16:01 🐞1</td>\n<td>0:27:41  🐞1</td>\n<td>0:52:14</td>\n</tr>\n</tbody>\n</table>\n<p>提前40min AK。虽然因为粗心大意，前三题每题WA一次，导致15min罚时，但好的一点是这周应该不用每天残酷打卡了。正好全力以赴，准备周三的硕士论文答辩。<br />\n三年的硕士生涯全靠周三一天了，毕其功于一役，加油，Forest！</p>\n<h2 id=\"1869-longer-contiguous-segments-of-ones-than-zeros\"><a class=\"markdownIt-Anchor\" href=\"#1869-longer-contiguous-segments-of-ones-than-zeros\"></a> 1869. Longer Contiguous Segments of Ones than Zeros</h2>\n<p>签到题。统计连续字串的长度，更新最长长度即可。</p>\n<p>因为更新最长长度的代码写错位置，写到了if的分支里，WA了一次。应该无论如何都要更新，所以要写在外面。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">checkZeroOnes</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">longest</span><span class=\"params\">(<span class=\"number\">2</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> length = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">char</span> last = <span class=\"string\">&#x27;2&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">char</span> c : s) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c != last) &#123;</span><br><span class=\"line\">                last = c;</span><br><span class=\"line\">                length = <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                ++length;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            longest[c - <span class=\"string\">&#x27;0&#x27;</span>] = <span class=\"built_in\">max</span>(longest[c - <span class=\"string\">&#x27;0&#x27;</span>], length);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> longest[<span class=\"number\">1</span>] &gt; longest[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(N),<br />\n空间复杂度: O(1).</p>\n<h2 id=\"1870-minimum-speed-to-arrive-on-time\"><a class=\"markdownIt-Anchor\" href=\"#1870-minimum-speed-to-arrive-on-time\"></a> 1870. Minimum Speed to Arrive on Time</h2>\n<p>直接暴力二分怼。之前总结的binary search模版很好用。基本只需要改几行代码就行了。</p>\n<p>因为浮点数精度WA了一次。<code>10^-5</code> 不够小，建议以后都用<code>10^-9</code>。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> ll = <span class=\"type\">int</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">minSpeedOnTime</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; dist, <span class=\"type\">double</span> hour)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> lo = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> hi = <span class=\"number\">1e7</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">// f f f t t t</span></span><br><span class=\"line\">        <span class=\"keyword\">auto</span> binary = [&amp;](ll lo, ll hi, function&lt;<span class=\"built_in\">bool</span>(<span class=\"type\">const</span> ll)&gt; predicate) -&gt; <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// return first true</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (lo &lt; hi) &#123;</span><br><span class=\"line\">                ll mid = lo + (hi - lo) / <span class=\"number\">2</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">predicate</span>(mid)) &#123;</span><br><span class=\"line\">                    hi = mid;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    lo = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> lo;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> pred = [&amp;](<span class=\"type\">const</span> ll x) -&gt; <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">double</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> i;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i + <span class=\"number\">1</span> &lt; dist.<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">                ans += (dist[i] + x - <span class=\"number\">1</span>) / x;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ans += dist[i] / <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">double</span>&gt;(x);</span><br><span class=\"line\">            <span class=\"comment\">// cout &lt;&lt; x &lt;&lt; &quot; &quot; &lt;&lt; ans &lt;&lt; endl;</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> ans &lt;= hour + <span class=\"number\">1e-9</span>;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        ll ans = <span class=\"built_in\">binary</span>(lo, hi, pred);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ans &gt;= hi) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(log dist[i] * dist.length) = log 10^5 * 10^5,<br />\n空间复杂度: O(1).</p>\n<h2 id=\"1871-jump-game-vii\"><a class=\"markdownIt-Anchor\" href=\"#1871-jump-game-vii\"></a> 1871. Jump Game VII</h2>\n<p>很容易想到暴力的N^2解法。<br />\n从头开始遍历，如果是0的话，更新之后所有可以到达的位置。<br />\n时间复杂度为: s.length * (maxJump - minJump) = 10% * 10^5.</p>\n<p>优化的方向是“更新之后所有可以到达的位置”。显然，这步更新因为有很多重复的更新，因此花费很多。但是，我们考虑每次其实是更新一个区间（range），而且区间的大小相等，而且区间总是向右移动的。因此，我们发现，更新区间并不需要遍历minJump…maxJump，只需要从maxJump向前开始遍历，如果和之前已经更新过的区间重合了，就直接break结束更新就好了。因为每个位置最多被更新一次，因此时间复杂度是 s.length.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">canReach</span><span class=\"params\">(string s, <span class=\"type\">int</span> minJump, <span class=\"type\">int</span> maxJump)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// brute-force: s.length * (maxJump - minJump) = 10^5 * 10^5</span></span><br><span class=\"line\">        <span class=\"comment\">// better: s.length * 1</span></span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> n = s.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">bool</span>&gt; <span class=\"title\">reachable</span><span class=\"params\">(n, <span class=\"literal\">false</span>)</span></span>;</span><br><span class=\"line\">        reachable[<span class=\"number\">0</span>] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"comment\">// &lt;= reach</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">&#x27;0&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (reachable[i]) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"built_in\">min</span>(maxJump, n - <span class=\"number\">1</span> - i); j &gt;= minJump; --j) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (reachable[i + j]) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        reachable[i + j] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s[n<span class=\"number\">-1</span>] == <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; reachable[n - <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(s.length),<br />\n空间复杂度: O(s.length).</p>\n<h2 id=\"1872-stone-game-viii\"><a class=\"markdownIt-Anchor\" href=\"#1872-stone-game-viii\"></a> 1872. Stone Game VIII</h2>\n<p>类似之前的Stone Game，这种最优玩法的题目大多数属于 动态规划问题。<br />\n即通过搜索所有可能的选择，找到最优结果。过程中有很多重复子问题，因此需要使用动态规划。</p>\n<p>最优化目标是(Alice’s score - Bob’s score)，Alice想要最大化，Bob想要最小化。其实都是最大化（我的分数 - 对方的分数）。<br />\n另外，观察到操作的结果其实是石头的和，因此需要提前计算前缀和数组。<br />\n问题转化成，从前缀和[i:]中挑一个数，使得的分数差最大；之后的后手只能从被挑的位置之后挑。<br />\n定义<br />\ndp(i) 为从前缀和[i:]中挑一个数的最大分数差，<br />\n则状态转移方程为：<br />\ndp(i) = max(presum[j] + dp(j + 1) for j in range(i,)).<br />\n时间复杂度为 O(N^2), 显然超时。</p>\n<p>然而，在状态转移方程中其实还有重叠子问题, for loop max可以只计算一次，因此可以进一步优化到 O(N).</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">stoneGameVIII</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; stones)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// presum</span></span><br><span class=\"line\">        <span class=\"comment\">// i = 0</span></span><br><span class=\"line\">        <span class=\"comment\">// pick i, ..., n - 1</span></span><br><span class=\"line\">        <span class=\"comment\">// time: n ^ 2</span></span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> n = stones.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">presum</span><span class=\"params\">(n + <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">        presum[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            presum[i+<span class=\"number\">1</span>] = presum[i] + stones[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> maxDp = numeric_limits&lt;<span class=\"type\">int</span>&gt;::<span class=\"built_in\">min</span>();</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">dp</span><span class=\"params\">(n + <span class=\"number\">2</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">        dp[n+<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = n; i &gt;= <span class=\"number\">2</span>; --i) &#123; <span class=\"comment\">// 这里需要注意结束条件，因为第一次挑选不能不合并或只合并第一个，因此presum[0],presum[1]是没用的。</span></span><br><span class=\"line\">            maxDp = <span class=\"built_in\">max</span>(maxDp, presum[i] - dp[i + <span class=\"number\">1</span>]);</span><br><span class=\"line\">            dp[i] = maxDp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxDp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(N),<br />\n空间复杂度: O(N).</p>\n",
            "tags": [
                "Competitive Programming"
            ]
        },
        {
            "id": "https://youngforest.github.io/2021/05/16/LeetCode-biweekly-contest-52/",
            "url": "https://youngforest.github.io/2021/05/16/LeetCode-biweekly-contest-52/",
            "title": "LeetCode biweekly contest 52",
            "date_published": "2021-05-16T18:13:00.000Z",
            "content_html": "<table>\n<thead>\n<tr>\n<th>Rank</th>\n<th>Name</th>\n<th>Score</th>\n<th>Finish Time</th>\n<th>Q1 (3)</th>\n<th>Q2 (5)</th>\n<th>Q3 (5)</th>\n<th>Q4 (6)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2217 / 10364</td>\n<td>YoungForest</td>\n<td>12</td>\n<td>0:51:47</td>\n<td>0:05:11</td>\n<td>0:51:47</td>\n<td>0:29:51</td>\n<td>null</td>\n</tr>\n</tbody>\n</table>\n<span id=\"more\"></span>\n<h2 id=\"1859-sorting-the-sentence\"><a class=\"markdownIt-Anchor\" href=\"#1859-sorting-the-sentence\"></a> 1859. Sorting the Sentence</h2>\n<p>字符串问题用<code>python</code>。虽然题目不难，就是分割字符串，按照指定内容排序，但实现起来还是比想象中复杂的。好在Python中有很多方便的API和数据结构可以灵活使用。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">sortSentence</span>(<span class=\"params\">self, s: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">        words = s.split(<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">f</span>(<span class=\"params\">word</span>):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"built_in\">int</span>(word[-<span class=\"number\">1</span>:]), word[<span class=\"number\">0</span>:-<span class=\"number\">1</span>])</span><br><span class=\"line\">        tuples = <span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(f, words))</span><br><span class=\"line\">        tuples.sort()</span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">f2</span>(<span class=\"params\">a, t</span>):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> a + <span class=\"string\">&#x27; &#x27;</span> + t[<span class=\"number\">1</span>] </span><br><span class=\"line\">        <span class=\"keyword\">return</span> reduce(f2, tuples, <span class=\"string\">&#x27;&#x27;</span>)[<span class=\"number\">1</span>:]</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(s.length),<br />\n空间复杂度: O(s.length).</p>\n<h2 id=\"1860-incremental-memory-leak\"><a class=\"markdownIt-Anchor\" href=\"#1860-incremental-memory-leak\"></a> 1860. Incremental Memory Leak</h2>\n<p>本来是想用等差数列求和+解方程，O(1)解决的。但事实上实现和解方程还是太复杂了。到最后也没做出来。做完第3题后，回过来算了一下暴力的时间复杂度: O(sqrt(2^32)) = 65536. 居然如此低，果然第二题还是不能想复杂了，直接暴力怼多好。</p>\n<p>暴力模拟题目中描述的内存占用过程。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">memLeak</span><span class=\"params\">(<span class=\"type\">int</span> m1, <span class=\"type\">int</span> m2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> t = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (m1 &gt;= t || m2 &gt;= t) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (m1 &gt;= m2) &#123;</span><br><span class=\"line\">                m1 -= t;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                m2 -= t;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ++t;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;t, m1, m2&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(sqrt(memory1 + memory2)),<br />\n空间复杂度: O(1).</p>\n<h2 id=\"1861-rotating-the-box\"><a class=\"markdownIt-Anchor\" href=\"#1861-rotating-the-box\"></a> 1861. Rotating the Box</h2>\n<p>了解了掉落的本质，会发现，只需要统计每个障碍物/地面左面到上个障碍物的石头有多少个即可。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">char</span>&gt;&gt; <span class=\"built_in\">rotateTheBox</span>(vector&lt;vector&lt;<span class=\"type\">char</span>&gt;&gt;&amp; box) &#123;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> rows = box.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> cols = box[<span class=\"number\">0</span>].<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        vector&lt;vector&lt;<span class=\"type\">char</span>&gt;&gt; <span class=\"built_in\">ans</span>(cols, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">char</span>&gt;(rows, <span class=\"string\">&#x27;.&#x27;</span>));</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; rows; ++i) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> stoneCnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; cols; ++j) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (box[i][j] == <span class=\"string\">&#x27;#&#x27;</span>) &#123;</span><br><span class=\"line\">                    ++stoneCnt;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (box[i][j] == <span class=\"string\">&#x27;*&#x27;</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// fall down</span></span><br><span class=\"line\">                    ans[j][rows - <span class=\"number\">1</span> - i] = <span class=\"string\">&#x27;*&#x27;</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">1</span>; k &lt;= stoneCnt; ++k) &#123;</span><br><span class=\"line\">                        ans[j - k][rows - <span class=\"number\">1</span> - i] = <span class=\"string\">&#x27;#&#x27;</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    stoneCnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">1</span>; k &lt;= stoneCnt; ++k) &#123;</span><br><span class=\"line\">                ans[cols - k][rows - <span class=\"number\">1</span> - i] = <span class=\"string\">&#x27;#&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(m * n),<br />\n空间复杂度: O(m * n).</p>\n<h2 id=\"1862-sum-of-floored-pairs\"><a class=\"markdownIt-Anchor\" href=\"#1862-sum-of-floored-pairs\"></a> 1862. Sum of Floored Pairs</h2>\n<p>没啥好想法。首先尝试了暴力解，枚举所有的对：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">sumOfFlooredPairs</span>(<span class=\"params\">self, nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        MOD = <span class=\"number\">10</span>**<span class=\"number\">9</span> + <span class=\"number\">7</span></span><br><span class=\"line\">        n = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">        ans = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">                ans += nums[j] // nums[i]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans % MOD</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(N^2), TLE，<br />\n空间复杂度: O(1).</p>\n<p>尝试使用二分查找优化，寻找每一个数的倍数范围。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> MOD = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">sumOfFlooredPairs</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(nums.<span class=\"built_in\">begin</span>(), nums.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> MAX = nums.<span class=\"built_in\">back</span>();</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> n = nums.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> last = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span> &amp;&amp; nums[i] == nums[i<span class=\"number\">-1</span>]) &#123;</span><br><span class=\"line\">                ans = (ans + last) % MOD;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            last = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; nums[i] * j &lt;= MAX; ++j) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">auto</span> l = <span class=\"built_in\">lower_bound</span>(nums.<span class=\"built_in\">begin</span>() + i, nums.<span class=\"built_in\">end</span>(), nums[i] * j);</span><br><span class=\"line\">                <span class=\"keyword\">auto</span> r = <span class=\"built_in\">lower_bound</span>(l, nums.<span class=\"built_in\">end</span>(), nums[i] * (j + <span class=\"number\">1</span>));</span><br><span class=\"line\">                <span class=\"keyword\">auto</span> x = <span class=\"built_in\">distance</span>(l, r);</span><br><span class=\"line\">                last = (last + x * j) % MOD;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ans = (ans + last) % MOD;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(N log N log N), 虽然有2个循环嵌套，但第二个其实是个调和级数。不过仍然TLE了。<br />\n空间复杂度: O(1).</p>\n<p>还是看零神的题解把：<br />\n<a href=\"https://leetcode-cn.com/problems/sum-of-floored-pairs/solution/xiang-xia-qu-zheng-shu-dui-he-by-leetcod-u3eg/\">前缀和优化</a>。<br />\n可以少一个log.</p>\n",
            "tags": [
                "Competitive Programming"
            ]
        },
        {
            "id": "https://youngforest.github.io/2021/05/16/LeetCode-weekly-contest-241/",
            "url": "https://youngforest.github.io/2021/05/16/LeetCode-weekly-contest-241/",
            "title": "LeetCode weekly contest 241",
            "date_published": "2021-05-16T17:42:19.000Z",
            "content_html": "<p>本周周赛和双周赛都翻车了，开始残酷打卡之旅。</p>\n<table>\n<thead>\n<tr>\n<th>Rank</th>\n<th>Name</th>\n<th>Score</th>\n<th>Finish Time</th>\n<th>Q1 (3)</th>\n<th>Q2 (5)</th>\n<th>Q3 (5)</th>\n<th>Q4 (6)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>717 / 11572</td>\n<td>YoungForest</td>\n<td>12</td>\n<td>0:23:51</td>\n<td>0:05:35</td>\n<td>0:17:33</td>\n<td>0:23:51</td>\n<td>null</td>\n</tr>\n</tbody>\n</table>\n<span id=\"more\"></span>\n<h2 id=\"1863-sum-of-all-subset-xor-totals\"><a class=\"markdownIt-Anchor\" href=\"#1863-sum-of-all-subset-xor-totals\"></a> 1863. Sum of All Subset XOR Totals</h2>\n<p>签到题。暴力回溯，枚举所有的子集。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">subsetXORSum</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        function&lt;<span class=\"type\">void</span>(<span class=\"type\">const</span> <span class=\"type\">int</span>, <span class=\"type\">const</span> <span class=\"type\">int</span>)&gt; backtracking = [&amp;](<span class=\"type\">const</span> <span class=\"type\">int</span> i, <span class=\"type\">const</span> <span class=\"type\">int</span> current) -&gt; <span class=\"type\">void</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == nums.<span class=\"built_in\">size</span>()) &#123;</span><br><span class=\"line\">                ans += current;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// use this</span></span><br><span class=\"line\">                <span class=\"built_in\">backtracking</span>(i + <span class=\"number\">1</span>, current ^ nums[i]);</span><br><span class=\"line\">                <span class=\"comment\">// not use this</span></span><br><span class=\"line\">                <span class=\"built_in\">backtracking</span>(i + <span class=\"number\">1</span>, current);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"built_in\">backtracking</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(2^n),<br />\n空间复杂度: O(n).</p>\n<h2 id=\"1864-minimum-number-of-swaps-to-make-the-binary-string-alternating\"><a class=\"markdownIt-Anchor\" href=\"#1864-minimum-number-of-swaps-to-make-the-binary-string-alternating\"></a> 1864. Minimum Number of Swaps to Make the Binary String Alternating</h2>\n<p>首先统计’0/1’的数目，看是否可以形成交替。<br />\n再尝试2种交替方式，1在前/0在前。<br />\n重点在于只需要关心不符合的数量即可，不需要考虑具体怎么交换。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">minSwaps</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = s.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">cnt</span><span class=\"params\">(<span class=\"number\">2</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">char</span> c : s) &#123;</span><br><span class=\"line\">            ++cnt[c - <span class=\"string\">&#x27;0&#x27;</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">abs</span>(cnt[<span class=\"number\">0</span>] - cnt[<span class=\"number\">1</span>]) &gt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">char</span> first : <span class=\"string\">&quot;01&quot;</span>s) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> current = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cnt.<span class=\"built_in\">at</span>(first - <span class=\"string\">&#x27;0&#x27;</span>) + <span class=\"number\">1</span> == cnt.<span class=\"built_in\">at</span>(<span class=\"string\">&#x27;1&#x27;</span> - first)) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; s.<span class=\"built_in\">size</span>(); i += <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (s[i] != first) &#123;</span><br><span class=\"line\">                    ++current;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ans = <span class=\"built_in\">min</span>(ans, current);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(s.length),<br />\n空间复杂度: O(1).</p>\n<p>需要注意的是,</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">char</span> first : <span class=\"string\">&quot;01&quot;</span>s)</span><br></pre></td></tr></table></figure>\n<p>一定不能写成。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">char</span> first : <span class=\"string\">&quot;01&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>因为前者是 字符串常量（string literal），后者是C语言里的静态字符串，会有<code>\\n</code>结尾的。</p>\n<h2 id=\"1865-finding-pairs-with-a-certain-sum\"><a class=\"markdownIt-Anchor\" href=\"#1865-finding-pairs-with-a-certain-sum\"></a> 1865. Finding Pairs With a Certain Sum</h2>\n<p>首先观察数据规模，发现<code>nums1.length</code>小，但<code>nums2.length</code>大。考虑对小的做遍历，大的<code>hash</code>优化。<br />\n使用一个反向hashtable记录<code>nums2</code> 值-&gt;index 的映射。</p>\n<p>时间复杂度:</p>\n<ul>\n<li>构造: O(nums2.length),</li>\n<li>add: O(1),</li>\n<li>count: O(nums1.length).<br />\n空间复杂度: O(nums2.length).</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FindSumPairs</span> &#123;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; nums1, nums2;</span><br><span class=\"line\">    unordered_map&lt;<span class=\"type\">int</span>, unordered_set&lt;<span class=\"type\">int</span>&gt;&gt; m;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">FindSumPairs</span>(vector&lt;<span class=\"type\">int</span>&gt;&amp; _nums1, vector&lt;<span class=\"type\">int</span>&gt;&amp; _nums2): <span class=\"built_in\">nums1</span>(<span class=\"built_in\">move</span>(_nums1)), <span class=\"built_in\">nums2</span>(<span class=\"built_in\">move</span>(_nums2)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; nums2.<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">            m[nums2[i]].<span class=\"built_in\">insert</span>(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> index, <span class=\"type\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// O(1)</span></span><br><span class=\"line\">        m[nums2[index]].<span class=\"built_in\">erase</span>(index);</span><br><span class=\"line\">        nums2[index] += val;</span><br><span class=\"line\">        m[nums2[index]].<span class=\"built_in\">insert</span>(index);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">count</span><span class=\"params\">(<span class=\"type\">int</span> tot)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// O(nums1.length)</span></span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i : nums1) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> it = m.<span class=\"built_in\">find</span>(tot - i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (it != m.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">                ans += it-&gt;second.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Your FindSumPairs object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"> * FindSumPairs* obj = new FindSumPairs(nums1, nums2);</span></span><br><span class=\"line\"><span class=\"comment\"> * obj-&gt;add(index,val);</span></span><br><span class=\"line\"><span class=\"comment\"> * int param_2 = obj-&gt;count(tot);</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"1866-number-of-ways-to-rearrange-sticks-with-k-sticks-visible\"><a class=\"markdownIt-Anchor\" href=\"#1866-number-of-ways-to-rearrange-sticks-with-k-sticks-visible\"></a> 1866. Number of Ways to Rearrange Sticks With K Sticks Visible</h2>\n<p>本题我只想到了N^3的解法。<br />\n使用动态规划，状态转移方程为</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ans = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(k - <span class=\"number\">1</span>, i):</span><br><span class=\"line\">    ans = (ans + dp(j, k - <span class=\"number\">1</span>) * f2(i-<span class=\"number\">1</span>, j)) % MOD</span><br><span class=\"line\"><span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure>\n<p>即从高向低考虑，因为最高的一定可以被看见。枚举第i个木棍放的位置，剩下i-1个木棍需要抽一些放在i之后，之后的是一个枚举数。<br />\n从时间复杂度上一定会超时，事实上果然如此，尽管我试图尽力从常数上优化。<br />\n下面给出我最后超时的代码。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MOD = <span class=\"number\">10</span>**<span class=\"number\">9</span> + <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"meta\">@cache</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">f</span>(<span class=\"params\">i</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i &lt;= <span class=\"number\">1</span>: <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>: <span class=\"keyword\">return</span> (i * f(i - <span class=\"number\">1</span>)) % MOD</span><br><span class=\"line\"><span class=\"meta\">@cache</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">f2</span>(<span class=\"params\">a, b</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> a == b: <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>: <span class=\"keyword\">return</span> (a * f2(a - <span class=\"number\">1</span>, b)) % MOD</span><br><span class=\"line\"><span class=\"meta\">@cache</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">dp</span>(<span class=\"params\">i: <span class=\"built_in\">int</span>, k: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"comment\"># [1:i], see k woods</span></span><br><span class=\"line\">    <span class=\"comment\"># print(i, k)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i &lt; k: <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> i == k: <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> k == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"comment\"># put i first and other after</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> f(i - <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        ans = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(k - <span class=\"number\">1</span>, i):</span><br><span class=\"line\">            <span class=\"comment\"># put i first and [j+1, i-1] after</span></span><br><span class=\"line\">            <span class=\"comment\"># pick num woods before</span></span><br><span class=\"line\">            <span class=\"comment\"># num = i - 1 - (j + 1) + 1</span></span><br><span class=\"line\">            <span class=\"comment\"># C_i^num * num!</span></span><br><span class=\"line\">            <span class=\"comment\"># C(n,m)=n!/((n-m)!*m!)（m≤n）</span></span><br><span class=\"line\">            <span class=\"comment\"># print(&#x27;add&#x27;, dp(j, k - 1), (factorial(i) // factorial(i - num)))</span></span><br><span class=\"line\">            ans = (ans + dp(j, k - <span class=\"number\">1</span>) * f2(i-<span class=\"number\">1</span>, j)) % MOD</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">rearrangeSticks</span>(<span class=\"params\">self, n: <span class=\"built_in\">int</span>, k: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp(n, k)</span><br></pre></td></tr></table></figure>\n<p>我参考了一些题解，确实是递推公式有问题。<br />\n其实从不同的角度都可以得到这个公式。</p>\n<ul>\n<li><a href=\"https://leetcode-cn.com/problems/number-of-ways-to-rearrange-sticks-with-k-sticks-visible/solution/qia-you-k-gen-mu-gun-ke-yi-kan-dao-de-pa-0c3g/\">能不能看到最后一根木棍</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/number-of-ways-to-rearrange-sticks-with-k-sticks-visible/solution/zhuan-huan-cheng-di-yi-lei-si-te-lin-shu-2y1k/\">第一类斯特林数</a></li>\n</ul>\n<p>小修我TLE的代码就OK了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">rearrangeSticks</span>(<span class=\"params\">self, n: <span class=\"built_in\">int</span>, k: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        MOD = <span class=\"number\">10</span>**<span class=\"number\">9</span> + <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"meta\">        @cache</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">dp</span>(<span class=\"params\">i: <span class=\"built_in\">int</span>, k: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">            <span class=\"comment\"># [1:i], see k woods</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> i &lt; k: <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> i == k: <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> k == <span class=\"number\">0</span>: <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"comment\"># last wood can be seen, it must be `i`. dp(i-1, k - 1)</span></span><br><span class=\"line\">                <span class=\"comment\"># last wood can not be seen, (i - 1) * dp(i - 1, k)</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> (dp(i-<span class=\"number\">1</span>, k - <span class=\"number\">1</span>) + (i - <span class=\"number\">1</span>) * dp(i - <span class=\"number\">1</span>, k)) % MOD</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp(n, k)</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Competitive Programming"
            ]
        },
        {
            "id": "https://youngforest.github.io/2021/05/09/LeetCode-weekly-contest-240/",
            "url": "https://youngforest.github.io/2021/05/09/LeetCode-weekly-contest-240/",
            "title": "LeetCode weekly contest 240",
            "date_published": "2021-05-09T16:18:34.000Z",
            "content_html": "<table>\n<thead>\n<tr>\n<th>Rank</th>\n<th>Name</th>\n<th>Score</th>\n<th>Finish Time</th>\n<th>Q1 (3)</th>\n<th>Q2 (5)</th>\n<th>Q3 (5)</th>\n<th>Q4 (6)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>272 / 11577</td>\n<td>YoungForest</td>\n<td>18</td>\n<td>1:15:29</td>\n<td>0:04:46</td>\n<td>0:14:19</td>\n<td>0:47:06</td>\n<td>1:10:29  1</td>\n</tr>\n</tbody>\n</table>\n<p>这周五一假期+大论文查重。心情被大论文折麽的十分焦虑，再坚持2周，挺过答辩就好了。<br />\n等过了答辩，让我干啥都行。</p>\n<p>前几周因为国服自己的rating太高，不敢打了，怕掉分。转战了美服，现在把美服也打到2350了。rating也过高了。之后打算再次转战国服，因为最近新一年的招聘迫近，国服赞助商礼物比较丰厚。虽然去年只有几次排名足够靠前，拿到奖品，但好歹有个奖励，有比较小的期望。</p>\n<span id=\"more\"></span>\n<h2 id=\"1854-maximum-population-year\"><a class=\"markdownIt-Anchor\" href=\"#1854-maximum-population-year\"></a> 1854. Maximum Population Year</h2>\n<p>签到题。暴力枚举每个可能的年份。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">maximumPopulation</span><span class=\"params\">(vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt;&amp; logs)</span> </span>&#123;</span><br><span class=\"line\">        map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; cnt;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">const</span> <span class=\"keyword\">auto</span>&amp; v : logs) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = v[<span class=\"number\">0</span>]; i &lt; v[<span class=\"number\">1</span>]; ++i) &#123;</span><br><span class=\"line\">                ++cnt[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> maxValue = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> maxYear = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">const</span> <span class=\"keyword\">auto</span>&amp; p : cnt) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p.second &gt; maxValue) &#123;</span><br><span class=\"line\">                maxYear = p.first;</span><br><span class=\"line\">                maxValue = p.second;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxYear;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(logs.length * MAX(death_i - birth_i)) = O(100 * 100),<br />\n空间复杂度: O(MAX(death_i - birth_i)).</p>\n<h2 id=\"1855-maximum-distance-between-a-pair-of-values\"><a class=\"markdownIt-Anchor\" href=\"#1855-maximum-distance-between-a-pair-of-values\"></a> 1855. Maximum Distance Between a Pair of Values</h2>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">maxDistance</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums1, vector&lt;<span class=\"type\">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; nums1.<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> it = <span class=\"built_in\">upper_bound</span>(nums2.<span class=\"built_in\">begin</span>() + i, nums2.<span class=\"built_in\">end</span>(), nums1[i], greater&lt;&gt;());</span><br><span class=\"line\">            ans = <span class=\"built_in\">max</span>(ans, <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">int</span>&gt;(<span class=\"built_in\">distance</span>(nums2.<span class=\"built_in\">begin</span>() + i, <span class=\"built_in\">prev</span>(it))));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(nums1.length * log nums2.length),<br />\n空间复杂度: O(1).</p>\n<p>本题也可以用双指针做，i 指向nums1的位置，j 指向nums2的位置。<br />\n向右遍历 i，更新j。不变量是 j &gt;= i &amp;&amp; nums[j] &lt; nums[i].<br />\n时间复杂度是 O(nums1.length + nums2.length).<br />\n代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">maxDistance</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums1, vector&lt;<span class=\"type\">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>; i &lt; nums1.<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (j &lt; nums2.<span class=\"built_in\">size</span>() &amp;&amp; (j &lt; i || nums2[j] &gt;= nums1[i])) ++j;</span><br><span class=\"line\">            ans = <span class=\"built_in\">max</span>(ans, j - <span class=\"number\">1</span> - i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1856-maximum-subarray-min-product\"><a class=\"markdownIt-Anchor\" href=\"#1856-maximum-subarray-min-product\"></a> 1856. Maximum Subarray Min-Product</h2>\n<p>类似BFS，从数值大的元素开始遍历，尝试合并左右区间。<br />\n具体实现需要 维护区间左右边界、最小值、区间和。可以采用类似并查集的思路。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\">    <span class=\"type\">const</span> ll MOD = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> INF = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">maxSumMinProduct</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> n = nums.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"comment\">// iterate from max to min</span></span><br><span class=\"line\">        <span class=\"function\">vector&lt;ll&gt; <span class=\"title\">s</span><span class=\"params\">(n, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">right</span><span class=\"params\">(n, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">left</span><span class=\"params\">(n, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">minV</span><span class=\"params\">(n, INF)</span></span>;</span><br><span class=\"line\">        multimap&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>, greater&lt;&gt;&gt; index;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            index.<span class=\"built_in\">insert</span>(&#123;nums[i], i&#125;);</span><br><span class=\"line\">            minV[i] = nums[i];</span><br><span class=\"line\">            left[i] = i;</span><br><span class=\"line\">            right[i] = i;</span><br><span class=\"line\">            s[i] = nums[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ll ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">const</span> <span class=\"keyword\">auto</span>&amp; p : index) &#123;</span><br><span class=\"line\">            <span class=\"type\">const</span> <span class=\"type\">int</span> i = p.second;</span><br><span class=\"line\">            <span class=\"type\">const</span> ll minValue = p.first;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span> &amp;&amp; minV[i<span class=\"number\">-1</span>] &gt;= minValue) &#123;</span><br><span class=\"line\">                left[i] = left[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">                s[i] += s[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i + <span class=\"number\">1</span> &lt; n &amp;&amp; minV[i+<span class=\"number\">1</span>] &gt; minValue) &#123;</span><br><span class=\"line\">                right[i] = right[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">                s[i] += s[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            minV[right[i]] = minValue;</span><br><span class=\"line\">            minV[left[i]] = minValue;</span><br><span class=\"line\">            right[left[i]] = right[i];</span><br><span class=\"line\">            left[right[i]] = left[i];</span><br><span class=\"line\">            s[left[i]] = s[i];</span><br><span class=\"line\">            s[right[i]] = s[i];</span><br><span class=\"line\">            ans = <span class=\"built_in\">max</span>(ans, s[i] * minValue);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans % MOD;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(n * log n),<br />\n空间复杂度: O(n).</p>\n<p>赛后经残酷群友讨论，<br />\n类似的题目有：<br />\n<a href=\"https://leetcode-cn.com/problems/largest-rectangle-in-histogram/\">LC 84. Largest Rectangle in Histogram</a>. 区别在于 84 是 最小值*子数组长度。本题是 最小值*子数组和。</p>\n<h2 id=\"1857-largest-color-value-in-a-directed-graph\"><a class=\"markdownIt-Anchor\" href=\"#1857-largest-color-value-in-a-directed-graph\"></a> 1857. Largest Color Value in a Directed Graph</h2>\n<p>拓扑排序。同时 遍历到每一个节点时，更新能到它的路径中每种颜色最大的。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">largestPathValue</span>(<span class=\"params\">self, colors: <span class=\"built_in\">str</span>, edges: <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        n = <span class=\"built_in\">len</span>(colors)</span><br><span class=\"line\">        m = <span class=\"built_in\">len</span>(edges)</span><br><span class=\"line\">        indegree = [<span class=\"number\">0</span>] * n</span><br><span class=\"line\">        graph = defaultdict(<span class=\"built_in\">list</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> e <span class=\"keyword\">in</span> edges:</span><br><span class=\"line\">            indegree[e[<span class=\"number\">1</span>]] += <span class=\"number\">1</span></span><br><span class=\"line\">            graph[e[<span class=\"number\">0</span>]].append(e[<span class=\"number\">1</span>])</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"comment\"># topo sort</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">dfs</span>(<span class=\"params\">root</span>):</span><br><span class=\"line\">            ans = [<span class=\"number\">0</span>] * <span class=\"number\">26</span></span><br><span class=\"line\">            ans[<span class=\"built_in\">ord</span>(colors[root]) - <span class=\"built_in\">ord</span>(<span class=\"string\">&#x27;a&#x27;</span>)] += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> graph[root]:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> n <span class=\"keyword\">in</span> path: <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">                x = dfs(n, path)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> x <span class=\"keyword\">is</span> <span class=\"literal\">None</span>: <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">26</span>):</span><br><span class=\"line\">                    ans[i] += x[i]</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ans</span><br><span class=\"line\">        ans = -<span class=\"number\">1</span></span><br><span class=\"line\">        q = collections.deque()</span><br><span class=\"line\">        seen = <span class=\"number\">0</span></span><br><span class=\"line\">        cnt = [[<span class=\"number\">0</span>] * <span class=\"number\">26</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span> (n)]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> indegree[i] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                cnt[i][<span class=\"built_in\">ord</span>(colors[i]) - <span class=\"built_in\">ord</span>(<span class=\"string\">&#x27;a&#x27;</span>)] += <span class=\"number\">1</span></span><br><span class=\"line\">                q.append(i)</span><br><span class=\"line\">                seen += <span class=\"number\">1</span></span><br><span class=\"line\">                ans = <span class=\"built_in\">max</span>(ans, <span class=\"built_in\">max</span>(cnt[i]))</span><br><span class=\"line\">                </span><br><span class=\"line\">        <span class=\"keyword\">while</span> q:</span><br><span class=\"line\">            front = q.popleft()</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> graph[front]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">26</span>):</span><br><span class=\"line\">                    cnt[i][x] = <span class=\"built_in\">max</span>(cnt[i][x], cnt[front][x])</span><br><span class=\"line\">                indegree[i] -= <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> indegree[i] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                    q.append(i)</span><br><span class=\"line\">                    cnt[i][<span class=\"built_in\">ord</span>(colors[i]) - <span class=\"built_in\">ord</span>(<span class=\"string\">&#x27;a&#x27;</span>)] += <span class=\"number\">1</span></span><br><span class=\"line\">                    ans = <span class=\"built_in\">max</span>(ans, <span class=\"built_in\">max</span>(cnt[i]))</span><br><span class=\"line\">                    seen += <span class=\"number\">1</span></span><br><span class=\"line\">                </span><br><span class=\"line\">        <span class=\"keyword\">if</span> seen == n: <span class=\"keyword\">return</span> ans</span><br><span class=\"line\">        <span class=\"keyword\">else</span>: <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(n + m),<br />\n空间复杂度: O(n + m).</p>\n",
            "tags": [
                "Competitive Programming"
            ]
        },
        {
            "id": "https://youngforest.github.io/2021/05/02/LeetCode-biweekly-contest-51/",
            "url": "https://youngforest.github.io/2021/05/02/LeetCode-biweekly-contest-51/",
            "title": "LeetCode biweekly contest 51",
            "date_published": "2021-05-02T10:52:18.000Z",
            "content_html": "<table>\n<thead>\n<tr>\n<th>Rank</th>\n<th>Name</th>\n<th>Score</th>\n<th>Finish Time</th>\n<th>Q1 (3)</th>\n<th>Q2 (4)</th>\n<th>Q3 (5)</th>\n<th>Q4 (6)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>150 / 9378</td>\n<td>YoungForest</td>\n<td>18</td>\n<td>0:32:04</td>\n<td>0:05:26</td>\n<td>0:07:22</td>\n<td>0:11:24</td>\n<td>0:32:04</td>\n</tr>\n</tbody>\n</table>\n<p>手速场。最近手速已大不如从前，最后一题也因为不熟练花费了比较多的时间。<br />\n其实，手速场中，所有题目的算法其实都不难，想到正确的解法很快，但迅速实现 + bug free就考验每位程序员的功力了。</p>\n<span id=\"more\"></span>\n<h2 id=\"1844-replace-all-digits-with-characters\"><a class=\"markdownIt-Anchor\" href=\"#1844-replace-all-digits-with-characters\"></a> 1844. Replace All Digits with Characters</h2>\n<p>签到题。按照题目要求完成即可。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">char</span> <span class=\"title\">shift</span><span class=\"params\">(<span class=\"type\">char</span> c, <span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c + x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">string <span class=\"title\">replaceDigits</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; s.<span class=\"built_in\">size</span>(); i += <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            s[i] = <span class=\"built_in\">shift</span>(s[i<span class=\"number\">-1</span>], s[i] - <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(N),<br />\n空间复杂度: O(1).</p>\n<h2 id=\"1845-seat-reservation-manager\"><a class=\"markdownIt-Anchor\" href=\"#1845-seat-reservation-manager\"></a> 1845. Seat Reservation Manager</h2>\n<p>因为每次都找最小的座位号，同时有<code>insert</code>(<code>unreserve</code>)的操作。显然需要使用 <code>priority_queue</code>优先队列/Heap 实现这一需求。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SeatManager</span> &#123;</span><br><span class=\"line\">    priority_queue&lt;<span class=\"type\">int</span>, vector&lt;<span class=\"type\">int</span>&gt;, greater&lt;&gt;&gt; pq;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">SeatManager</span>(<span class=\"type\">int</span> n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">            pq.<span class=\"built_in\">push</span>(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">reserve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> ans = pq.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">        pq.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">unreserve</span><span class=\"params\">(<span class=\"type\">int</span> seatNumber)</span> </span>&#123;</span><br><span class=\"line\">        pq.<span class=\"built_in\">push</span>(seatNumber);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Your SeatManager object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"> * SeatManager* obj = new SeatManager(n);</span></span><br><span class=\"line\"><span class=\"comment\"> * int param_1 = obj-&gt;reserve();</span></span><br><span class=\"line\"><span class=\"comment\"> * obj-&gt;unreserve(seatNumber);</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<p>时间复杂度:</p>\n<ul>\n<li>SeatManager: O(n),</li>\n<li>reserve: O(log n),</li>\n<li>unreserve: O(log n).<br />\n空间复杂度: O(n).</li>\n</ul>\n<h2 id=\"1846-maximum-element-after-decreasing-and-rearranging\"><a class=\"markdownIt-Anchor\" href=\"#1846-maximum-element-after-decreasing-and-rearranging\"></a> 1846. Maximum Element After Decreasing and Rearranging</h2>\n<p>贪心。<br />\n观察2种操作 <code>Decrease</code> 和 <code>Rearrange</code> 可以发现，<br />\n其实只需要<code>Reagrrage</code>一次，<code>Decrease</code>时，优先减小的。因为大的减起来一定可以包括小的，但小的不行。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">maximumElementAfterDecrementingAndRearranging</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> n = arr.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(arr.<span class=\"built_in\">begin</span>(), arr.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        <span class=\"type\">int</span> last = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[i] &gt; last) &#123;</span><br><span class=\"line\">                arr[i] = last + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                arr[i] = last;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            last = arr[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr[n - <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(n log n + n),<br />\n空间复杂度: O(1).</p>\n<h2 id=\"1847-closest-room\"><a class=\"markdownIt-Anchor\" href=\"#1847-closest-room\"></a> 1847. Closest Room</h2>\n<p>首先想到暴力解法，对于每一个<code>query</code>, 遍历一遍<code>rooms</code>，就可以找到答案。时间复杂度为 <code>O(k * n)</code>，显然会TLE。<br />\n解法时间复杂度应该是类似<code>O(n log n)</code>这种形式。</p>\n<p>这里需要用到一个所谓**离线计算(offline query)**的技术。<br />\n所谓在线计算，就是<code>queries</code>的解答顺序是不变的，类似一个函数，每次被call，解答一次。<br />\n所谓离线计算，就是<code>queries</code>的解答顺序是可以变的，需要一次性求解一个数组的<code>queries</code>。此时，我们可以通过对<code>queries</code>重新排序得到均摊速度更快的算法。</p>\n<p>首先，将<code>queries</code>按<code>minisize</code>排序，将<code>rooms</code>按<code>size</code>排序。<br />\n用双指针的方式，保证对于当前的<code>query</code>，符合要求的<code>rooms</code>都被加入候选集合中。这里我们用<code>TreeSet</code>维护候选集合，以实现<code>log n</code>的搜索最近<code>room</code>。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">closestRoom</span><span class=\"params\">(vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt;&amp; rooms, vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt;&amp; queries)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// brute force: k * n</span></span><br><span class=\"line\">        <span class=\"comment\">// need: k * log n + n log n</span></span><br><span class=\"line\">        <span class=\"comment\">// online, sort queries by minisize from big to small, find close candidate</span></span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> n = rooms.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(rooms.<span class=\"built_in\">begin</span>(), rooms.<span class=\"built_in\">end</span>(), [&amp;](<span class=\"type\">const</span> <span class=\"keyword\">auto</span>&amp; a, <span class=\"type\">const</span> <span class=\"keyword\">auto</span>&amp; b) -&gt; <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> a[<span class=\"number\">1</span>] &gt; b[<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> k = queries.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">using</span> pii = pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;;</span><br><span class=\"line\">        vector&lt;pii&gt; searchOrder; <span class=\"comment\">// miniSize, index</span></span><br><span class=\"line\">        searchOrder.<span class=\"built_in\">reserve</span>(k);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; k; ++i) &#123;</span><br><span class=\"line\">            searchOrder.<span class=\"built_in\">push_back</span>(&#123;queries[i][<span class=\"number\">1</span>], i&#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(searchOrder.<span class=\"built_in\">begin</span>(), searchOrder.<span class=\"built_in\">end</span>(), [&amp;](<span class=\"type\">const</span> <span class=\"keyword\">auto</span>&amp; a, <span class=\"type\">const</span> <span class=\"keyword\">auto</span>&amp; b) -&gt; <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> a.first &gt; b.first;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        set&lt;<span class=\"type\">int</span>&gt; candidate;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">ans</span><span class=\"params\">(k, <span class=\"number\">-1</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; k; ++j) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (i &lt; n &amp;&amp; rooms[i][<span class=\"number\">1</span>] &gt;= searchOrder[j].first) &#123;</span><br><span class=\"line\">                candidate.<span class=\"built_in\">insert</span>(rooms[i++][<span class=\"number\">0</span>]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"type\">const</span> <span class=\"type\">int</span> prefer = queries[searchOrder[j].second][<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!candidate.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">auto</span> it = candidate.<span class=\"built_in\">lower_bound</span>(prefer);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (it == candidate.<span class=\"built_in\">begin</span>()) &#123;</span><br><span class=\"line\">                    ans[searchOrder[j].second] = *it;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (it == candidate.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">                    ans[searchOrder[j].second] = *<span class=\"built_in\">prev</span>(it);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"built_in\">abs</span>(*it - prefer) &lt; (prefer - *<span class=\"built_in\">prev</span>(it))) &#123;</span><br><span class=\"line\">                        ans[searchOrder[j].second] = *it;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        ans[searchOrder[j].second] = *<span class=\"built_in\">prev</span>(it);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                ans[searchOrder[j].second] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(n log n + k log n + k log k),<br />\n空间复杂度: O(k + n).</p>\n",
            "tags": [
                "Competitive Programming"
            ]
        },
        {
            "id": "https://youngforest.github.io/2021/05/02/LeetCode-weekly-contest-239/",
            "url": "https://youngforest.github.io/2021/05/02/LeetCode-weekly-contest-239/",
            "title": "LeetCode weekly contest 239",
            "date_published": "2021-05-02T10:47:52.000Z",
            "content_html": "<table>\n<thead>\n<tr>\n<th>Rank</th>\n<th>Name</th>\n<th>Score</th>\n<th>Finish Time</th>\n<th>Q1 (3)</th>\n<th>Q2 (5)</th>\n<th>Q3 (5)</th>\n<th>Q4 (6)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>78 / 10870</td>\n<td>YoungForest</td>\n<td>18</td>\n<td>0:52:57</td>\n<td>0:02:22</td>\n<td>0:09:37</td>\n<td>0:27:13</td>\n<td>0:47:57  1</td>\n</tr>\n</tbody>\n</table>\n<p>连续3周免打卡了，昨晚双周赛也做的不错手速场。<br />\n最近的周赛确实难度有所降低，看来我还是适合做简单题目。Hard+还是不大行。</p>\n<span id=\"more\"></span>\n<h2 id=\"1848-minimum-distance-to-the-target-element\"><a class=\"markdownIt-Anchor\" href=\"#1848-minimum-distance-to-the-target-element\"></a> 1848. Minimum Distance to the Target Element</h2>\n<p>签到题。<br />\nOne pass，记录最优答案。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> INF = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getMinDistance</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; nums, <span class=\"type\">int</span> target, <span class=\"type\">int</span> start)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = -INF;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] == target) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">abs</span>(i - start) &lt; <span class=\"built_in\">abs</span>(ans - start)) &#123;</span><br><span class=\"line\">                    ans = i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">abs</span>(ans - start);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1849-splitting-a-string-into-descending-consecutive-values\"><a class=\"markdownIt-Anchor\" href=\"#1849-splitting-a-string-into-descending-consecutive-values\"></a> 1849. Splitting a String Into Descending Consecutive Values</h2>\n<p>Backtracking, 搜索可能的分割点。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">splitString</span>(<span class=\"params\">self, s: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">        n = <span class=\"built_in\">len</span>(s)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> n &lt;= <span class=\"number\">1</span>: <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"meta\">        @cache</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">dfs</span>(<span class=\"params\">i: <span class=\"built_in\">int</span>, last: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i &gt;= n: <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> i != <span class=\"number\">0</span>:</span><br><span class=\"line\">                final = <span class=\"built_in\">int</span>(s[i:])</span><br><span class=\"line\">                <span class=\"keyword\">if</span> final &lt; last <span class=\"keyword\">and</span> last - final == <span class=\"number\">1</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i + <span class=\"number\">1</span>, n):</span><br><span class=\"line\">                new = <span class=\"built_in\">int</span>(s[i:j])</span><br><span class=\"line\">                <span class=\"keyword\">if</span> new &lt; last <span class=\"keyword\">and</span> (i == <span class=\"number\">0</span> <span class=\"keyword\">or</span> last - new == <span class=\"number\">1</span>):</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> dfs(j, new): <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dfs(<span class=\"number\">0</span>, <span class=\"built_in\">float</span>(<span class=\"string\">&#x27;inf&#x27;</span>))</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(N^2),<br />\n空间复杂度: O(N).</p>\n<p>虽然我们使用了backtracking，看起来好想时间复杂度很高，O(N ^ N), 但其实在<code>dfs</code>中的<code>for</code>循环中，符合条件可以<code>dfs</code>到下一层的可能路径只有1条。<br />\n参考<a href=\"https://leetcode.com/problems/splitting-a-string-into-descending-consecutive-values/discuss/1186795/C%2B%2B-Backtracking-solution.-O(N-2)-and-time-complexity-analytics\">这个题解的分析</a>.</p>\n<h2 id=\"1850-minimum-adjacent-swaps-to-reach-the-kth-smallest-number\"><a class=\"markdownIt-Anchor\" href=\"#1850-minimum-adjacent-swaps-to-reach-the-kth-smallest-number\"></a> 1850. Minimum Adjacent Swaps to Reach the Kth Smallest Number</h2>\n<p>首先，我们需要复习一下<a href=\"https://leetcode.com/problems/next-permutation/\">LC 31. Next Permutation</a>. 学习一下求解下一个枚举排列的方法。幸运的是，C++ STL 里已经提供了<code>std::next_permutation</code>函数可以直接用，均摊时间复杂度为<strong>O(1)</strong>.<br />\n使用<code>k</code>次<code>next_permutation</code>找到the Kth Smallest Number<br />\n后，只需要采用贪心的思路就可以找到最小交换次数。<br />\n即发现一个不相等的位置，就在后面找到一个最近的相等的数，通过交换挪的当前位置。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getMinSwaps</span><span class=\"params\">(string num, <span class=\"type\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> s = num;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(std::<span class=\"built_in\">next_permutation</span>(s.<span class=\"built_in\">begin</span>(), s.<span class=\"built_in\">end</span>()) &amp;&amp; k - <span class=\"number\">1</span> &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// std::cout &lt;&lt; s &lt;&lt; &#x27;\\n&#x27;;</span></span><br><span class=\"line\">            --k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> n = num.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (num[j] == s[j]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"comment\">// find next digit and swap it here</span></span><br><span class=\"line\">            <span class=\"type\">int</span> i = j + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (; i &lt; n <span class=\"keyword\">and</span> num[i] != s[j]; ++i);</span><br><span class=\"line\">            <span class=\"comment\">// cout &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; j &lt;&lt; endl;</span></span><br><span class=\"line\">            ans += i - j;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> x = i; x &gt; j; --x) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">swap</span>(num[x], num[x - <span class=\"number\">1</span>]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(k + n^2),<br />\n空间复杂度: O(n).</p>\n<h2 id=\"1851-minimum-interval-to-include-each-query\"><a class=\"markdownIt-Anchor\" href=\"#1851-minimum-interval-to-include-each-query\"></a> 1851. Minimum Interval to Include Each Query</h2>\n<p>本题和<a href=\"https://youngforest.github.io/2021/05/02/LeetCode-biweekly-contest-51/#1847-Closest-Room\">昨晚双周赛的最后一题</a>有些像，需要用到离线计算的技术。<br />\nintervals按照size从小到大排序，没新增一个interval，更新可以覆盖到的query的答案。<br />\n这里需要用<code>multimap</code>维护待解决的<code>queries</code>。因为支持二分查找和删除，以及重复的query.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">minInterval</span><span class=\"params\">(vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt;&amp; intervals, vector&lt;<span class=\"type\">int</span>&gt;&amp; queries)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// brute-foce: queries.length * intervals.length</span></span><br><span class=\"line\">        <span class=\"comment\">// smarter: queries.length * log + intervals.length * log</span></span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> n = intervals.<span class=\"built_in\">size</span>(), m = queries.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"comment\">// sort interval by size less&lt;&gt;, find new queries</span></span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">ans</span><span class=\"params\">(m, <span class=\"number\">-1</span>)</span></span>;</span><br><span class=\"line\">        multimap&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; indexQueries;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i) &#123;</span><br><span class=\"line\">            indexQueries.<span class=\"built_in\">insert</span>(&#123;queries[i], i&#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(intervals.<span class=\"built_in\">begin</span>(), intervals.<span class=\"built_in\">end</span>(), [](<span class=\"type\">const</span> <span class=\"keyword\">auto</span>&amp; lhs, <span class=\"type\">const</span> <span class=\"keyword\">auto</span>&amp; rhs) -&gt; <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> lhs[<span class=\"number\">1</span>] - lhs[<span class=\"number\">0</span>] &lt; rhs[<span class=\"number\">1</span>] - rhs[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"type\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">const</span> <span class=\"keyword\">auto</span>&amp; v : intervals) &#123;</span><br><span class=\"line\">            size = v[<span class=\"number\">1</span>] - v[<span class=\"number\">0</span>] + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> left = indexQueries.<span class=\"built_in\">lower_bound</span>(v[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> right = indexQueries.<span class=\"built_in\">upper_bound</span>(v[<span class=\"number\">1</span>]);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> it = left; it != right; ++it) &#123;</span><br><span class=\"line\">                ans[it-&gt;second] = size;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> it = left; it != right;) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">auto</span> nit = <span class=\"built_in\">next</span>(it);</span><br><span class=\"line\">                indexQueries.<span class=\"built_in\">erase</span>(it);</span><br><span class=\"line\">                it = nit;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>n = intervals.length, m = queries.length<br />\n时间复杂度: O(n log n + m log m + n log m),<br />\n空间复杂度: O(m).</p>\n",
            "tags": [
                "Competitive Programming"
            ]
        },
        {
            "id": "https://youngforest.github.io/2021/04/25/LeetCode-weekly-contest-238/",
            "url": "https://youngforest.github.io/2021/04/25/LeetCode-weekly-contest-238/",
            "title": "LeetCode weekly contest 238",
            "date_published": "2021-04-25T16:58:13.000Z",
            "content_html": "<table>\n<thead>\n<tr>\n<th>Rank</th>\n<th>Name</th>\n<th>Score</th>\n<th>Finish Time</th>\n<th>Q1 (3)</th>\n<th>Q2 (5)</th>\n<th>Q3 (5)</th>\n<th>Q4 (6)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>383 / 11635</td>\n<td>YoungForest</td>\n<td>18</td>\n<td>1:53:50</td>\n<td>0:01:05</td>\n<td>0:13:02</td>\n<td>0:20:59</td>\n<td>1:28:50 5</td>\n</tr>\n</tbody>\n</table>\n<span id=\"more\"></span>\n<h2 id=\"1837-sum-of-digits-in-base-k\"><a class=\"markdownIt-Anchor\" href=\"#1837-sum-of-digits-in-base-k\"></a> 1837. Sum of Digits in Base K</h2>\n<p>签到题。10进制转6进制。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">sumBase</span>(<span class=\"params\">self, n: <span class=\"built_in\">int</span>, k: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        ans = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> n &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            ans += n % k</span><br><span class=\"line\">            n //= k</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(log_k n),<br />\n空间复杂度: O(1).</p>\n<h2 id=\"1838-frequency-of-the-most-frequent-element\"><a class=\"markdownIt-Anchor\" href=\"#1838-frequency-of-the-most-frequent-element\"></a> 1838. Frequency of the Most Frequent Element</h2>\n<p>本周周赛Q2 Q3都是滑动窗口题。事实上，从零宝大数据来看，Q2难度还是比Q3大的。</p>\n<p>首先想出暴力解法，尝试每个元素，试图把比它小的元素增至它，看最多有多少个。<br />\n时间复杂度: O(N ^ 2), 估计会TLE。<br />\nQ2 通常情况下还是可以暴力解的，虽然本题不可以。</p>\n<p>在暴力解的基础上，尝试优化。观察到，“试图把比它小的元素增至它”这个操作或许可以在O(1)的情况下完成，而不需要暴力尝试每个比它小的元素。因为那些元素已经被升至上一个尝试元素了。</p>\n<p>先排序。然后，从小到大尝试把所有值都增至<code>nums[r]</code>。<br />\n窗口<code>[l:r]</code>维护这些被增至目标值<code>nums[r]</code>的元素。<br />\n当<code>r</code>右移时，把窗口里的元素都从上个值更新到<code>nums[r]</code>。<br />\n如果用了过多的增操作，则增加<code>l</code>，释放增操作。<br />\n取窗口最宽值作为答案。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">maxFrequency</span>(<span class=\"params\">self, nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], k: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        <span class=\"comment\"># brute force: N ^ 2</span></span><br><span class=\"line\">        <span class=\"comment\"># for each element, try to make it most frequency</span></span><br><span class=\"line\">        <span class=\"comment\"># sliding window</span></span><br><span class=\"line\">        nums.sort()</span><br><span class=\"line\">        ans = <span class=\"number\">0</span></span><br><span class=\"line\">        l = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(nums)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> r &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                <span class=\"comment\"># make all increment to nums[r]</span></span><br><span class=\"line\">                k -= (nums[r] - nums[r-<span class=\"number\">1</span>]) * (r - l)</span><br><span class=\"line\">            <span class=\"keyword\">while</span> k &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                k += nums[r] - nums[l]</span><br><span class=\"line\">                l += <span class=\"number\">1</span></span><br><span class=\"line\">            ans = <span class=\"built_in\">max</span>(r - l + <span class=\"number\">1</span>, ans)</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(n log n + n),<br />\n空间复杂度: O(1).</p>\n<h2 id=\"1839-longest-substring-of-all-vowels-in-order\"><a class=\"markdownIt-Anchor\" href=\"#1839-longest-substring-of-all-vowels-in-order\"></a> 1839. Longest Substring Of All Vowels in Order</h2>\n<p>相比上题，本题更是明显的滑动窗口题。<br />\n窗口<code>[l:r]</code>的不变量是字串递增。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">longestBeautifulSubstring</span>(<span class=\"params\">self, word: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        <span class=\"comment\"># brute force: N^3, enumerate all substring * check each substring</span></span><br><span class=\"line\">        <span class=\"comment\"># sliding window: N</span></span><br><span class=\"line\">        <span class=\"comment\"># at least once, incresing</span></span><br><span class=\"line\">        l = <span class=\"number\">0</span></span><br><span class=\"line\">        r = <span class=\"number\">0</span></span><br><span class=\"line\">        n = <span class=\"built_in\">len</span>(word)</span><br><span class=\"line\">        cnt = [<span class=\"number\">0</span>] * <span class=\"number\">26</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">check</span>():</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"string\">&#x27;aeiou&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> cnt[<span class=\"built_in\">ord</span>(i) - <span class=\"built_in\">ord</span>(<span class=\"string\">&#x27;a&#x27;</span>)] &lt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        ans = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> r &lt; n:</span><br><span class=\"line\">            cnt[<span class=\"built_in\">ord</span>(word[r]) - <span class=\"built_in\">ord</span>(<span class=\"string\">&#x27;a&#x27;</span>)] += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> r &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> word[r] &lt; word[r-<span class=\"number\">1</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">while</span> l &lt; r:</span><br><span class=\"line\">                    cnt[<span class=\"built_in\">ord</span>(word[l]) - <span class=\"built_in\">ord</span>(<span class=\"string\">&#x27;a&#x27;</span>)] -= <span class=\"number\">1</span></span><br><span class=\"line\">                    l += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> check():</span><br><span class=\"line\">                ans = <span class=\"built_in\">max</span>(ans, r - l + <span class=\"number\">1</span>)</span><br><span class=\"line\">            r += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure>\n<p>时间复杂度: O(word.length),<br />\n空间复杂度: O(1).</p>\n<h2 id=\"1840-maximum-building-height\"><a class=\"markdownIt-Anchor\" href=\"#1840-maximum-building-height\"></a> 1840. Maximum Building Height</h2>\n<p>还是挺难的一道Hard题。<br />\n相邻差值为1. 一开始想到用BFS，从高度限制小的开始遍历，更新周围的高度。也算是经典算法。<br />\n然后TLE后，才注意到<code>n &lt;= 10^9</code>这个限制。O(N)的算法也肯定超时。<br />\n注意<code>restrictions.length &lt;= 10^5</code>这一限制，大概率是要从这里下手的。<br />\n因此，BFS时只更新被限制的块，块中间再用二分搜索找最高点（其实可以用O(1)的数学解法的，比赛时没好想法就二分暴力了）。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> INF = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">maxBuilding</span><span class=\"params\">(<span class=\"type\">int</span> n, vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt;&amp; restrictions)</span> </span>&#123;</span><br><span class=\"line\">        map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; rtxMap;</span><br><span class=\"line\">        unordered_map&lt;<span class=\"type\">int</span>, <span class=\"type\">bool</span>&gt; seen;</span><br><span class=\"line\">        seen.<span class=\"built_in\">reserve</span>(restrictions.<span class=\"built_in\">size</span>() + <span class=\"number\">2</span>);</span><br><span class=\"line\">        rtxMap[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        rtxMap[n<span class=\"number\">-1</span>] = INF;</span><br><span class=\"line\">        seen[<span class=\"number\">0</span>] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        seen[n<span class=\"number\">-1</span>] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"comment\">// bfs: O(N), TLE</span></span><br><span class=\"line\">        <span class=\"keyword\">using</span> pii = pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;;</span><br><span class=\"line\">        priority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;&gt;&gt; pq;</span><br><span class=\"line\">        pq.<span class=\"built_in\">push</span>(&#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">const</span> <span class=\"keyword\">auto</span>&amp; v : restrictions) &#123;</span><br><span class=\"line\">            pq.<span class=\"built_in\">push</span>(&#123;v[<span class=\"number\">1</span>], v[<span class=\"number\">0</span>] - <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">            rtxMap[v[<span class=\"number\">0</span>] - <span class=\"number\">1</span>] = v[<span class=\"number\">1</span>];</span><br><span class=\"line\">            seen[v[<span class=\"number\">0</span>] - <span class=\"number\">1</span>] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!pq.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> [height, idx] = pq.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">            <span class=\"comment\">// cout &lt;&lt; height &lt;&lt; &quot;, &quot; &lt;&lt; idx &lt;&lt; endl;</span></span><br><span class=\"line\">            pq.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (seen[idx]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            ans = <span class=\"built_in\">max</span>(ans, height);</span><br><span class=\"line\">            seen[idx] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">const</span> <span class=\"type\">int</span> j : &#123;<span class=\"number\">-1</span>, <span class=\"number\">1</span>&#125;) &#123;</span><br><span class=\"line\">                <span class=\"type\">const</span> <span class=\"type\">int</span> next = idx + j;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (next &gt;= n || next &lt; <span class=\"number\">0</span> || seen[next]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (j == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">auto</span> it = rtxMap.<span class=\"built_in\">lower_bound</span>(next);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (it != rtxMap.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">                        <span class=\"type\">const</span> <span class=\"type\">int</span> x = it-&gt;first;</span><br><span class=\"line\">                        it-&gt;second = <span class=\"built_in\">min</span>(it-&gt;second, height + x - idx);</span><br><span class=\"line\">                        pq.<span class=\"built_in\">push</span>(&#123;it-&gt;second, x&#125;);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">auto</span> it = rtxMap.<span class=\"built_in\">lower_bound</span>(idx);</span><br><span class=\"line\">                    <span class=\"comment\">// 2 5</span></span><br><span class=\"line\">                    <span class=\"comment\">// next = 4</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (it != rtxMap.<span class=\"built_in\">begin</span>()) &#123;</span><br><span class=\"line\">                        --it;</span><br><span class=\"line\">                        <span class=\"type\">const</span> <span class=\"type\">int</span> x = it-&gt;first;</span><br><span class=\"line\">                        it-&gt;second = <span class=\"built_in\">min</span>(it-&gt;second, height + idx - x);</span><br><span class=\"line\">                        pq.<span class=\"built_in\">push</span>(&#123;it-&gt;second, x&#125;);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> it = rtxMap.<span class=\"built_in\">begin</span>(); <span class=\"built_in\">next</span>(it) != rtxMap.<span class=\"built_in\">end</span>(); ++it) &#123;</span><br><span class=\"line\">            <span class=\"type\">const</span> <span class=\"type\">int</span> leftIdx = it-&gt;first, leftHeight = it-&gt;second;</span><br><span class=\"line\">            <span class=\"type\">const</span> <span class=\"type\">int</span> rightIdx = <span class=\"built_in\">next</span>(it)-&gt;first, rightHeight = <span class=\"built_in\">next</span>(it)-&gt;second;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (leftIdx + <span class=\"number\">1</span> == rightIdx) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"comment\">// cout &lt;&lt; leftIdx &lt;&lt; &quot;, &quot; &lt;&lt; leftHeight &lt;&lt; &quot;, &quot; &lt;&lt; rightIdx &lt;&lt; &quot;, &quot; &lt;&lt; rightHeight &lt;&lt; endl;</span></span><br><span class=\"line\">            <span class=\"type\">int</span> lo = <span class=\"built_in\">min</span>(leftHeight, rightHeight), hi = <span class=\"built_in\">min</span>(leftHeight + rightIdx - leftIdx, rightHeight + rightIdx - leftIdx);</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (lo &lt; hi) &#123;</span><br><span class=\"line\">                <span class=\"type\">const</span> <span class=\"type\">int</span> mid = lo + (hi - lo) / <span class=\"number\">2</span>;</span><br><span class=\"line\">                <span class=\"type\">bool</span> deter = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (mid - leftHeight &lt; rightIdx - leftIdx <span class=\"keyword\">and</span> mid - rightHeight &lt; rightIdx - leftIdx <span class=\"keyword\">and</span> mid - leftHeight + mid - rightHeight - <span class=\"number\">1</span> &lt; rightIdx - leftIdx) deter = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (deter) &#123;</span><br><span class=\"line\">                    lo = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    hi = mid;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// t, t, t, f, f</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ans = <span class=\"built_in\">max</span>(ans, lo - <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><code>m = restrictions.length</code><br />\n时间复杂度: O(m log m),<br />\n空间复杂度: O(m).</p>\n<p><a href=\"https://leetcode-cn.com/problems/maximum-building-height/solution/zui-gao-jian-zhu-gao-du-by-leetcode-solu-axbb/910208\">零神题解</a>里有2次扫描的算法。虽然时间复杂度是一样的，但实现比较简单，常数上会更好些。</p>\n",
            "tags": [
                "Competitive Programming"
            ]
        }
    ]
}