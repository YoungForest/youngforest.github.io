{
    "version": "https://jsonfeed.org/version/1",
    "title": "YoungForest's blog • All posts by \"intern\" tag",
    "description": "佛系更新；生活、学习",
    "home_page_url": "https://youngforest.github.io",
    "items": [
        {
            "id": "https://youngforest.github.io/2020/04/30/2021-summer-intern-interview-summary/",
            "url": "https://youngforest.github.io/2020/04/30/2021-summer-intern-interview-summary/",
            "title": "2020 暑期实习 求职总结",
            "date_published": "2020-04-30T08:51:34.000Z",
            "content_html": "<p>从在牛客网发暑期实习的第一篇面经开始，到现在已经过去近2个月了。中间陆陆续续参加了8个厂的招聘。岗位均为后端/服务器开发。base地点为北京。</p>\n<h2 id=\"失败\"><a class=\"markdownIt-Anchor\" href=\"#失败\"></a> 失败</h2>\n<h3 id=\"字节跳动\"><a class=\"markdownIt-Anchor\" href=\"#字节跳动\"></a> 字节跳动</h3>\n<p><a href=\"https://www.nowcoder.com/discuss/371946\">一面</a>就凉。字节跳动还是一家和我很有缘分，我也很喜欢的一家公司。去年参加过一次广告系统的暑期实习面试，经历残酷四面。面到lead力哲。最后因为实习时间不合适没去。去年暑假还参加了ByteDance 的夏令营。由于是长久以来的第一次面试，准备不足、发挥也不是很好。算法题 编辑距离 没做出来，遂一面即凉。</p>\n<h3 id=\"微软\"><a class=\"markdownIt-Anchor\" href=\"#微软\"></a> 微软</h3>\n<p>找了之前在微软工作的一位师兄，托他又联系到正在微软工作的一位同事，做了内推。18年时曾面过一次<a href=\"https://youngforest.github.io/2018/06/01/suzhou-microsoft-interview/\">苏州微软</a>, 当时水平有限，无奈地凉了。今年踌躇满志，想要一雪前耻。没想到同样翻船了。不过吸取了很重要的经验，不要吹牛打过比赛。<br />\n一面面试官问我打过什么比赛吗？我当时作死回答说，打过一些LeetCode、kickstart、codeforces、atcoder。实际上，只有LeetCode我是经常参加周赛，kickstart参加每月的轮次（如果时间合适的话）。其他平台的赛事加起来也只有几场。面试官因此误解了我的实力，认为是cf水平的（实际上，我cf的rating都不到1500）。只问了我系统设计的问题，没有手撕代码，我尽管在LeetCode上刷了900题，也没发发挥。<br />\n二面面试官上来就问了2道很难的算法题，感觉是准备给ACM选手的。都怪我一面时吹了牛，二面被安排了。</p>\n<ul>\n<li><a href=\"https://www.geeksforgeeks.org/closest-pair-of-points-using-divide-and-conquer-algorithm/\">find the closet point pair</a></li>\n<li>在平面上找到任意直线，将N个点分为数量相等的2部分</li>\n</ul>\n<h2 id=\"结束\"><a class=\"markdownIt-Anchor\" href=\"#结束\"></a> 结束</h2>\n<h3 id=\"谷歌\"><a class=\"markdownIt-Anchor\" href=\"#谷歌\"></a> 谷歌</h3>\n<p>通过了电话一面，但无奈因为疫情的原因，Google中国取消了暑期实习项目。我的面试进程也止于一面了。</p>\n<h3 id=\"钉钉\"><a class=\"markdownIt-Anchor\" href=\"#钉钉\"></a> 钉钉</h3>\n<p>因为之前以为蚂蚁金服是独立的公司，所以投了蚂蚁和钉钉。正式在阿里系统里投递时，才得知只能投递一个。因为蚂蚁在北京，遂选择了蚂蚁。录入系统前参加了一次面试。</p>\n<p><a href=\"https://www.nowcoder.com/discuss/375152\">钉钉一面</a></p>\n<h2 id=\"成功上岸\"><a class=\"markdownIt-Anchor\" href=\"#成功上岸\"></a> 成功上岸</h2>\n<h3 id=\"蚂蚁金服\"><a class=\"markdownIt-Anchor\" href=\"#蚂蚁金服\"></a> 蚂蚁金服</h3>\n<p>收到意向书。今年暑期情况不明，也不知道是否可以会北京参加实习。</p>\n<p><a href=\"https://www.nowcoder.com/discuss/377900\">一面</a><br />\n<a href=\"https://www.nowcoder.com/discuss/390413\">二面</a><br />\n<a href=\"https://www.nowcoder.com/discuss/392312\">三面</a><br />\n<a href=\"https://www.nowcoder.com/discuss/399613\">四面</a></p>\n<h3 id=\"米哈游\"><a class=\"markdownIt-Anchor\" href=\"#米哈游\"></a> 米哈游</h3>\n<p>通过了面试，但是因为暑假不可能去上海实习，遂拒绝了。</p>\n<p><a href=\"https://www.nowcoder.com/discuss/387235\">一面</a><br />\n<a href=\"https://www.nowcoder.com/discuss/399642\">二面</a><br />\n<a href=\"https://www.nowcoder.com/discuss/402613\">三面</a></p>\n<h2 id=\"进行中\"><a class=\"markdownIt-Anchor\" href=\"#进行中\"></a> 进行中</h2>\n<h3 id=\"腾讯\"><a class=\"markdownIt-Anchor\" href=\"#腾讯\"></a> 腾讯</h3>\n<p>由于工作岗位base地点的原因，换着面了很多组。都聊到HR了，但北京这边就是恰好没有HC。</p>\n<p><a href=\"https://www.nowcoder.com/discuss/378468\">一面</a><br />\n<a href=\"https://www.nowcoder.com/discuss/384452\">二面</a><br />\n<a href=\"https://www.nowcoder.com/discuss/385528\">三面</a><br />\n<a href=\"https://www.nowcoder.com/discuss/386661\">四面</a><br />\n<a href=\"https://www.nowcoder.com/discuss/387415\">五面</a><br />\n<a href=\"https://www.nowcoder.com/discuss/396952\">七面</a><br />\n<a href=\"https://www.nowcoder.com/discuss/406795\">八面</a><br />\n<a href=\"https://www.nowcoder.com/discuss/409853\">九面</a><br />\n<a href=\"https://www.nowcoder.com/discuss/419602\">笔试</a></p>\n<h3 id=\"华为\"><a class=\"markdownIt-Anchor\" href=\"#华为\"></a> 华为</h3>\n<p>参加了线上的笔试，难度不大。LeetCode medium吧。</p>\n<h3 id=\"美团\"><a class=\"markdownIt-Anchor\" href=\"#美团\"></a> 美团</h3>\n<p>参加了线上笔试。效果不佳。5道编程题，只A了2道，有2道过了一半，还有最后一道最后一直没有调出来。题目看起来难度不是很大，但做的效果实在不行。感觉要凉。<br />\n美团还是实验室亲师兄推我的，感觉辜负了期望。</p>\n<h4 id=\"一面\"><a class=\"markdownIt-Anchor\" href=\"#一面\"></a> 一面</h4>\n<p>由于2位很强的亲师兄在美团，我还是被抬进面试了。而且面试也没问很难的题目，感觉被大佬担保了。瑟瑟发抖。</p>\n<p>字符串查找。以为要写KMP，这不抄模版哪里是最后10min能写出来的。最后解释了下，写了个N*M的brute force的解法。</p>\n<h4 id=\"二面\"><a class=\"markdownIt-Anchor\" href=\"#二面\"></a> 二面</h4>\n<p>twoSum，找到所有和为target的两数下标对。</p>\n",
            "tags": [
                "intern"
            ]
        },
        {
            "id": "https://youngforest.github.io/2020/03/20/Mihayo-backend-intern-interview/",
            "url": "https://youngforest.github.io/2020/03/20/Mihayo-backend-intern-interview/",
            "title": "米哈游 服务器开发 暑期实习",
            "date_published": "2020-03-20T08:29:48.000Z",
            "content_html": "<h1 id=\"一面\"><a class=\"markdownIt-Anchor\" href=\"#一面\"></a> 一面</h1>\n<p>time: 2020-03-20 16:29:48</p>\n<p>上周五参加了在牛客网上的笔试。题目不难，分为计算机基础、算法 和 系统设计。<br />\n计算机基础靠着本科的认真学习，没啥问题。算法也属于LeetCode medium难度，很快AC了。<br />\n系统设计倒是难倒我了，并不擅长，也没有准备。需要设计一个 MOBA游戏的匹配机制，包括单人和组队。之前完全没想过，瞎写了一通。<br />\n昨天收到电话，说我通过了笔试，约了今天下午2:30的电话面试。</p>\n<p>本科有个可爱的大佬舍友最后去米哈游了。我虽然对游戏不感冒，但本着多面试，多总结的态度，也报名了其春招内推。</p>\n<p>面试预计30min, 实际40min。</p>\n<p>自我介绍 + 项目经历 + 计算机基础。</p>\n<p>计算机基础又分为：</p>\n<ul>\n<li>C++</li>\n<li>操作系统</li>\n<li>数据库</li>\n<li>计算机网络</li>\n<li>设计模式</li>\n</ul>\n<p>我不会的有：</p>\n<ul>\n<li>TCP 3次挥手，最后的time_wait的作用</li>\n<li>C++ 父类析构函数为什么必需是虚函数</li>\n<li>MySQL\n<ul>\n<li>事务 及 ACID</li>\n<li>Block 和 Tag 区别</li>\n<li>BiLog是什么</li>\n<li>timestamp, datetime的区别</li>\n</ul>\n</li>\n<li>说出常用的设计模式，我讲了几个，但面试官好像并不满意</li>\n</ul>\n<p>没有手撕代码环节，稍微有些失落。</p>\n<h1 id=\"二面\"><a class=\"markdownIt-Anchor\" href=\"#二面\"></a> 二面</h1>\n<p>time: 2020-04-03 12:54:20</p>\n<p>之前<a href=\"https://www.nowcoder.com/discuss/387235\">一面的帖子</a>。</p>\n<p>二面距离一面过去了整整2周。中间HR还打电话希望我能到上海onsite二面。我只好如实说 学校现在不允许跨省区流动。贵司心也是大。最后还是按计划视频面试。</p>\n<p>整场面试持续50min。难度并不大，但由于是游戏公司，所以很多问题和项目是之前没有遇到或想过。</p>\n<h2 id=\"算法\"><a class=\"markdownIt-Anchor\" href=\"#算法\"></a> 算法</h2>\n<p>合并2个有序链表。</p>\n<h2 id=\"项目\"><a class=\"markdownIt-Anchor\" href=\"#项目\"></a> 项目</h2>\n<ul>\n<li>Linux下的项目。我告诉他我大多数全是Linux。</li>\n<li>之前大四做的一个游戏（软件工程作业）<a href=\"https://github.com/xxr5566833/Game\">github</a>。</li>\n<li>内存泄漏诊断</li>\n<li>protobuf</li>\n</ul>\n<h2 id=\"计算机基础\"><a class=\"markdownIt-Anchor\" href=\"#计算机基础\"></a> 计算机基础</h2>\n<ul>\n<li>如何诊断网络问题？</li>\n<li>一致性哈希，增桶、减桶。</li>\n<li>单例模式，带模版的单例，多线程下的。这是共享屏幕在本地IDE实现的。</li>\n</ul>\n<h1 id=\"三面\"><a class=\"markdownIt-Anchor\" href=\"#三面\"></a> 三面</h1>\n<p>time: 2020-04-08 12:58:36</p>\n<p><a href=\"https://www.nowcoder.com/discuss/387235\">一面</a><br />\n<a href=\"https://www.nowcoder.com/discuss/399642\">二面</a></p>\n<h2 id=\"语言基础\"><a class=\"markdownIt-Anchor\" href=\"#语言基础\"></a> 语言基础</h2>\n<p>实现智能指针shared_ptr的构造、析构函数。<br />\n问：为什么count要用指针？</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typename</span>&lt;T&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">shared_ptr</span> &#123;</span><br><span class=\"line\">    T* data = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span>* count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">shared_ptr</span>(<span class=\"type\">const</span> shared_ptr&amp; a) &#123;</span><br><span class=\"line\">        data = a-&gt;data;</span><br><span class=\"line\">        count = a-&gt;count;</span><br><span class=\"line\">        ++(*count);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">shared_ptr</span>(T* t) &#123;</span><br><span class=\"line\">        data = t;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t) &#123;</span><br><span class=\"line\">            count = <span class=\"keyword\">new</span> <span class=\"built_in\">uint32_t</span>();</span><br><span class=\"line\">            count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    shared_ptr <span class=\"keyword\">operator</span> = (<span class=\"type\">const</span> shared_ptr&amp; a) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a == <span class=\"keyword\">this</span>) ;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">                --(*count);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (*count == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">delete</span> data;</span><br><span class=\"line\">                    <span class=\"keyword\">delete</span> count;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            data = a-&gt;data;</span><br><span class=\"line\">            count = a-&gt;count;</span><br><span class=\"line\">            ++(*count);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~<span class=\"built_in\">shared_ptr</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (data) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (*count &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                --(*count);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">delete</span> data;</span><br><span class=\"line\">                <span class=\"keyword\">delete</span> count;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typename</span>&lt;T&gt;</span></span><br><span class=\"line\"><span class=\"function\">shared_ptr&lt;T&gt; <span class=\"title\">make_shared</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">ret</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">T</span>());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"算法-2\"><a class=\"markdownIt-Anchor\" href=\"#算法-2\"></a> 算法</h2>\n<blockquote>\n<p>1，7，10 三种面值硬币。<br />\n给定一个n，最少硬币凑出这个值。</p>\n</blockquote>\n<p>我刚开始想要贪心，但面试官很快给出反例。</p>\n<blockquote>\n<p>15</p>\n</blockquote>\n<p>之后给出一个DP的O(N)的解法，面试官再提示N很大时，有何优化的思路。进而提出先mod最大公倍数，再对余数DP的O(1)解法。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">dp</span>(n) = <span class=\"built_in\">min</span>(</span><br><span class=\"line\">    <span class=\"built_in\">dp</span>(n - <span class=\"number\">1</span>) + <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"built_in\">dp</span>(n - <span class=\"number\">7</span>) + <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"built_in\">dp</span>(n - <span class=\"number\">10</span>) + <span class=\"number\">1</span>,</span><br><span class=\"line\">); <span class=\"keyword\">if</span> n &gt;= <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"number\">1</span> * <span class=\"number\">7</span> * <span class=\"number\">10</span> = <span class=\"number\">70</span></span><br><span class=\"line\"><span class=\"built_in\">O</span> (<span class=\"number\">7</span> + <span class=\"number\">1</span>) = <span class=\"built_in\">O</span>(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"数据结构设计\"><a class=\"markdownIt-Anchor\" href=\"#数据结构设计\"></a> 数据结构设计</h2>\n<p>设计一个百万量级排行榜 ，支持插入，按uid查找分数，按uid查找名次，按名次查找uid.<br />\nfollow up: 分数相同时，按照上榜时间排序。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">order statisc tree</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getSize</span><span class=\"params\">(TreeNode* node)</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">set</span><br><span class=\"line\">multiset</span><br><span class=\"line\"></span><br><span class=\"line\">order_statisc_tree&lt;pair&lt;分数, 时间&gt;，uid&gt;：按名次查uid log N</span><br><span class=\"line\">hashmap&lt;uid, pair&lt;分数,时间&gt;&gt;: 按uid查分数 <span class=\"built_in\">O</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">按uid查排名 <span class=\"built_in\">O</span>(log N)</span><br><span class=\"line\">insert: <span class=\"built_in\">O</span>(<span class=\"number\">1</span> + log N)</span><br></pre></td></tr></table></figure>\n<h2 id=\"计算机基础-2\"><a class=\"markdownIt-Anchor\" href=\"#计算机基础-2\"></a> 计算机基础</h2>\n<p>Linux熟不<br />\n排查线上某进程CPU为100%。</p>\n<h2 id=\"其他\"><a class=\"markdownIt-Anchor\" href=\"#其他\"></a> 其他</h2>\n<p>游戏公司的特别之处。<br />\n玩过我们公司的游戏吗？（否）那平时玩什么游戏。</p>\n<p>最后面试官问我能不能毕业前提前来实习。我说不能，没发去上海。</p>\n<p>问题：贵司服务器开发内部分组情况。不同产品的后端共用情况。</p>\n",
            "tags": [
                "intern",
                "Mihayo"
            ]
        },
        {
            "id": "https://youngforest.github.io/2020/03/11/Tencent-WeChat-backend-intern-interview/",
            "url": "https://youngforest.github.io/2020/03/11/Tencent-WeChat-backend-intern-interview/",
            "title": "腾讯 微信事业部 暑期实习生 面试",
            "date_published": "2020-03-11T02:28:43.000Z",
            "content_html": "<h1 id=\"一面\"><a class=\"markdownIt-Anchor\" href=\"#一面\"></a> 一面</h1>\n<p>time: 2020-03-11 10:28:43</p>\n<p>上周HR联系沟通了下意向工作城市，但是没约具体面试时间。</p>\n<p>昨晚8点半忽然接到广东深圳的电话，问是否方便，直接开始了面试（惊不惊喜，刺不刺激？）。面试官网还不太好，中间出了不少问题。比如手撕代码时，对方网站内容不能及时刷新。</p>\n<h2 id=\"计算机基础\"><a class=\"markdownIt-Anchor\" href=\"#计算机基础\"></a> 计算机基础</h2>\n<h3 id=\"分布式-深度学习\"><a class=\"markdownIt-Anchor\" href=\"#分布式-深度学习\"></a> 分布式、深度学习</h3>\n<p>BN层，dropout。如何计算？<br />\nBN: mean, valence。</p>\n<p>单机训练 和 多机训练 区别。</p>\n<p>多机训练时，如何把各个单机得到的loss reduce下。</p>\n<p>数据并行训练 和 模型并行训练。</p>\n<p>百亿级特征训练。百亿级是指？</p>\n<h3 id=\"语言基础-c\"><a class=\"markdownIt-Anchor\" href=\"#语言基础-c\"></a> 语言基础 C++</h3>\n<p>hashtable实现</p>\n<p>shared_ptr, unique_ptr, weak_ptr 区别</p>\n<p>move语义</p>\n<h2 id=\"算法题\"><a class=\"markdownIt-Anchor\" href=\"#算法题\"></a> 算法题</h2>\n<p>二叉树深度。</p>\n<p>二维数组，横竖都非递减，寻找目标值。<code>O(m + n)</code>。<a href=\"https://leetcode.com/problems/search-a-2d-matrix-ii/description/\">leetcode240</a></p>\n<h2 id=\"反问\"><a class=\"markdownIt-Anchor\" href=\"#反问\"></a> 反问</h2>\n<p>问题：贵组的工作内容，为何问如此多深度学习和分布式的问题？</p>\n<p>答：大规模分布式训练框架，技术栈：C++，Python</p>\n<h1 id=\"二面\"><a class=\"markdownIt-Anchor\" href=\"#二面\"></a> 二面</h1>\n<p>time: 2020-03-17 21:59:18</p>\n<p>等了一周，终于等来了第一个复试。和上次面我的面试官是同组的。应该是因为技术栈比较契合，所以被分布式训练框架组把简历给捞出来了。</p>\n<p>首先问了很多项目和实习经历相关的内容。比如最有挑战性的任务，遇到的困难，怎么解决的？我按照传说中的STAR方法回答了，但是面试官好像并不是很满意。我平时最不擅长讲这些，面试多了也学会一点。还是手撕代码来的干脆和直接（以Google为代表，上来就是干），就像八股文一样，也好准备。</p>\n<p>基础知识:</p>\n<ul>\n<li>shared_ptr, unique-ptr的区别</li>\n<li>死锁的必要条件和解决方法</li>\n<li>TCP，UDP的区别</li>\n<li>TCP如何保证可靠</li>\n</ul>\n<p>分布式：</p>\n<ul>\n<li>pytorch的架构、类和C++接口的封装，语言之间的调用</li>\n<li>多机多卡训练如何更新参数</li>\n</ul>\n<p>算法题：</p>\n<p>给定一个很长的有序数组，和另一个无序数组，将无序数组插入有序数组中，需要保证结果仍然有序。</p>\n<p>Given sorted vector sorted_a and unsorted vector b;   size of a is about 1G<br />\nvector<int> sorted_a;<br />\nvector<int> b;<br />\ninsert b to sorted_a as fast as possible, result sorted_a should be sorted, too.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insertSortedVector</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; sorted_a, vector&lt;<span class=\"type\">int</span>&gt;&amp; b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sorted_a.<span class=\"built_in\">emtpy</span>() || b.<span class=\"built_in\">empty</span>()) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(b.<span class=\"built_in\">begin</span>(), b.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        <span class=\"type\">int</span> a_tail = sorted_a.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> b_tail = b.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">        sorted_a.<span class=\"built_in\">resize</span>(sorted_a.<span class=\"built_in\">size</span>() + b.<span class=\"built_in\">size</span>()); <span class=\"comment\">// 可能有 sorted_a.size()</span></span><br><span class=\"line\">        <span class=\"type\">int</span> after_tail = sorted_a.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (a_tail &gt;= <span class=\"number\">0</span> &amp;&amp; b_tail &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sorted_a[a_tail] &gt; b[b_tail]) &#123;</span><br><span class=\"line\">            sorted_a[after_tail] = sorted_a[a_tail];</span><br><span class=\"line\">            --a_tail;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            sorted_a[after_tail] = b[b_tail];</span><br><span class=\"line\">            --b_tail;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        --after_tail;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (b_tail &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        sorted_a[after_tail] = b[b_tail];</span><br><span class=\"line\">        --b_tail;</span><br><span class=\"line\">        --after_tail</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time: O(a.size() + b.size() * log b.size())<br />\nSpace: O(1)</p>\n<p>写完代码后让我不停的优化，提示不是在时间复杂度级别的优化。我找了好几处（上面的代码是我的最终版本），最后才让面试官满意。</p>\n<h1 id=\"三面\"><a class=\"markdownIt-Anchor\" href=\"#三面\"></a> 三面</h1>\n<p>time: 2020-03-19 09:06:13</p>\n<p>昨天下午刚刚结束二面，今天下午接到HR的电话，约了晚上8点的面试。通过牛客网的平台，视频面试+手撕代码。共1个小时20分钟。</p>\n<p>上来简短的自我介绍之后就开始了手撕代码了，我喜欢。共4道题目,都不难，LeetCode Easy/Medium水平。就是前2题一定要用C写比较不舒服。</p>\n<p>手撕了50min代码，开始基础知识问答，包括操作系统、计算机网络、数据库、数据结构等。面试官那里估计有一个问题列表，问的很快，很多。我回答后就记下些什么。我没有准备过计算机基础的面试内容，全靠本科时认真学习残留下来的那些知识。大多数都足够了。印象深刻的只有没答上来的：</p>\n<ul>\n<li>TCP 拥塞控制 和 流量控制 的区别和实现</li>\n<li>数据库中 聚簇索引 和 普通索引的区别</li>\n<li>IO的异步、阻塞、多路复用 的区别</li>\n</ul>\n<p>接下来又问了之前的实习和项目经历。我写了5个，问了3个，问的还很细。</p>\n<p>问完之后，面试官很干脆的就结束了面试。我从高强度的面试状态中久久不能恢复。</p>\n<p>3次面试2次都是晚上进行，加班状态可以看到。只有3面的面试官开了视频，看到大佬的发际线，我感觉自己实力实在太弱了。</p>\n<h1 id=\"四面\"><a class=\"markdownIt-Anchor\" href=\"#四面\"></a> 四面</h1>\n<p>time: 2020-03-19 23:53:31</p>\n<p>昨天晚上刚刚结束了三面，今天早上收到四面的电话，约了晚上的面试。</p>\n<p>上来先刚了3道算法题，我喜欢。</p>\n<p>- 递增循环整数数组，从里面找出最小的元素</p>\n<ul>\n<li>在二叉排序树上面找出第3大的节点</li>\n<li>打印变长为n的回形矩阵</li>\n</ul>\n<p>然后就问了项目和实习经历，快手的2个项目和HAWQ修改BUG的经历。</p>\n<p>问了面试官，join.qq.com上的状态为什么只有1次面试的状态。<br />\n答曰：同一个候选人，会被不同的组挑到，然后面试。怪不得1面、2面 和 3面、4面无论是面试风格、问题、还是平台都有所区别。</p>\n<p>1、2面是明显的分布式框架组的。3、4面可能不是，忘记问了。</p>\n<p>下午还参加了微软SWE intern的面试，当时就觉得凉了，晚上果然收到Thank you Letter. 一首凉凉送给自己。秋招加油，再接再厉！</p>\n<h1 id=\"五面\"><a class=\"markdownIt-Anchor\" href=\"#五面\"></a> 五面</h1>\n<p>time: 2020-03-20 17:40:42</p>\n<p>今天面完米哈游后，正在做快手的评测，忽然收到要半个小时后5点的电话面试。</p>\n<p>说实话，面到第五面我已经心力交瘁了，想要疯狂吐槽了。不过五面十分简单，只持续了15min。</p>\n<p>自我介绍 + 项目 + 计算机基础。</p>\n<p>计算机基础问了三、四面我没答上来的问题，应该是故意的。不过好在我每次面试完都会进行总结，复习没答上来的知识。</p>\n<p>你认为你的优点和缺点是啥？</p>\n<ul>\n<li>优点：计算机基础扎实、算法没问题</li>\n<li>缺点：不适合科研，创新、创造能力不足</li>\n</ul>\n<p>之前实习换公司的原因。<br />\n可以实习的时间和方式？</p>\n<p>接下来等HR面。</p>\n<p>他是 微信搜索服务 组的。三、四面 也是。前2面是分布式框架组的，无论是面试方式还是内容都有所不同。他说应该是 分布式训练框架组 我没过，然后简历释放出来给了他们组。他只能看到三、四面的面试评价，跨组的就是不透明的。我确实对分布式训练的基础知识和经验不足。<br />\n我也能理解为啥要有5次面试了。</p>\n<h1 id=\"七面\"><a class=\"markdownIt-Anchor\" href=\"#七面\"></a> 七面</h1>\n<p>time: 2020-03-31 19:22:14</p>\n<p>上周三约了HR面试，闲聊了半天，和技术面的套路差别很大。因为我说我实习想在北京，所以又约了这周一（今天）下午的一次北京同事的技术面试。北京这边应该就只有一个技术面试，还有HR面试。</p>\n<p>视频面试采用牛客网平台，分为 项目、算法、数据结构、计算机基础。</p>\n<h2 id=\"算法题-2\"><a class=\"markdownIt-Anchor\" href=\"#算法题-2\"></a> 算法题</h2>\n<blockquote>\n<p>逛街<br />\n小Q在周末的时候和他的小伙伴来到大城市逛街，一条步行街上有很多高楼，共有n座高楼排成一行。<br />\n小Q从第一栋一直走到了最后一栋，小Q从来都没有见到这么多的楼，所以他想知道他在每栋楼的位置处能看到多少栋楼呢？（当前面的楼的高度大于等于后面的楼时，后面的楼将被挡住）<br />\n输入描述<br />\n输入第一行将包含一个数字n，代表楼的栋数，接下来的一行将包含n个数字wi(1&lt;=i&lt;=n)，代表每一栋楼的高度。<br />\n1&lt;=n&lt;=100000;<br />\n1&lt;=wi&lt;=100000;<br />\n输出描述<br />\n输出一行，包含空格分割的n个数字vi，分别代表小Q在第i栋楼时能看到的楼的数量。<br />\n示例1<br />\n输入<br />\n6<br />\n5 3 8 3 2 5<br />\n输出<br />\n3 3 5 4 4 4<br />\n说明<br />\n当小Q处于位置3时，他可以向前看到位置2,1处的楼，向后看到位置4,6处的楼，加上第3栋楼，共可看到5栋楼。当小Q处于位置4时，他可以向前看到位置3处的楼，向后看到位置5,6处的楼，加上第4栋楼，共可看到4栋楼。</p>\n</blockquote>\n<p>LeetCode medium难度，秒杀，正反使用2次单调递减栈即可。需要注意的是，看到的楼包括当前楼，所以当前楼会正反计算2次，最后需要减1。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span>  std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">height</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">        cin &gt;&gt; height[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">ans</span><span class=\"params\">(n, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    stack&lt;<span class=\"type\">int</span>&gt; s;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> process = [&amp;](<span class=\"type\">int</span> i) -&gt; <span class=\"type\">void</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!s.<span class=\"built_in\">empty</span>() &amp;&amp; height[s.<span class=\"built_in\">top</span>()] &lt;= height[i])  &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> t = s.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">            s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            ++ans[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        s.<span class=\"built_in\">push</span>(i);</span><br><span class=\"line\">        ans[i] += s.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">process</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!s.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">        s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = n - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; --i) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">process</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">        -- ans[i]; <span class=\"comment\">// delete repeated self(count twice)</span></span><br><span class=\"line\">        cout &lt;&lt; ans[i] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"数据结构\"><a class=\"markdownIt-Anchor\" href=\"#数据结构\"></a> 数据结构</h2>\n<p>设计一个支持序列化和反序列话的HashMap。我之前没有接触过类似问题，了解过一些序列化的知识。就设计了一个 线型探查版 的hashmap, 因为这样所有数据都可以存储在一个数组中，方便序列化。</p>\n<p>为了方便实现，并没有考虑泛化和扩容，虽然提前和面试官沟通过。面试官还是抨击了线型探查对空间利用有问题，说是单个bucket中有过多元素时会有问题。对此我并不苟同，然后有讨论了半天。最后他有怼我说，没别人实现的好，insert时没有考虑扩容。因为我之前已经和他沟通过不考虑扩容和泛化以简化问题。对此，面试官不免有些为了怼而怼的嫌疑，我是并不信服的。我问他别人怎么实现，主流方法如何？他只是说没有标准答案。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">HashMap</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> capity = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">7</span>;</span><br><span class=\"line\">    array&lt;<span class=\"type\">int</span>, capity&gt; data;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> NOT_EXIST = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">HashMap</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(data.<span class=\"built_in\">data</span>(), capity * <span class=\"built_in\">sizeof</span>(<span class=\"type\">int</span>), <span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">searilize</span><span class=\"params\">(<span class=\"type\">const</span> string&amp; file_name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 把data内容写到文件中</span></span><br><span class=\"line\">        <span class=\"function\">std::ofstream <span class=\"title\">fout</span> <span class=\"params\">(file_name, std::fstream::binary)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span>&amp; d = <span class=\"keyword\">static_cast</span>&lt;array&lt;<span class=\"type\">char</span>, capity*<span class=\"built_in\">sizeof</span>(<span class=\"type\">int</span>)&gt;&gt;(data)</span><br><span class=\"line\">        std::<span class=\"built_in\">copy</span>(d.<span class=\"built_in\">begin</span>(), d.<span class=\"built_in\">end</span>(), std::<span class=\"built_in\">istreambuf_iterator</span>&lt;<span class=\"type\">char</span>&gt;(fout));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">load</span><span class=\"params\">(<span class=\"type\">const</span> string&amp; file_name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 把文件内容读到data中</span></span><br><span class=\"line\">        <span class=\"function\">std::ifstream <span class=\"title\">input</span><span class=\"params\">(file_name, std::ios::binary )</span></span>;</span><br><span class=\"line\">        std::<span class=\"built_in\">copy</span>( </span><br><span class=\"line\">            std::<span class=\"built_in\">istreambuf_iterator</span>&lt;<span class=\"type\">char</span>&gt;(input), </span><br><span class=\"line\">            std::<span class=\"built_in\">istreambuf_iterator</span>&lt;<span class=\"type\">char</span>&gt;( ),</span><br><span class=\"line\">            <span class=\"keyword\">static_cast</span>&lt;array&lt;<span class=\"type\">char</span>, capity*<span class=\"built_in\">sizeof</span>(<span class=\"type\">int</span>)&gt;&gt;(data).<span class=\"built_in\">begin</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"type\">int</span> key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> hashcode = <span class=\"built_in\">hash</span>(key);</span><br><span class=\"line\">        <span class=\"type\">int</span> bucket = hashcode &amp; <span class=\"number\">6</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = bucket; i &lt; <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">6</span>; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (data[i] == key) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> data[i + (<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">6</span>)];</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (data[i] == NOT_EXIST) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> NOT_EXIST;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> NOT_EXIST;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span> <span class=\"params\">(<span class=\"type\">int</span> key, <span class=\"type\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> hashcode = <span class=\"built_in\">hash</span>(key);</span><br><span class=\"line\">        <span class=\"type\">int</span> bucket = hashcode &amp; <span class=\"number\">6</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = bucket; i &lt; <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">6</span>; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (data[i] == NOT_EXIST || data[i] == key) &#123;</span><br><span class=\"line\">                data[i] = key;</span><br><span class=\"line\">                data[i + (<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">6</span>)] = value;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"计算机基础-2\"><a class=\"markdownIt-Anchor\" href=\"#计算机基础-2\"></a> 计算机基础</h2>\n<ul>\n<li>多态。构造函数不能虚函数，析构函数可以虚函数。</li>\n<li>并发了解。</li>\n</ul>\n<h2 id=\"其他\"><a class=\"markdownIt-Anchor\" href=\"#其他\"></a> 其他</h2>\n<p>自己的优点：<br />\n我讲了 基础扎实、算法好 （刷题多）。<br />\n他讲了他对刷题的看法。虽然不排斥刷题，但说了很多ACM选手的问题，工程实现考虑不周。感觉他有很多怨言呀。</p>\n<p>他还问了为什么本科时成绩好，研究生时不那么好？<br />\n我如实说了，研究生成绩不重要。</p>\n<p>面试官小哥哥早年也在北航读过书，最后我还聊了一下我实验室的现状。</p>\n<h1 id=\"八面-又一次迷一般的面试-差评\"><a class=\"markdownIt-Anchor\" href=\"#八面-又一次迷一般的面试-差评\"></a> 八面 又一次迷一般的面试 差评</h1>\n<p>time: 2020-04-13 12:59:03</p>\n<p>今天(4.13)上午11:30接到电话，随即开展了40min的面试。根本没有提前约我的时间，让我手头的很多事情都中断了。而且他说之前他们组的同事应该已经给我一面了。但是之前腾讯的7次面试都是别的组面的。</p>\n<h2 id=\"内容\"><a class=\"markdownIt-Anchor\" href=\"#内容\"></a> 内容</h2>\n<p>自我介绍，项目介绍。</p>\n<p>各种C++的容器的API的问题，时间复杂度。</p>\n<p>竟然让我设计一个推荐系统，我内心…只是简单说了下一些常见的推荐算法的实现。</p>\n<h2 id=\"2道算法题\"><a class=\"markdownIt-Anchor\" href=\"#2道算法题\"></a> 2道算法题</h2>\n<blockquote>\n<ol>\n<li>实现 strcpy 拷贝字符串</li>\n</ol>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">strcpy</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>* source, <span class=\"type\">const</span> <span class=\"type\">char</span>* destination)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (source == <span class=\"literal\">NULL</span> || destination == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (source[i] != <span class=\"string\">&#x27;\\0&#x27;</span> &amp;&amp; source + i != destination) &#123;</span><br><span class=\"line\">        destination[i] = source[i];</span><br><span class=\"line\">        ++i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ol start=\"2\">\n<li>10亿个整型，查找其中不重复的数字</li>\n</ol>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">findUnique</span><span class=\"params\">(<span class=\"type\">const</span> vector&lt;<span class=\"type\">int</span>&gt;&amp; v)</span> </span>&#123;    <span class=\"comment\">// 4G</span></span><br><span class=\"line\">    bitset&lt;1 &lt;&lt; 32&gt; seen;    <span class=\"comment\">// 4G</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i : v) &#123;</span><br><span class=\"line\">        seen.<span class=\"built_in\">set</span>(<span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">unsigned</span> <span class=\"type\">int</span>&gt;(i));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; ans; <span class=\"comment\">// 4 G = 10亿 * 4</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; seen.<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!seen[i]) &#123;</span><br><span class=\"line\">            ans.<span class=\"built_in\">insert</span>(<span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">int</span>&gt;(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>面试官是 微信kitcup推荐系统组的。我直接提意见说下次面试提前约，这次十分仓促，状态也不好。<br />\n这个面试官的态度也是我遇到过的最差的一批，多次和他沟通时，他说“不要问我”。很多问题问的也是不明所以，给他差评。真想投诉他。</p>\n<h1 id=\"九面\"><a class=\"markdownIt-Anchor\" href=\"#九面\"></a> 九面</h1>\n<p>本次面试大概只持续了10min，问了一道“判断链表是否是回文”的算法题。要求时间复杂度O(N), 空间复杂度O(1)。LeetCode medium难度吧。</p>\n<p>之后问我，看到我之前面了腾讯很多次，都到HR面了。为什么没有签？我说是因为工作地点冲突的原因。我期望在北京，他们组都在深圳。面试官说，那我也是面深圳的岗位。你填报志愿填的服从调剂。然后也没必要继续面下去了。史上最快的面试！！😂</p>\n<p>我之后去官网看了下，还真是，重新改了下，不服从调剂了。希望北京的组能捞起我。不知道组里的工程师能不能定向捞人呀，不然可以联系一下在腾讯工作的同学和师兄。</p>\n<h1 id=\"426-笔试\"><a class=\"markdownIt-Anchor\" href=\"#426-笔试\"></a> 4.26 笔试</h1>\n<p>TX的笔试难度还是挺大的，尤其是第2题和第3题。不过TX并不生产算法题，它只是算法题的搬运工。</p>\n<h2 id=\"2-寻找2个点集中最近的对\"><a class=\"markdownIt-Anchor\" href=\"#2-寻找2个点集中最近的对\"></a> 2. 寻找2个点集中最近的对</h2>\n<p><a href=\"https://www.acwing.com/problem/content/121/\">原题链接</a><br />\n大雪菜提供了<a href=\"https://www.acwing.com/video/96/\">视频讲解</a>。简而言之，就是把2个点集的点分别做个标记，然后利用一个点集内找最近对的算法（不同标记的点，相当于无穷远）。<a href=\"https://www.geeksforgeeks.org/closest-pair-of-points-using-divide-and-conquer-algorithm/\">一个点集内找最近对</a>就是一个十分经典的问题了，采用分治可以解决。</p>\n<p>时间复杂度: O(N log N), 空间复杂度: O(N).</p>\n<h2 id=\"2-卡牌翻转\"><a class=\"markdownIt-Anchor\" href=\"#2-卡牌翻转\"></a> 2. 卡牌翻转</h2>\n<p><a href=\"https://atcoder.jp/contests/keyence2020/tasks/keyence2020_d\">原题 Swap and Flip</a></p>\n<p>动态规划。DP[mask][i]表示mask中的牌在最左边，第i个牌在这些牌中的最后，保证非降的最小操作数。<br />\n<img src=\"https://uploadfiles.nowcoder.com/images/20200428/407266647_1588073288778_01811641BAED0EC338B3EE5B829175F4\" alt=\"图片说明\" title=\"图片标题\" /><br />\n时间复杂度: O(n^2 * 2^n),<br />\n空间复杂度: O(n * 2 ^ n)</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> INF = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> N;</span><br><span class=\"line\">    cin &gt;&gt; N;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">A</span><span class=\"params\">(N)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">B</span><span class=\"params\">(N)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; N; ++i) &#123;</span><br><span class=\"line\">        cin &gt;&gt; A[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; N; ++i) &#123;</span><br><span class=\"line\">        cin &gt;&gt; B[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">dp</span>((<span class=\"number\">1</span> &lt;&lt; N), <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(N, INF));</span><br><span class=\"line\">    <span class=\"comment\">// dp[mask][i]: the minimum operation when cards in mask are in leftmost and the ith card is in the end</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; N; ++i) &#123;</span><br><span class=\"line\">        dp[<span class=\"number\">1</span> &lt;&lt; i][i] = <span class=\"number\">0</span>;  <span class=\"comment\">// there is no card in leftmost whose id larger than i</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> s = <span class=\"number\">0</span>; s &lt; (<span class=\"number\">1</span> &lt;&lt; N); ++s) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; N; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (((s &gt;&gt; i) &amp; <span class=\"number\">1</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;                  <span class=\"comment\">// i is not in state</span></span><br><span class=\"line\">            <span class=\"type\">int</span> c = __builtin_popcount(s); <span class=\"comment\">// card number in s</span></span><br><span class=\"line\">            <span class=\"type\">int</span> value_i = (c % <span class=\"number\">2</span>) == (i % <span class=\"number\">2</span>) ? B[i] : A[i];</span><br><span class=\"line\">            <span class=\"type\">int</span> cost = c; <span class=\"comment\">// the number of card in s, whose id is larger than j</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; N; ++j) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (((s &gt;&gt; j) &amp; <span class=\"number\">1</span>) == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    --cost;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>; <span class=\"comment\">// j is in state already</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"type\">int</span> value_j = (j % <span class=\"number\">2</span>) == (c % <span class=\"number\">2</span>) ? A[j] : B[j];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (value_j &gt;= value_i) &#123;</span><br><span class=\"line\">                    dp[s | (<span class=\"number\">1</span> &lt;&lt; j)][j] =</span><br><span class=\"line\">                        <span class=\"built_in\">min</span>(dp[s | (<span class=\"number\">1</span> &lt;&lt; j)][j], dp[s][i] + cost);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = INF;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; N; ++i) &#123;</span><br><span class=\"line\">        ans = <span class=\"built_in\">min</span>(ans, dp[(<span class=\"number\">1</span> &lt;&lt; N) - <span class=\"number\">1</span>][i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ans = ans &gt;= INF ? <span class=\"number\">-1</span> : ans;</span><br><span class=\"line\">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "intern",
                "Tencent"
            ]
        },
        {
            "id": "https://youngforest.github.io/2020/03/09/Alibaba-Ant-backend-intern-interview/",
            "url": "https://youngforest.github.io/2020/03/09/Alibaba-Ant-backend-intern-interview/",
            "title": "阿里巴巴 蚂蚁金服 后端开发 暑期实习生",
            "date_published": "2020-03-09T08:45:44.000Z",
            "content_html": "<h1 id=\"一面\"><a class=\"markdownIt-Anchor\" href=\"#一面\"></a> 一面</h1>\n<p>time: 2020-03-09 16:45:44</p>\n<h2 id=\"简历经历\"><a class=\"markdownIt-Anchor\" href=\"#简历经历\"></a> 简历经历</h2>\n<p>对各段项目的介绍。根据项目随时提问，如RESTful API, SOAP之类的知识。</p>\n<h2 id=\"计算机基础\"><a class=\"markdownIt-Anchor\" href=\"#计算机基础\"></a> 计算机基础</h2>\n<p>HashMap 的实现</p>\n<ul>\n<li>Hash值如何映射到桶中？？？？</li>\n<li>hashcode和equals函数的要求（修改equals为什么必须要修改hashcode)</li>\n<li>扩容机制和均摊复杂度</li>\n</ul>\n<p>Java 开箱 和 装箱 机制。（一开始没反应过来，说不会。在面试官的提醒下，基础类型 和 对象类型 的关系，我才会了。因为之前看的都是英文材料，box和unbox，对中文不是很敏感。）</p>\n<h2 id=\"算法题\"><a class=\"markdownIt-Anchor\" href=\"#算法题\"></a> 算法题</h2>\n<p>编辑距离的递推公式</p>\n<p>K-means算法。没答好，很久之前学过机器学习。但是因为放下的时间太久了，几乎都忘记了。</p>\n<h2 id=\"对面试官的反问\"><a class=\"markdownIt-Anchor\" href=\"#对面试官的反问\"></a> 对面试官的反问</h2>\n<p>问面试官的问题：我投递的岗位是 后端开发，是否需要复习机器学习的算法？</p>\n<p>答：这和公司的产品线有关，蚂蚁金服的产品和机器学习密切相关。开发不需要对机器学习有很深的了解，但需要有基础的了解。如果会的话，有加分。</p>\n<h1 id=\"二面\"><a class=\"markdownIt-Anchor\" href=\"#二面\"></a> 二面</h1>\n<p>time: 2020-03-24 16:20:56</p>\n<p>距离一面已经2周了，昨天收到电话，约了今天下午3点的电话面试。时长半个小时。</p>\n<p>商汤实习项目。</p>\n<p>ArrayList（自增数组）实现，底层链表和数组的区别。</p>\n<p>1千万个数共10M，内存只有2M, 寻找出现次数最多的10个数字。<br />\n答：先分组，可以按照数字的个别数位来分成小组，在每个组里寻找这10个数字。在合并，寻找总的10个数字。</p>\n<p>看了哪些书？</p>\n<p>熟悉SQL是个啥意思？</p>\n<p>并发的知识:</p>\n<ul>\n<li>ConcurrencyHashMap</li>\n<li>无锁编程</li>\n</ul>\n<p>职业规划。</p>\n<p>大概回答的不是很好，面试官催促我完成笔试，要不然只能问我简历上的内容。笔试完会有人再联系我。今天下午状态不大好，没发挥好。没有手撕代码环节，差评～</p>\n<h1 id=\"笔试\"><a class=\"markdownIt-Anchor\" href=\"#笔试\"></a> 笔试</h1>\n<p>阿里笔试有多场。我做的是3.25这天的。</p>\n<p>笔试难度不大，在牛客网上完成，2道算法题，LeetCode medium难度。拿了满分，导致貌似阿里那边觉得我很优秀，后面的流程就顺风顺水，特别想我过去。好多同事和lead加我微信，打电话劝我。所以最后拒阿里offer时还挺不好意思的。</p>\n<blockquote>\n<p>给3xn的矩阵，每列选择其中的一个数, 形成最后的数组。<br />\n使得最后的</p>\n</blockquote>\n<blockquote>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></munderover><mi mathvariant=\"normal\">∣</mi><msub><mi>b</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>−</mo><msub><mi>b</mi><mi>i</mi></msub><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">\\sum_{i = 0}^{n-1} |b_{i+1} - b_i|\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:3.0787820000000004em;vertical-align:-1.277669em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8011130000000004em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.300005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">∣</span></span></span></span></span></p>\n<p>最小。<br />\n输出最小的这个值。</p>\n</blockquote>\n<p>DP求解即可。</p>\n<p>时间复杂度: O(3N),<br />\n空间复杂度: O(3).</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```cpp</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;ll&gt; <span class=\"title\">last_dp</span><span class=\"params\">(<span class=\"number\">3</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    vector&lt;vector&lt;ll&gt;&gt; <span class=\"built_in\">matrix</span>(<span class=\"number\">3</span>, <span class=\"built_in\">vector</span>&lt;ll&gt; (n));</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j) &#123;</span><br><span class=\"line\">            cin &gt;&gt; matrix[i][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;ll&gt; <span class=\"title\">dp</span><span class=\"params\">(<span class=\"number\">3</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> dp_index = <span class=\"number\">0</span>; dp_index &lt; <span class=\"number\">3</span>; ++dp_index) &#123;</span><br><span class=\"line\">            dp[dp_index] = <span class=\"built_in\">abs</span>(matrix[dp_index][i] - matrix[<span class=\"number\">0</span>][i<span class=\"number\">-1</span>]) + last_dp[<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt; <span class=\"number\">3</span>; ++j) &#123;</span><br><span class=\"line\">                ll new_value = <span class=\"built_in\">abs</span>(matrix[dp_index][i] - matrix[j][i<span class=\"number\">-1</span>]) + last_dp[j];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (new_value &lt; dp[dp_index]) &#123;</span><br><span class=\"line\">                    dp[dp_index] = new_value;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        last_dp = <span class=\"built_in\">move</span>(dp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt;  <span class=\"built_in\">min</span>(&#123;last_dp[<span class=\"number\">0</span>], last_dp[<span class=\"number\">1</span>], last_dp[<span class=\"number\">2</span>]&#125;) &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr />\n<blockquote>\n<p>一个n x m的矩阵，每列每行都是等差数列，公差为整数。<br />\n输入n x m个数，如果为0表示不知道，否则知道。<br />\nq个查询，特定位置（下标1开始）的值是否可确定。</p>\n</blockquote>\n<p>递归求解，进行推测即可。可以用一些数组维护：每行/列是否已经被推断、每行/列已知道的数的下标、行列信息。</p>\n<p>时间复杂度: O(N * M),<br />\n空间复杂度: O(N * M).</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;functional&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> INF = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, m, q;</span><br><span class=\"line\">    cin &gt;&gt;  n &gt;&gt; m &gt;&gt; q;</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">A</span>(n, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; (m, INF));</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">row</span><span class=\"params\">(n, <span class=\"number\">-1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">bool</span>&gt; <span class=\"title\">row_ok</span><span class=\"params\">(n, <span class=\"literal\">false</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">col</span><span class=\"params\">(m, <span class=\"number\">-1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">bool</span>&gt; <span class=\"title\">col_ok</span><span class=\"params\">(m, <span class=\"literal\">false</span>)</span></span>;</span><br><span class=\"line\">    function&lt;<span class=\"type\">void</span>(<span class=\"type\">int</span>, <span class=\"type\">int</span>, <span class=\"type\">int</span>)&gt; fill = [&amp;](<span class=\"type\">int</span> i, <span class=\"type\">int</span> j, <span class=\"type\">int</span> value) -&gt; <span class=\"type\">void</span> &#123;</span><br><span class=\"line\">        A[i][j] = value;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (col_ok[j] &amp;&amp; row_ok[i]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!col_ok[j]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (col[j] == <span class=\"number\">-1</span> || col[j] == i) &#123;</span><br><span class=\"line\">                    col[j] = i;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    col_ok[j] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    <span class=\"type\">int</span> diff = (A[i][j] - A[col[j]][j]) / (i - col[j]);</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> r = i - <span class=\"number\">1</span>; r &gt;= <span class=\"number\">0</span>; --r) &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">fill</span>(r, j, A[r + <span class=\"number\">1</span>][j] - diff);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> r = i + <span class=\"number\">1</span>; r &lt; n; ++r) &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">fill</span>(r, j, A[r - <span class=\"number\">1</span>][j] + diff);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!row_ok[i]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (row[i] == <span class=\"number\">-1</span> || row[i] == j) &#123;</span><br><span class=\"line\">                    row[i] = j;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    row_ok[i] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    <span class=\"type\">int</span> diff = (A[i][j] - A[i][row[i]]) / (j - row[i]);</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> c = j - <span class=\"number\">1</span>; c &gt;= <span class=\"number\">0</span>; --c) &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">fill</span>(i, c, A[i][c + <span class=\"number\">1</span>] - diff);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> c = j + <span class=\"number\">1</span>; c &lt; m; ++c) &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">fill</span>(i, c, A[i][c - <span class=\"number\">1</span>] + diff);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; m; ++j) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> v;</span><br><span class=\"line\">            cin &gt;&gt; v;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (v != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">fill</span>(i, j, v);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; q; ++i) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> r, c;</span><br><span class=\"line\">        cin &gt;&gt; r &gt;&gt; c;</span><br><span class=\"line\">        --r;</span><br><span class=\"line\">        --c;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (A[r][c] == INF) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;Unknown&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            cout &lt;&lt; A[r][c] &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"测评\"><a class=\"markdownIt-Anchor\" href=\"#测评\"></a> 测评</h1>\n<p>笔试没难倒我，测试却花了我不少时间。<br />\n主要是测试</p>\n<ul>\n<li>语文：阅读理解、成语使用、归纳和排除 10min</li>\n<li>数学：表格、图、经济用语 10min</li>\n<li>智商：看图找规律 10min</li>\n<li>性格：是否抗压、反社会 30min</li>\n</ul>\n<p>全靠高中学习到的知识和技能。智商就天生的呗。<br />\n据说和公务员的考试很像，行测。有了解的朋友可以看看。</p>\n<p>应该也不会用测评去筛人，又不是考公务员，手撕代码才是王道。</p>\n<h1 id=\"三面\"><a class=\"markdownIt-Anchor\" href=\"#三面\"></a> 三面</h1>\n<p>time: 2020-04-03 11:36:14</p>\n<p>昨天电话约了今天的电话面试，11:30，聊了40分钟。<br />\n昨天下午做了阿里的线上笔试，晚上做了测评。</p>\n<p>面试官很NICE，还加了我微信进行沟通。<br />\n主要聊了项目，还有一些数据处理的知识和Java的了解。</p>\n<ul>\n<li>数据预处理，对缺失值的处理</li>\n<li>给一个信用评估的数据，如何利用和上线</li>\n<li>Java了解程度和使用，Spring boot</li>\n</ul>\n<p>最后问了英语怎样，口语如何。可能是因为对方是 国际化事业群 吧。</p>\n<p>我最后问了面试官所在的组和业务。<br />\n面向海外的个人信贷业务，类似花呗和借呗。</p>\n<h1 id=\"四面\"><a class=\"markdownIt-Anchor\" href=\"#四面\"></a> 四面</h1>\n<p>time: 2020-04-03 15:22:02</p>\n<p>上周和HR约了这周的交叉面。本来是周一的视频面试，后来面试官出差了，换了一个面试官，改约周三（4.1）。而且新的面试官很忙，没有约具体时间，只是让我下午和晚上等电话。晚上7点半收到电话，聊了40min。</p>\n<p>面试因为只是电话面试，无法手撕代码，只问了一个简单的算法题：桶排序。<br />\n除此之外都是项目，但项目问的很深，很细节。我简历上的实习项目都是当时花了很大功夫完成的，但无奈过去的时间过于久远，很多细节和考虑一时也无法答上来。而且当时做实习的时候更多的是着眼眼前遇到的困难，而不是深入了解整个公司的架构，所以答的并不是很好。面试官问了很多BQ(Behavior Question)的问题。如：</p>\n<ul>\n<li>你之前项目上遇到的最大的困难是什么？</li>\n<li>你实习时发生的最难过的事是？</li>\n<li>你之前坚持过最久的事是？<br />\n了解的都很细，很多问题我从未遇到，也没有认真思考过。之前听说外企才有BQ，而且也大都是HR问。所以虽然不手撕代码，但全程依然很累。</li>\n</ul>\n<p>最后面试官问 我还有什么问题吗？我竟然说“没什么问题了，我家长叫我吃饭呢！”这样的大实话。哈哈～</p>\n<p>昨天接到电话，又约了下周二(4.7)的HR面。愿一切顺利。</p>\n<p>现在最担心的是因为疫情的原因，暑假都不一定有了，暑期实习恐怕也去不了。</p>\n<p>Google的面试进度也停了3周。说是因为实习生招收政策的调整，要推迟到4月中。听过美国疫情很严重，发的offer很多都鸽了。难倒谷歌中国也要减少HC，有同学知道内部消息不？我苦呀！</p>\n",
            "tags": [
                "intern",
                "Alibaba"
            ]
        },
        {
            "id": "https://youngforest.github.io/2020/03/04/Alibaba-Dingding-backend-intern-interview/",
            "url": "https://youngforest.github.io/2020/03/04/Alibaba-Dingding-backend-intern-interview/",
            "title": "阿里钉钉 服务器开发 暑期实习生 面试",
            "date_published": "2020-03-04T11:34:08.000Z",
            "content_html": "<p>通过钉钉电话视频面试，手撕代码通过阿里在线平台完成。</p>\n<p>算法题2道：</p>\n<p>1. 实现一个双向链表的数据结构。</p>\n<p>2. twoSum。寻找数组中2数和等于target的下标。</p>\n<p>难度属于LeetCode Easy吧。但是面试时，需要自己和面试官询问沟通好理解题目。并且面试官很注重代码的整洁和效率。比如 函数参数的检查，实现本身的预设。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//评测题目: 实现一个简单的双向链表，要求完成 node和list的构造函数，以及 list类的void push_back(node*), void remove(node*) 方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">node</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tnode* prev;</span><br><span class=\"line\">\tnode* next;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">node</span>() &#123;</span><br><span class=\"line\">      prev = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">      next = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">list</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tnode* head;</span><br><span class=\"line\">\tnode* tail;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">list</span>() &#123;</span><br><span class=\"line\">      head = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">      tail = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push_back</span><span class=\"params\">(node* n)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 假设n不在list中</span></span><br><span class=\"line\">    \t<span class=\"keyword\">if</span> (n) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (tail) &#123;</span><br><span class=\"line\">          \ttail-&gt;next = n;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            head = n;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          n-&gt;prev = tail;</span><br><span class=\"line\">          tail = n;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">remove</span><span class=\"params\">(node* n)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (n == <span class=\"literal\">nullptr</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"keyword\">auto</span> current = head;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (current) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (current == n) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// find</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (current-&gt;prev &amp;&amp; current-&gt;next) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> p = current-&gt;prev;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> n = current-&gt;next;</span><br><span class=\"line\">            p-&gt;next = n;</span><br><span class=\"line\">            n-&gt;prev = p;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (current-&gt;prev) &#123;</span><br><span class=\"line\">            tail = current-&gt;prev;</span><br><span class=\"line\">            tail-&gt;next = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">            current-&gt;prev = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (current-&gt;next) &#123;</span><br><span class=\"line\">            head = current-&gt;next;</span><br><span class=\"line\">            head-&gt;prev = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">            current-&gt;next = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            head = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">            tail = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        current = current-&gt;next;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//给定一个vecotr&lt;int&gt;v和一个目标target，找到v中两个数字的和等于target，返回数字在原数组中的下标（多个解的返回任意一个即可），无解返回空vector。</span></span><br><span class=\"line\"><span class=\"comment\">//Example:  v=[7,11,2,15],target=9,</span></span><br><span class=\"line\"><span class=\"comment\">//因为nums[0]+nums[2]=7+2=9, </span></span><br><span class=\"line\"><span class=\"comment\">//return[0,2].</span></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">helper</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; v,<span class=\"type\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">\tvector&lt;<span class=\"type\">int</span>&gt; copy = v;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(copy.<span class=\"built_in\">begin</span>(), copy.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    <span class=\"type\">int</span> left = <span class=\"number\">0</span>, right = v.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> current_sum = copy[left] + copy[right];</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span> (current_sum == target) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> &#123;copy[left], copy[right]&#125;;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (current_sum &lt; target) &#123;</span><br><span class=\"line\">          ++left;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          --right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">twoSum</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; v,<span class=\"type\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (v.<span class=\"built_in\">size</span>() &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> values = <span class=\"built_in\">helper</span>(v, target);</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span> (values.<span class=\"built_in\">empty</span>()) <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">ans</span><span class=\"params\">(<span class=\"number\">2</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> index =  <span class=\"number\">0</span>;</span><br><span class=\"line\">  \t</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (values[<span class=\"number\">0</span>] == values[<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; v.<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (v[i]  == values[<span class=\"number\">0</span>])  &#123;</span><br><span class=\"line\">            ans[index] = i;</span><br><span class=\"line\">            ++index;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (index == <span class=\"number\">2</span>)</span><br><span class=\"line\">              <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; v.<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (v[i] == values[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">            ans[<span class=\"number\">0</span>] = i;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (v[i] == values[<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            ans[<span class=\"number\">1</span>] = i;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我的主语言是C++，所以问了很多C++相关的题目。</p>\n<p>从我的简历里，看了我的<a href=\"https://github.com/YoungForest\">GitHub主页</a>。询问了最想介绍的项目。我介绍了自己大三时实现的<a href=\"https://github.com/YoungForest/C0Compiler\">编译器</a>。然后询问了编译的一些过程和数据结构，如 词法分析、语法分析、中间代码生成、目标代码生成、优化，符号表、DAG图优化等。</p>\n<p>C++中输入<code>&gt;&gt;</code>和模版嵌套时’&gt;&gt;<code>在编译时如何区分。我答应该是语法分析时就可以区别开。然后聊了些这个故事的历史，之前模版的</code>&gt;&gt;<code>必需写成</code>&gt; &gt;`才能编译通过。</p>\n<p>C++ HashMap容器的实现，和hash值如何映射到桶中。<br />\nSTL 中vector的扩容实现。<br />\nnew 和 malloc的区别。<br />\nmove语义和右值引用。<br />\nweak_ptr, shared_ptr, unique_ptr的区别。</p>\n<p>平时对什么感兴趣，高级的数据结构:<br />\nOrder tree, 线段树。</p>\n<p>快排和堆排的实现。最小堆的维护。</p>\n<p>进程和线程的区别。</p>\n<p>锁的种类 和 读写控制。</p>\n<p>Linux内存管理机制。</p>\n<p>常用的shell命令。文件操作、进程信息(top, ps)、堆栈信息(lldb).</p>\n<p>TCP丢包处理。这题我答的不好，大三下学的计算机网络很多知识都忘记了。</p>\n<p>24点的智力游戏，4 4 10 10， （10 * 10 - 4) / 4。<br />\n我一开始以为是编程问题，答曰回溯。后来才发现是纯考智力。</p>\n<p>职业规划。</p>\n",
            "tags": [
                "intern",
                "Alibaba"
            ]
        },
        {
            "id": "https://youngforest.github.io/2020/02/27/Bytedance-Ads-backend-intern-interview/",
            "url": "https://youngforest.github.io/2020/02/27/Bytedance-Ads-backend-intern-interview/",
            "title": "字节跳动 暑期实习 广告系统后端开发 面试",
            "date_published": "2020-02-27T10:34:40.000Z",
            "content_html": "<ul>\n<li>HashMap</li>\n<li>数据库\n<ul>\n<li>索引、优化、事务</li>\n<li>聚簇索引和非聚簇索引</li>\n</ul>\n</li>\n<li>并发编程</li>\n<li>网络编程，RPC</li>\n<li>算法题:\n<ul>\n<li>编辑距离</li>\n</ul>\n</li>\n</ul>\n<p>算法题问了一道计算<a href=\"https://en.wikipedia.org/wiki/Levenshtein_distance\">编辑距离(Levenshtein Distance)</a>的问题。编辑距离的问题恰好我在之前度《图解算法》的时候有所涉及，用DP解决即可。但本题目稍微复杂度写，需要在很多字符串中，寻找距离最近的字符串。可以理解为&quot;Fuzzy matching&quot;。<br />\n题面大概为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">莱文斯坦距离，又称 Levenshtein 距离，是编辑距离的一种。指两个字串之间，由一个转成另一个所需的最少编辑操作次数。</span><br><span class=\"line\">允许的编辑操作包括：</span><br><span class=\"line\">插入一个字符</span><br><span class=\"line\">删除一个字符</span><br><span class=\"line\">将一个字符替换成另一个字符</span><br><span class=\"line\">需要你编写一个程序，实现以下功能：</span><br><span class=\"line\">给定一个字符串集合 S 以及一个模板串 P，从 S 中找出与 P 莱文斯坦距离最小的字符串 T，输出 T 以及其对应的编辑距离 D。如果 S 中出现多个满足条件的字符串，则取按字典序排列的第一个。</span><br></pre></td></tr></table></figure>\n<p>并没有想到很好的解法，暴力解法的话, 比较所有字符串和P的距离 时间复杂度为: O(P.size() * sum(S_i.size()).</p>\n<p>后在网上搜索解法，并不难找到。利用Trie以避免不同字符串的DP重复的计算，时间复杂度为: O(P.size() * Trie的节点数). 虽然最坏时间复杂度没有变好，但是实实在在的优化。应该这就是面试官想要的解法了。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">    array, <span class=\"number\">26</span>&gt; children;</span><br><span class=\"line\">    vector distance;</span><br><span class=\"line\">    <span class=\"built_in\">Node</span>() = <span class=\"keyword\">delete</span>;</span><br><span class=\"line\">    <span class=\"built_in\">Node</span>(<span class=\"type\">int</span> n) &#123;</span><br><span class=\"line\">        distance.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">pair <span class=\"title\">solve</span><span class=\"params\">(<span class=\"type\">const</span> string&amp; target, <span class=\"type\">const</span> vector&amp; s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> k = target.<span class=\"built_in\">size</span>() + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> root = <span class=\"built_in\">make_shared</span>(k);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i distance.<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">        root-&gt;distance[i] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans_distance = <span class=\"number\">0x3f3f3f3f</span>,  ans_index = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; s.<span class=\"built_in\">size</span>(); ++j) &#123;</span><br><span class=\"line\">        <span class=\"type\">const</span> string&amp; str = s[j];</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> current = root;</span><br><span class=\"line\">        <span class=\"comment\">// cout &lt;&lt; endl &lt;&lt; &quot;debug: &quot; &lt;&lt; str &lt;&lt; endl;</span></span><br><span class=\"line\">        <span class=\"type\">int</span> distance_from_empty = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">char</span> c : str) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (current-&gt;children[c - <span class=\"string\">&#x27;a&#x27;</span>] == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">                current-&gt;children[c - <span class=\"string\">&#x27;a&#x27;</span>] = <span class=\"built_in\">make_shared</span>(k);</span><br><span class=\"line\">                <span class=\"keyword\">auto</span> next_current = current-&gt;children[c - <span class=\"string\">&#x27;a&#x27;</span>];</span><br><span class=\"line\">                next_current-&gt;distance[<span class=\"number\">0</span>] = distance_from_empty;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; k; ++i) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (c == target[i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                        next_current-&gt;distance[i] = current-&gt;distance[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        next_current-&gt;distance[i] = <span class=\"built_in\">min</span>(&#123;</span><br><span class=\"line\">                            current-&gt;distance[i - <span class=\"number\">1</span>],</span><br><span class=\"line\">                            current-&gt;distance[i],</span><br><span class=\"line\">                            next_current-&gt;distance[i - <span class=\"number\">1</span>]</span><br><span class=\"line\">                        &#125;) + <span class=\"number\">1</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">// cout distance[i] &lt;&lt; &quot; &quot;;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// cout &lt;&lt; endl;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            current = current-&gt;children[c - <span class=\"string\">&#x27;a&#x27;</span>];</span><br><span class=\"line\">            ++distance_from_empty;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (current-&gt;distance[k - <span class=\"number\">1</span>] &lt; ans_distance) &#123;</span><br><span class=\"line\">            ans_distance = current-&gt;distance[k - <span class=\"number\">1</span>];</span><br><span class=\"line\">            ans_index = j;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>  <span class=\"keyword\">if</span> (current-&gt;distance[k - <span class=\"number\">1</span>] == ans_distance) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s[ans_index] &gt; s[j])</span><br><span class=\"line\">                ans_index = j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;ans_distance, s[ans_index]&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    string P;</span><br><span class=\"line\">    cin &gt;&gt; P;</span><br><span class=\"line\">    <span class=\"type\">int</span> N;</span><br><span class=\"line\">    cin &gt;&gt; N;</span><br><span class=\"line\">    <span class=\"function\">vector <span class=\"title\">S</span><span class=\"params\">(N)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; N; ++i) &#123;</span><br><span class=\"line\">        cin &gt;&gt; S[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> ans = <span class=\"built_in\">solve</span>(P, S);</span><br><span class=\"line\">    cout &lt;&lt; ans.first &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; ans.second &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "intern",
                "ByteDance"
            ]
        },
        {
            "id": "https://youngforest.github.io/2018/12/09/sensetime-intern-interview/",
            "url": "https://youngforest.github.io/2018/12/09/sensetime-intern-interview/",
            "title": "商汤见习计算机视觉实习生",
            "date_published": "2018-12-09T03:29:41.000Z",
            "content_html": "<p>上周给在商汤实习的同学发了简历，和HR约了本周四的面试，周五就又接到HR的电话，商议Offer的事宜。不得不说，商汤招聘的效率还是很高的。这也从另一个侧面反应出，其十分缺人手的事实。很多商汤的同学都在询问我，有没有其他的同学可以推荐过来实习。<br />\n商汤校友被誉为“北航实验室”。因为其招聘了大量的北航实习生，正式员工很多也是实习生直接转正的，本科的时候，就有几乎一个班都在那里实习。<br />\n而我面试的时候，推我的是我的一个一直在那里实习的同学，一面的面试官是我大三编译实验课的助教，二三面的面试官也都是我的本科同学。可以说，如果你是北航的学生，那么进入商汤会比其他学校容易很多。</p>\n<p>我面的组是&quot;商汤研究院基础技术与工具组“，算是在研究院里偏工程的组了。总体的面试过程还是很硬核，很高能的。好几次我都以为自己不行了，好在面试官及时给出一些hint，帮助我走下去。下面，我记录一下3个面试的流程。</p>\n<h2 id=\"一面\"><a class=\"markdownIt-Anchor\" href=\"#一面\"></a> 一面</h2>\n<p>一面面试官是此组的lead，今年刚刚毕业转正。我一直觉得他很眼熟，后来和同学交流过后才想起来，这不是2年前检查我编译实验的助教哥哥嘛！</p>\n<p>因为是lead给自己招人，所以一面总体上节奏很紧，内容也很充实。依次问了我职业规划、项目经历和2道算法题。<br />\n职业规划主要是与将来实习工作内容相关，从超级硬核的嵌入式和操作系统，到优化深度学习框架和库，再到优化计算机视觉的策略和算法。<br />\n项目经历主要问了我的2次实习和毕业设计，并问了我对之前的哪部分工作和实习最感兴趣。我当然把之前的实习都表扬了一边，然后再比较出自己对快手的实习最喜欢了。从和面试官的问答过程中我感受到，他对面试者是否真的想做某件工作、是否\b对其感兴趣很看重。</p>\n<p>算法题有2道：</p>\n<ol>\n<li>给出一个01串，给出0和1数目相等的最长子串的长度。比如’00100110011’的最长字串的长度为10.</li>\n<li>有1-n个路灯，\b对其进行n次操作，第i次操作为将编号是i的\b倍数的路灯状态取反。初始状态为都灭，问对于给定的\bn，最后有几盏灯是亮的。</li>\n</ol>\n<p>都不算很难的题目，虽然没能一下子解决，但最后都在面试官的hint下成功解决了。表现的不算太好，也不算很差。想解法的时候一度感觉自己要凉了，要丢人了。好在问题本身不是很难，经过更多的思考和尝试还是解答出来了。只有第一道题要求手写代码了，我用Python很快写完了。我用二维列表实现的桶，面试官指出，用Map难道不是更优雅吗？第二题\b解法过于简单，没必要写代码。</p>\n<p>经验\b总结就是，虽然我代码能力还行，LeetCode也刷了有100道Easy难度的题目，但并没有形成自己的一套解题的流程，也没有对于每一类问题的归纳总结，可以快速地找出合适的\b算法。<br />\n更多的是依靠灵感和尝试。比如第一道题，我最开始一筹莫展，但再尝试几次后，偶然想到可以\b先把前缀和计算出来(遇0减一，遇1加一)，之后就迎刃而解了。和LeetCode上一些字符串比较的问题很像。<br />\n这种依靠灵感和尝试的解决方案，首先不是每次都奏效，如果状态不好，可能就不行了；其次是不靠谱，做题的时候心里没谱，对于题目能不能成功解决心惊胆战的。<br />\n所以，\b在面对未来更多的面试和dream job之前，形成自己稳定可靠的解题流程是必要的。</p>\n<h2 id=\"二面\"><a class=\"markdownIt-Anchor\" href=\"#二面\"></a> 二面</h2>\n<p>二面的面试官是我的本科同学，但平时交流并不多，他属于比较geek的类型。<br />\n这位同学刚开始比较不善言辞，问我一面都面了什么，会写什么。我判断他作为面试官的经历其实也不多，并不擅长。稍稍有些放松和欣喜。<br />\n不过很快，他真的是用技术教我重新做人了。慢慢熟悉起来之后，他也进入了面试的状态。从操作系统(从shell敲入命令到程序被执行中间发生了什么，进程的建立过程)问到编译器(编译的过程，每一步的细节)，从编译优化(循环展开)问到CPython的实现(全局变量的处理，Python是如何运行的)，看到我用过Django，又问我框架的实现，model的实现。问我哪门语言比较熟，我说Python，就问了我很多Python实现的问题。问我看过什么Python的大型项目的代码吗？我只好汗颜地说没有。</p>\n<p>整场面试除了刚开始几分钟比较轻松外，后面的节奏越来越快。每个问题都是越来越深入，直到我实在回答不上来为止。<br />\n应对这种类型的面试，我只能说，<strong>CSAPP</strong>和<strong>SICP</strong>的真的很重要。虽然我都只看了几章，但硬是凭着不深的记忆硬扯。比如Python的运行过程，我之前根本没有了解过。刚开始只说是解释运行，对方要求更详细些，从开始到运行完毕的过程是怎样的？我想Lisp也是解释语言，就把老早之前在SICP上看过的Lisp运行过程说了下。面试后我查了查Python的运行过程，惊喜地发现真的差不多。CSAPP对编译和进程有很深入的介绍，如果对这2章更熟一点，我面试时一定会更从容。没有读过大型项目的源码也是我的短板。说实话，真的没有多少人读过很多大型项目的源码。但是我们是要向大牛看齐的，多读读源码，才能成为更优秀的程序员。</p>\n<h2 id=\"三面\"><a class=\"markdownIt-Anchor\" href=\"#三面\"></a> 三面</h2>\n<p>三面的面试官也是我的本科同学，稍微还熟悉些。最后一面由不同组的同学负责，被称为跨组面试。防止有组内私自招收不合格员工的情况发生。<br />\n既然比较熟，面试过程就比较轻松了。先是依次问了项目经历，之后又问了1道语言题和一道算法题。</p>\n<p>语言题涉及到Python的闭包，<br />\n就是理解</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"keyword\">lambda</span> x: x + i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>)]</span><br></pre></td></tr></table></figure>\n<p>和</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">func1</span>(<span class=\"params\">i</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">lambda</span> x: x + i</span><br><span class=\"line\"></span><br><span class=\"line\">[func1(i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>)]</span><br></pre></td></tr></table></figure>\n<p>的区别。<br />\n不知道多少年前看过廖雪峰Python的教程上闭包相关的内容，只有些许印象，平时也不用。只记得变量<code>i</code>有时会变化，产生意料之外的结果，比如前者。好在在面试官的hint下有惊无险。</p>\n<p>算法题是关于DP的，<br />\n给定<code>n &lt;= 20, a_i &lt; 100, 整数s</code>，求解有多少种\b正负号的填法使得等式成立$$ \\sum_i^{n} \\pm a_i = s $$</p>\n<p>我给出解法后，\b面试官又问，构造表的时候s为负数时怎么办？</p>\n<h2 id=\"后记-感悟\"><a class=\"markdownIt-Anchor\" href=\"#后记-感悟\"></a> 后记 | 感悟</h2>\n<p>有一个清晰的职业规划和技能方向是十分重要的。平时和师兄聊天的时候可以说自己也不知道做啥，不知道对啥最感兴趣。但面试时这样说肯定就gg了，最好最自己有比较清晰的认识，知道自己的兴趣，职业规划，当然这些和面试职位的需求相符那就更好了。如果不相符的话，大概率也会gg，搞不好还会被喷（参考我5月时面试face++的面试经历，在我的博客上可以找到<a href=\"https://youngforest.github.io/2018/08/14/face-interview/%EF%BC%89%E3%80%82\">https://youngforest.github.io/2018/08/14/face-interview/）。</a></p>\n<p>今年算法岗大火，以至于供过于求。算法岗也处于程序员鄙视链的上游，薪水也比研发岗高一些。<br />\n但我结合自己的经历和体验，发现自己还是对写代码比较感兴趣，写出更优雅，performance更高的代码，满足用户的需求，产生impact。我就很开心和满足了。虽然做程序员很辛苦，但是我很开心。没必要追求别人认为好的职业(鄙视链大概是：研究员 &gt; 算法岗 &gt; 研发岗 &gt; 其他)。<br />\n我以后也会顺着研发这个方向规划自己的职业，学习必要技能的。</p>\n<p>我曾经给好友说过，“我想写一辈子代码”。现在仍然是这样，而且更加坚定了。</p>\n",
            "tags": [
                "intern",
                "sensetime"
            ]
        },
        {
            "id": "https://youngforest.github.io/2018/09/28/jingchi-interview/",
            "url": "https://youngforest.github.io/2018/09/28/jingchi-interview/",
            "title": "景弛（文远之行）面试",
            "date_published": "2018-09-28T03:22:23.000Z",
            "content_html": "<p>昨天参与了景驰科技的实习生面试。此次实习生面试是实验室统一安排的，并不是我自己找的。<br />\n形式为在线面试。总共2轮，预计每轮1小时，实际上第二轮只问了半个小时。第一轮用的Skype，通话质量比较差，视频输出也没有。第二轮，用的微信语音 + <a href=\"http://collabedit.com/\">collabedit</a>。效果好了很多。</p>\n<p>技术面都很简单。因为是招数据标注平台的码农实习生嘛，自然要求超级低。感觉自己要被廉价卖掉了。</p>\n<span id=\"more\"></span>\n<h2 id=\"一面\"><a class=\"markdownIt-Anchor\" href=\"#一面\"></a> 一面</h2>\n<p>一面问了项目和一道<a href=\"https://leetcode.com/problems/valid-parentheses/description/\">括号匹配</a>的问题。</p>\n<h2 id=\"二面\"><a class=\"markdownIt-Anchor\" href=\"#二面\"></a> 二面</h2>\n<p>二面问了项目和一道<a href=\"https://leetcode.com/problems/3sum/description/\">三数之和</a>的问题。过程中，因为我在简历里写的项目是 大三时在act云计算和系统安全组实习做的一系列项目 和 大四做的毕设。尤其是大三的项目，都是琐碎的小项目，而且年代过于久远，很多细节我都记不清了。所以，我干脆提到了我大四做的2次实习。当听到我曾经在快手实习过3个月后，Eric(二面的面试官)很感兴趣。和我聊了一会儿实习的经历，就开始聊景驰的一些技术细节和在景驰科技实习的要求。</p>\n<h2 id=\"hr面\"><a class=\"markdownIt-Anchor\" href=\"#hr面\"></a> HR面</h2>\n<p>下午回到宿舍后，HR小姐姐又给我打了20min电话，也就是聊了一些实习和公司的问题。通过这次交谈，我也对景驰科技有了进一步的了解。<br />\n景驰总共只有150人，总部在广州。在北京和硅谷有研发中心。其中北京这边刚刚建立，只有七八个人。硅谷那边有60+人。主要人员都集中在广州。<br />\n我还问了她transfer到硅谷的问题。她说，硅谷那边大多数在那边直接招的人，当然优秀的员工想要过去也是可以的(估计只是想吸引我)，甚至还有员工领着硅谷的薪水在中国工作。那岂不是年薪巨高（相对中国这边）。</p>\n<p>从Eric和HR的谈话中，我感觉景驰真的很缺人。估计我们都会被招，毕竟便宜嘛。</p>\n<p>我的计划是先实习3个月，认识一些人，学习一些技能。之后想办法再跳出来。继续实习下去，边际收益比较低。</p>\n<p>总之，我现在时间已经不多了。做什么事情都要 不忘初心…</p>\n",
            "tags": [
                "intern",
                "WeRide"
            ]
        },
        {
            "id": "https://youngforest.github.io/2018/08/14/face-interview/",
            "url": "https://youngforest.github.io/2018/08/14/face-interview/",
            "title": "face++ 面试",
            "date_published": "2018-08-14T03:23:52.000Z",
            "content_html": "<p>一个清华的毕业生做为面试官，一开始问了我之后的工作意向。我回答说是“算法工程师”，其实我这次面的是开发岗，就被大佬教育了一顿。说你是不是投错组了，还没找到自己感兴趣的方向嘛。之后问我，现在在快手的实习是做什么的？我讲了一些。然后又被diss了。说这些特征工程之后都会被深度学习所取代的。</p>\n<p>正式进入面试只问了2个问题：维护最小值的队实现，和 维护最小指的栈实现。</p>\n<p>之后本来有二面的，后来没找到面试官就不了了之了。</p>\n<p>我是对这次面试结果不抱太大期望的，毕竟过程比较水，也不是很愉快。果然之后face++那边一直都没有消息。</p>\n",
            "tags": [
                "intern",
                "旷视"
            ]
        },
        {
            "id": "https://youngforest.github.io/2018/06/01/suzhou-microsoft-interview/",
            "url": "https://youngforest.github.io/2018/06/01/suzhou-microsoft-interview/",
            "title": "微软苏州面试",
            "date_published": "2018-06-01T14:54:08.000Z",
            "content_html": "<p>在@lxc师兄的内推下，我有幸可以前往 苏州微软，面试O365部门的暑期实习生。虽然最后失败了，但从这次失败的经历中，我学习到很多。<br />\n总结在此，为未来的找实习和工作做准备。</p>\n<span id=\"more\"></span>\n<h1 id=\"面试环节\"><a class=\"markdownIt-Anchor\" href=\"#面试环节\"></a> 面试环节</h1>\n<h2 id=\"一面\"><a class=\"markdownIt-Anchor\" href=\"#一面\"></a> 一面</h2>\n<ul>\n<li>尾递归，斐波那契（不会）</li>\n<li>合并2个列表</li>\n<li>makefile 编译顺序确定</li>\n<li>memcpy的实现方式和安全问题</li>\n</ul>\n<h3 id=\"用尾递归优化递归斐波那契数列\"><a class=\"markdownIt-Anchor\" href=\"#用尾递归优化递归斐波那契数列\"></a> 用尾递归优化递归斐波那契数列</h3>\n<p>斐波那契数列大家应该都很熟悉，高中数学课本上提到的经典递归数列。<br />\n其数学定义为：</p>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mi>f</mi><mi>n</mi></msub><mo>=</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.3599999999999999em\" columnalign=\"left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><msub><mi>f</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><msub><mi>f</mi><mrow><mi>n</mi><mo>−</mo><mn>2</mn></mrow></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mspace width=\"1em\"/><mtext>if </mtext><mi>n</mi><mo>&gt;</mo><mn>2</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mspace width=\"1em\"/><mtext>if </mtext><mi>n</mi><mo>=</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\"application/x-tex\">f_n = \\begin{cases}\nf_{n-1} + f_{n-2} &amp; \\quad \\text{if } n &gt; 2 \\\\\n1 &amp; \\quad \\text{if } n = 0, 1\n\\end{cases}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.0000299999999998em;vertical-align:-1.25003em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">{</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:1em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mord text\"><span class=\"mord\">if </span></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">2</span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mord text\"><span class=\"mord\">if </span></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>根据数学递推式，很容易地可以写出递归版的斐波那契数列：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">fibonacci</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> n == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> n == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fibonacci(n-<span class=\"number\">1</span>) + fibonacci(n-<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<p>根据函数调用的原理，每次需要递归调用2次本函数，当参数为n时，需要的栈帧的数目为O(2^n)。<br />\n可以利用尾递归来优化这个问题。<br />\n尾递归是<a href=\"https://en.wikipedia.org/wiki/Tail_call\">尾调用</a>的一种递归调用形式。<br />\n我对尾递归的理解是<br />\n函数式编程中使用函数调用以实现循环的方式。<br />\n所以，首先给出内存占用为O(1)的斐波那契数列循环实现。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">fibonacci</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> n == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">    f_n_sub_1 = <span class=\"number\">1</span></span><br><span class=\"line\">    f_n_sub_2 = <span class=\"number\">0</span></span><br><span class=\"line\">    i = n</span><br><span class=\"line\">    <span class=\"keyword\">while</span> i &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">        f_n_sub_1, f_n_sub_2 = f_n_sub_1 + f_n_sub_2, f_n_sub_1</span><br><span class=\"line\">        i -= <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> f_n_sub_1</span><br></pre></td></tr></table></figure>\n<p>从循环实现可以看出，整个循环实现需要2个变量(f_n_sub_1和f_n_sub_2)来记录中间的结果，<br />\n一个循环变量(i)以控制循环次数(即循环结束条件)。<br />\n将这些变量当作函数的参数即可得到尾递归版本的斐波那契数列实现。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">fibonacci</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">func</span>(<span class=\"params\">n, ret1, ret2</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> n == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ret1</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> func(n - <span class=\"number\">1</span>, ret2, ret1 + ret2)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> func(n, <span class=\"number\">0</span>, <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"memcpy的实现方式和安全性问题\"><a class=\"markdownIt-Anchor\" href=\"#memcpy的实现方式和安全性问题\"></a> memcpy的实现方式和安全性问题</h3>\n<p>也是一个字节一个字节的复制。不是我想当然的认为一整块一整块的复制，这样会更快。<br />\n回忆计算机组成原理的知识：<br />\nCPU和Memory之间由总线连接，一次（一个时钟周期）只能读取和写入一个字的数据。</p>\n<p>安全性：很不安全。<br />\n回忆操作系统的知识：进程的内存空间映射到物理内存。<br />\n直接一个一个字节从低到高地复制粘贴容易覆盖到其他指针指到的数据（破坏了其他指针的数据）甚至本身的数据。</p>\n<p>比如memcpy一个大小为200字节的指针(地址100)到地址200，会把自己的数据(200-300)的部分先覆盖掉，之后的copy就都是错的。（这是面试官给出的解释，但我后来发现，这点是不一定不成立的。因为之后我查了一些标准库中memcpy的实现，这种情况下可能会采用自后向前复制的方法防止覆盖要复制的数据。<br />\n<a href=\"https://github.com/gcc-mirror/gcc/blob/master/libgcc/memcpy.c\">无保护措施的gcc</a><br />\n<a href=\"https://blog.csdn.net/laoyang360/article/details/8020409\">有保护措施</a><br />\n）</p>\n<h3 id=\"面试官指点\"><a class=\"markdownIt-Anchor\" href=\"#面试官指点\"></a> 面试官指点</h3>\n<p>面试时在Notepad里写代码，在纸上写代码，和在白板上写，<br />\n容易程度或方便程度是：<br />\n白板 &gt; 纸 &gt; Notepad</p>\n<p>被告知面试题目后，首先要考虑清楚初始条件和具体要求，不清楚的一定要和面试官问清楚，不要上来就写。<br />\n否则后来发现歧义，再问时就晚了。</p>\n<h3 id=\"其他收获\"><a class=\"markdownIt-Anchor\" href=\"#其他收获\"></a> 其他收获</h3>\n<p>有时间一定要好好看看SICP，函数式编程的尾递归在其中就有讲。<br />\n面试官估计也读过。</p>\n<h2 id=\"二面\"><a class=\"markdownIt-Anchor\" href=\"#二面\"></a> 二面</h2>\n<ul>\n<li>求树的最深度</li>\n<li>最大和的链</li>\n<li>可以拐弯的最大和的链</li>\n<li>数组权重最大的重新排序（不会）</li>\n</ul>\n<h3 id=\"其他收获-2\"><a class=\"markdownIt-Anchor\" href=\"#其他收获-2\"></a> 其他收获</h3>\n<p>在面试时，ACM选手有天然的优势。<br />\n该面试官本科时，可能玩过ACM，因为他说“数组权重”那道题是他上学时自己出得。</p>\n<p>p.s. 面试官说他也毕业不久。</p>\n<h2 id=\"三面\"><a class=\"markdownIt-Anchor\" href=\"#三面\"></a> 三面</h2>\n<p>周二去苏州参加完面试后，周五出结果，约了第二周周二的视频面试。<br />\n说实话，视频面试前我还真有点紧张，而且由于学校出了点状况，上午才知道下午有视频面试。<br />\n仓促之前，也没有午睡，休息好。面试之前特别困。<br />\n好在真正到面试时，肾上腺素上升，不困了。</p>\n<p>三面的面试官也很nice。<br />\n听说我熟悉SQL，就出了一道SQL题目给我。</p>\n<p>类似教务管理系统。有3张表：学生（学号，姓名），课程表（课程ID，课程名），选课表（学号，课程ID，成绩）。<br />\n查询每个学生的数学成绩和语文成绩，结果为（姓名，数学成绩，语文成绩）。<br />\n刚开始假设每个学生都选了数学和语文，后来取消了这个假设（考察outer join）。</p>\n<h2 id=\"第二道题\"><a class=\"markdownIt-Anchor\" href=\"#第二道题\"></a> 第二道题</h2>\n<p>第二道题目考察<a href=\"https://en.wikipedia.org/wiki/IEEE_754#Rounding_rules\">IEEE的一种round实现</a>。</p>\n<p>首先，列出一些数字，让我观察规律。<br />\n在面试官的引导下，我猜测出来了：四舍六入五看下一位。<br />\n之后使用C语言实现这一ieee_round。</p>\n<h2 id=\"结果\"><a class=\"markdownIt-Anchor\" href=\"#结果\"></a> 结果</h2>\n<p>No Hire.</p>\n<blockquote>\n<p>很遗憾，Lead面试官最后给的是No Hire。他认为你编写代码能力不稳固。你的优点是思考能力很强，缺点是不善于展现和询问，不能从错误中获取新的解决办法，今后需要加强这方面。</p>\n<p>希望你研究生期间继续努力，欢迎再加入苏州微软。</p>\n</blockquote>\n<p>Lead面试官的眼光还是蛮准的，给出的建议的是一针见血的。我会继续努力，早日达到微软爸爸的要求的。</p>\n<p>除此之外，一开始说好的报销火车票最后也没给报，经济上还损失了1200￥。</p>\n",
            "tags": [
                "intern",
                "Microsoft"
            ]
        },
        {
            "id": "https://youngforest.github.io/2018/04/30/kuaishou-intern-interview/",
            "url": "https://youngforest.github.io/2018/04/30/kuaishou-intern-interview/",
            "title": "快手实习生面试",
            "date_published": "2018-04-30T15:33:10.000Z",
            "content_html": "<p>感谢@lxc师兄的内推和面试建议，我有幸可以参加快手推荐组算法实习生的面试，并最终通过面试被录取。<br />\n虽然实习生的面试可能相对简单，但是我认为还是有参考价值的。<br />\n刷实习算是一种最终找到好工作，进入梦想公司的途径吧（不能算是捷径，我实习的2份工作还是很累的。快手是我的第二份实习。）。<br />\n现在实习终于稳定下来，毕设论文也还有一段时间才deadline，恰好抽出时间总结一下自己的面试和实习。<br />\n希望可以指导到自己之后找其他实习或者是正式工作:)</p>\n<span id=\"more\"></span>\n<h1 id=\"面试\"><a class=\"markdownIt-Anchor\" href=\"#面试\"></a> 面试</h1>\n<p>我总共经历2轮面试，耗时近2个小时。<br />\n总体感觉是准备的不很充分，很多地方有待提高。</p>\n<h2 id=\"一面\"><a class=\"markdownIt-Anchor\" href=\"#一面\"></a> 一面</h2>\n<p>面试官是一个胖胖的小哥哥，很友善，面试也很认真。<br />\n我参加实习后，经常在开会和吃饭的时候遇到他，感觉很亲切；我们不在一个小组，但在同一大组。</p>\n<p>面试内容：</p>\n<ul>\n<li>给定一个数组，找到和最大的连续序列，返回和；</li>\n<li>翻转句子：如 today is wednesday! =&gt; wesdnesday is today!</li>\n<li>SQL相关：left join, right join, inner join区别；partition了解不。</li>\n<li>机器学习相关：准确率和召回率的定义</li>\n</ul>\n<h2 id=\"二面\"><a class=\"markdownIt-Anchor\" href=\"#二面\"></a> 二面</h2>\n<p>面试官是一个严肃的工程师，给我的印象是反应很快，可能是leader类的人物。<br />\n但可惜的是，我入职之后在大组没有见过他。</p>\n<ul>\n<li>内存特别小时，在大量的数中找到数m的位置。</li>\n<li>a = b时，b有可能在哪里获取？寄存器、cache、Memory、外存</li>\n<li>一个已排好序的数组，循环左移k位(k未知)，找到数m的位置。</li>\n<li>n个台阶，可以走1步或2步… 这个题他先问我做过吗？我说做过，就没再让我做。</li>\n<li>一颗二叉树，每个节点存一个数，找到两个数的最近公共父节点。</li>\n<li>多进程与多线程区别；</li>\n<li>java、C++ 多进程通信使用；</li>\n<li>java、C++ 网络通信 socket库使用。（这2个我没答好）</li>\n<li>机器学习的了解程度，损失函数是否研究过。</li>\n</ul>\n<h2 id=\"面试准备\"><a class=\"markdownIt-Anchor\" href=\"#面试准备\"></a> 面试准备</h2>\n<p>经过这次面试，我对面试的准备内容更加明确了：</p>\n<ul>\n<li>数据结构和算法是基础，必须好好复习和刷题的。</li>\n<li>SQL、机器学习和Hadoop只是是锦上添花的技能。</li>\n<li>手写代码和简答是面试的主要内容。</li>\n</ul>\n<p>因为事实上，我sql、机器学习、多线程的问题答得都很差，只有算法题马马虎虎答得还可以，都写出来了，虽然中间出现过一些错误而且耗时可能比较长（尤其是手写第一题的时候，还没进入状态，多花了些时间）。</p>\n<p>参考师兄的建议，我认为如下的准备路径和方式比较高效（我也还在准备当中）：</p>\n<ul>\n<li>数据结构和算法：cos226+算法第四版，the elements of interview</li>\n<li>sql: sql必知必会，<a href=\"http://www.runoob.com/sql/sql-constraints.html\">runoob</a></li>\n<li>多线程：Java并发编程实践</li>\n<li>机器学习：周志华的“西瓜书&quot;</li>\n</ul>\n<h1 id=\"入职\"><a class=\"markdownIt-Anchor\" href=\"#入职\"></a> 入职</h1>\n<p>之前因为毕设的原因，还犹豫过到底要不要接受实习offer。<!--和陪奶奶--><br />\n经过咨询师兄和权衡利弊，我最终还是接受了offer，于4月19日入职。<!--被奶奶劝导--><br />\n这份offer的待遇是：每天300，管午饭、下午茶和晚饭，水果牛奶雪糕随便吃。<br />\n事实上是：<br />\n每天税前300，实习生按劳务所得交税，超过800的部分要交给国家20%。<br />\n午饭晚饭还是很棒的，尤其是午饭的自助餐，每次都吃撑。<br />\n下午茶很简单，一个牛皮纸袋里有饮料、水果和零食，与想象中的有差距，但还是很使人满足的；我经常会剩一些带回去吃。</p>\n<p>从工作中的点点滴滴中，我可以感受到<br />\n快手是一家技术很好、牛人很多的公司，现在在迅速扩张之中，几乎每周组内都有人入职（因此我才被录取？）。<br />\n带我的2个mentor人也都很nice，我从工作中学习和成长了很多。</p>\n<!--\n工作内容有：\n- 使用pyplot进行数据可视化\n- hive sql进行数据预处理\n-->",
            "tags": [
                "intern",
                "kuaishou"
            ]
        }
    ]
}