{
    "version": "https://jsonfeed.org/version/1",
    "title": "YoungForest's blog • All posts by \"bytedance\" tag",
    "description": "佛系更新；生活、学习",
    "home_page_url": "https://youngforest.github.io",
    "items": [
        {
            "id": "https://youngforest.github.io/2020/06/23/Bytedance-new-graduate-interview/",
            "url": "https://youngforest.github.io/2020/06/23/Bytedance-new-graduate-interview/",
            "title": "Bytedance 秋招面试 2020",
            "date_published": "2020-06-23T10:56:43.000Z",
            "content_html": "<p>我字节跳动提前批投了 技术中台 的 后端开发岗位。<br />\n计算机基础没复习到位，答得不好。<br />\n许愿offer。</p>\n<h1 id=\"一面\"><a class=\"markdownIt-Anchor\" href=\"#一面\"></a> 一面</h1>\n<p>我自介绍。</p>\n<h2 id=\"算法题\"><a class=\"markdownIt-Anchor\" href=\"#算法题\"></a> 算法题</h2>\n<p>先给暴力解，再优化。</p>\n<blockquote>\n<p>题目：数组代表股票每天价格，每天只允许买或者卖一次，也可以不买卖，需要先买入才能卖出，在只交易一次（即只买和卖一次）的情况下求最大收益。<br />\n输入：[2,1,4,1,5,6,1]<br />\n输出： 5</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">solution</span><span class=\"params\">(<span class=\"type\">const</span> vector&lt;<span class=\"type\">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// time: N ^ 2</span></span><br><span class=\"line\">    <span class=\"comment\">// space: 1</span></span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> buy = <span class=\"number\">0</span>; buy &lt; prices.<span class=\"built_in\">size</span>(); ++buy) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> sell = buy + <span class=\"number\">1</span>; sell &lt; prices.<span class=\"built_in\">size</span>(); ++sell) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> profit = prices[sell] - prices[buy];</span><br><span class=\"line\">            ans = <span class=\"built_in\">max</span>(ans, profit);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">solution2</span><span class=\"params\">(<span class=\"type\">const</span> vector&lt;<span class=\"type\">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// time: O(N)</span></span><br><span class=\"line\">    <span class=\"comment\">// space: 1</span></span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prices.<span class=\"built_in\">empty</span>()) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> minPrices = prices[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> sell = <span class=\"number\">1</span>; sell &lt; prices.<span class=\"built_in\">size</span>(); ++sell) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> profit = prices[sell] - minPrices;</span><br><span class=\"line\">        ans = <span class=\"built_in\">max</span>(ans, profit);</span><br><span class=\"line\">        minPrices = <span class=\"built_in\">min</span>(minPrices, prices[sell]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//int a;</span></span><br><span class=\"line\">    <span class=\"comment\">//cin &gt;&gt; a;</span></span><br><span class=\"line\">    <span class=\"comment\">//cout &lt;&lt; a &lt;&lt; endl;</span></span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; prices = &#123;<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">solution2</span>(prices) &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"计算机基础\"><a class=\"markdownIt-Anchor\" href=\"#计算机基础\"></a> 计算机基础</h2>\n<h3 id=\"操作系统\"><a class=\"markdownIt-Anchor\" href=\"#操作系统\"></a> 操作系统</h3>\n<p>IPC 种类<br />\n信号量</p>\n<p>进程 和 线程<br />\n各有几种状态、状态转移图。</p>\n<p>虚拟内存</p>\n<p><a href=\"https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/ldd.html\">Linux的一些常用命令</a>, 今天刚复习过。<br />\n如 查看端口、内存、进程状态.<br />\n<a href=\"https://unix.stackexchange.com/questions/94357/find-out-current-working-directory-of-a-running-process\">进程的current working directory</a>: <code>lsof -p &lt;PID&gt; | grep cwd</code></p>\n<h3 id=\"计算机网络\"><a class=\"markdownIt-Anchor\" href=\"#计算机网络\"></a> 计算机网络</h3>\n<p>3次握手 4次挥手 的过程和必要性. 答的很糟糕。</p>\n<h3 id=\"数据库\"><a class=\"markdownIt-Anchor\" href=\"#数据库\"></a> 数据库</h3>\n<p>几种范式<br />\n深入了解吗？不了解</p>\n<h3 id=\"语言\"><a class=\"markdownIt-Anchor\" href=\"#语言\"></a> 语言</h3>\n<p>python</p>\n<ul>\n<li>GIL</li>\n<li>引用还是值</li>\n</ul>\n<p>贵组大概率是写python的。</p>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h2>\n<p>昨天约了今天的面试，失误呀。太过仓促。本来秋招提前批是很重要的，计算机基础知识就是题库里的那些题，花3天时间背背还是有必要的。要不靠着本科时学的知识，回答不会太好，会很伤。</p>\n<p>好多同学问题库在哪里。我也是在网上找的，<a href=\"https://github.com/CyC2018/CS-Notes\">https://github.com/CyC2018/CS-Notes</a><br />\n感觉还是挺全的. 已经在背了。</p>\n",
            "tags": [
                "ByteDance",
                "New Graduate"
            ]
        },
        {
            "id": "https://youngforest.github.io/2020/02/27/Bytedance-Ads-backend-intern-interview/",
            "url": "https://youngforest.github.io/2020/02/27/Bytedance-Ads-backend-intern-interview/",
            "title": "字节跳动 暑期实习 广告系统后端开发 面试",
            "date_published": "2020-02-27T10:34:40.000Z",
            "content_html": "<ul>\n<li>HashMap</li>\n<li>数据库\n<ul>\n<li>索引、优化、事务</li>\n<li>聚簇索引和非聚簇索引</li>\n</ul>\n</li>\n<li>并发编程</li>\n<li>网络编程，RPC</li>\n<li>算法题:\n<ul>\n<li>编辑距离</li>\n</ul>\n</li>\n</ul>\n<p>算法题问了一道计算<a href=\"https://en.wikipedia.org/wiki/Levenshtein_distance\">编辑距离(Levenshtein Distance)</a>的问题。编辑距离的问题恰好我在之前度《图解算法》的时候有所涉及，用DP解决即可。但本题目稍微复杂度写，需要在很多字符串中，寻找距离最近的字符串。可以理解为&quot;Fuzzy matching&quot;。<br />\n题面大概为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">莱文斯坦距离，又称 Levenshtein 距离，是编辑距离的一种。指两个字串之间，由一个转成另一个所需的最少编辑操作次数。</span><br><span class=\"line\">允许的编辑操作包括：</span><br><span class=\"line\">插入一个字符</span><br><span class=\"line\">删除一个字符</span><br><span class=\"line\">将一个字符替换成另一个字符</span><br><span class=\"line\">需要你编写一个程序，实现以下功能：</span><br><span class=\"line\">给定一个字符串集合 S 以及一个模板串 P，从 S 中找出与 P 莱文斯坦距离最小的字符串 T，输出 T 以及其对应的编辑距离 D。如果 S 中出现多个满足条件的字符串，则取按字典序排列的第一个。</span><br></pre></td></tr></table></figure>\n<p>并没有想到很好的解法，暴力解法的话, 比较所有字符串和P的距离 时间复杂度为: O(P.size() * sum(S_i.size()).</p>\n<p>后在网上搜索解法，并不难找到。利用Trie以避免不同字符串的DP重复的计算，时间复杂度为: O(P.size() * Trie的节点数). 虽然最坏时间复杂度没有变好，但是实实在在的优化。应该这就是面试官想要的解法了。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">    array, <span class=\"number\">26</span>&gt; children;</span><br><span class=\"line\">    vector distance;</span><br><span class=\"line\">    <span class=\"built_in\">Node</span>() = <span class=\"keyword\">delete</span>;</span><br><span class=\"line\">    <span class=\"built_in\">Node</span>(<span class=\"type\">int</span> n) &#123;</span><br><span class=\"line\">        distance.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">pair <span class=\"title\">solve</span><span class=\"params\">(<span class=\"type\">const</span> string&amp; target, <span class=\"type\">const</span> vector&amp; s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> k = target.<span class=\"built_in\">size</span>() + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> root = <span class=\"built_in\">make_shared</span>(k);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i distance.<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">        root-&gt;distance[i] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans_distance = <span class=\"number\">0x3f3f3f3f</span>,  ans_index = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; s.<span class=\"built_in\">size</span>(); ++j) &#123;</span><br><span class=\"line\">        <span class=\"type\">const</span> string&amp; str = s[j];</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> current = root;</span><br><span class=\"line\">        <span class=\"comment\">// cout &lt;&lt; endl &lt;&lt; &quot;debug: &quot; &lt;&lt; str &lt;&lt; endl;</span></span><br><span class=\"line\">        <span class=\"type\">int</span> distance_from_empty = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">char</span> c : str) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (current-&gt;children[c - <span class=\"string\">&#x27;a&#x27;</span>] == <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">                current-&gt;children[c - <span class=\"string\">&#x27;a&#x27;</span>] = <span class=\"built_in\">make_shared</span>(k);</span><br><span class=\"line\">                <span class=\"keyword\">auto</span> next_current = current-&gt;children[c - <span class=\"string\">&#x27;a&#x27;</span>];</span><br><span class=\"line\">                next_current-&gt;distance[<span class=\"number\">0</span>] = distance_from_empty;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; k; ++i) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (c == target[i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                        next_current-&gt;distance[i] = current-&gt;distance[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        next_current-&gt;distance[i] = <span class=\"built_in\">min</span>(&#123;</span><br><span class=\"line\">                            current-&gt;distance[i - <span class=\"number\">1</span>],</span><br><span class=\"line\">                            current-&gt;distance[i],</span><br><span class=\"line\">                            next_current-&gt;distance[i - <span class=\"number\">1</span>]</span><br><span class=\"line\">                        &#125;) + <span class=\"number\">1</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">// cout distance[i] &lt;&lt; &quot; &quot;;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// cout &lt;&lt; endl;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            current = current-&gt;children[c - <span class=\"string\">&#x27;a&#x27;</span>];</span><br><span class=\"line\">            ++distance_from_empty;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (current-&gt;distance[k - <span class=\"number\">1</span>] &lt; ans_distance) &#123;</span><br><span class=\"line\">            ans_distance = current-&gt;distance[k - <span class=\"number\">1</span>];</span><br><span class=\"line\">            ans_index = j;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>  <span class=\"keyword\">if</span> (current-&gt;distance[k - <span class=\"number\">1</span>] == ans_distance) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s[ans_index] &gt; s[j])</span><br><span class=\"line\">                ans_index = j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;ans_distance, s[ans_index]&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    string P;</span><br><span class=\"line\">    cin &gt;&gt; P;</span><br><span class=\"line\">    <span class=\"type\">int</span> N;</span><br><span class=\"line\">    cin &gt;&gt; N;</span><br><span class=\"line\">    <span class=\"function\">vector <span class=\"title\">S</span><span class=\"params\">(N)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; N; ++i) &#123;</span><br><span class=\"line\">        cin &gt;&gt; S[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> ans = <span class=\"built_in\">solve</span>(P, S);</span><br><span class=\"line\">    cout &lt;&lt; ans.first &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; ans.second &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "intern",
                "ByteDance"
            ]
        },
        {
            "id": "https://youngforest.github.io/2019/09/06/ByteDance-Camp/",
            "url": "https://youngforest.github.io/2019/09/06/ByteDance-Camp/",
            "title": "2019 字节跳动夏令营",
            "date_published": "2019-09-06T11:25:56.000Z",
            "content_html": "<p>总的体验是很开心，收获很大。</p>\n<p>很幸运可以参加今年的Byte Camp，我认为这一周的活动是我今年参加过的最有意义的活动了。今年的夏令营共分为3个赛道：工程、算法、和 产品。我参加的是工程赛道。</p>\n<p>工程和算法赛道进入夏令营的选拔都是通过笔试和面试完成的。笔试的题目也都一样，就是通过牛客网的平台在线完成。笔试有2次机会，都参加的话取分高的。笔试题目分为基础题（操作系统、计算机组成原理、计算机网络）和编程题。编程题有4题，难度依次递增。我参加的是第一场，AC了前3道，难度大约等于是LeetCode medium，最后一题的难度直接飙升到 ICPC world final的难度，要用费用流的知识。我也没打过ACM，第一次听说费用流，就没做出来。由于笔试答的还行，面试我没参加，直接拿到入营资格了。不过听参加面试的同学反映，面试也挺水的，难度很低。</p>\n<p>然后就是夏令营的正式活动了。活动虽然只有一周，但是日程安排的十分紧凑，基本是9 10 6。开幕式是有 AI-lab的主管 李航老师 主持。以前只在网上和书上久闻大名，这次竟然可以见到真人了，还有一起合影的机会。学机器学习的同学应该都听说过他，他的《统计学习方法》也是入门算法岗工作的维几之选。我们每人还获赠他签名的《统计学习方法》一书（工程赛道的同学可能对此不是很感冒，哈哈）。</p>\n<p><img src=\"/images/ByteDance-camp-jiti.jpg\" alt=\"集体照\" /></p>\n<p>之后的日程主要分为2天的听课和3天的做项目。课程安排和项目都可以在<a href=\"https://bytecamp.toutiao.com/course\">官网上</a>看到，每天要上7节课之多。课上也是干货满满，每个主题都是字节跳动内部负责相关技术的资深工程师负责讲解，从基础设施架构到前后端，覆盖工程的同学可能感兴趣和从事的所有内容。<br />\n算法那边除了请公司内部的大牛之外，还有像 Yoshua Bengio、Oren Etzioni 这样的外部嘉宾参与。因为这2个人实在是太牛了（我也是后来才知道的，毕竟不搞算法），我们工程的也被要求参加他们的课程。课程内容倒是一般，比较入门和浅显（难道是为了照顾我们工程的孩子？），实质内容反而不多。</p>\n<p>我选择的项目是“服务治理：基于共享内存的高性能通信中间件”。说实话，我对共享内存和进程间通信不是特别熟，但是当时选题目的时候只有这个题目能看懂，其他的题目更是一头雾水，所以选择了“中间件”这一看起来比较靠谱的项目。（后来证明，这样的项目反而不如小游戏这样的项目容易拿奖，也更难完成）。项目的具体细节就不便透露了。我和交大的一位大佬一起完成，3天的时间里，完成了设计、实现、测试、性能测试、PPT和展示。别的组都是4～5人，我们组因为有2个队友提前退营了，只有2人。这3天的代码不是我写的最难的，但算是我这一年来写的最开心的了。白天写一天代码，晚上10点回到酒店里接着肝到一两点。（有五星级酒店住，也是我学校在北京，但仍和大家一起住酒店的原因。标间一晚九百多，很舒服）。我俩甚至把项目开源了：<a href=\"https://github.com/Yellow-Pay/MakeTheAmericanGreatAgain\">Yellow-Pay/MakeTheAmericanGreatAgain</a>。在GitHub上可以搜到很多shm-ipc的库，我们的目的更多的是为了用git协同工作。</p>\n<p><img src=\"/images/Bytedance-camp.jpg\" alt=\"做项目的第二天\" /></p>\n<p><img src=\"/images/us.jpg\" alt=\"我和队友黄富乾\" /></p>\n<p>上周五下午刚刚结束夏令营，回学校正式开工，才发现字节跳动的总部中航广场离学校如此之近。本来想坐地铁回来，可是走到知春里的时候发现，学校竟然只有半站路，就直接走回宿舍了。期待以后有机会可以和字节跳动有更多的接触，这么近的距离，偷偷出来实习一定很方便。</p>\n<p>总结一下我这一周的收获，重要程度从前向后：</p>\n<ol>\n<li>结识了很多小伙伴，其中不乏大佬。</li>\n<li>对字节跳动这个公司的氛围、技术栈有了比较深的了解。</li>\n<li>虽然很累，但整个活动我都很开心。</li>\n</ol>\n<p>最后，感谢为此次夏令营奔波劳碌的蔓莲姐姐和其他工作人员及志愿者。</p>\n<p>整个夏令营需要吐槽的地方有，希望明年能有所改善：</p>\n<ol>\n<li>开幕晚宴的饭菜比较难吃，不是太咸、就是太甜。</li>\n<li>中午没有休息的地方。虽然坐着6k元的椅子，但是靠背没有放脖子和脑袋的地方，每天只能靠着墙凑活睡了。到现在我腰还因此疼。</li>\n</ol>\n",
            "tags": [
                "ByteDance",
                "interview"
            ]
        }
    ]
}